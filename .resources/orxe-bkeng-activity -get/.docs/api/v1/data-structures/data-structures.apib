# Data Structures

## initiateSearchRadial
+ include searchQueryRQ
+ include customerInfoRQ
+ include currencyRQ
+ include programIdRQ

## searchQueryRQ
+ searchQuery (searchInfo, required) - Contains the list of search criteria that must be used to search for activities. The `searchQuery` object must contain the information about the geo region and the date range within which the customer wants to search for activities.

## searchInfo
+ include boundsRQ
+ include dateRangeRQ
+ include optionsRQ
+ include filters

## boundsRQ
+ bounds (boundsInfo, required) - Contains information about the geo region where the customer wants to search for activites.

## boundsInfo
+ circle (centerInfo, required) - Contains the geographic coordinates of the center point and the radius within which you want to search for activities.

## centerInfo
+ center (object, required) - Contains the latitude and longitude coordinates of the given point from which the radius is calculated to determine the area to search for activities. For example, if you want to search for activities within a 60.5 km radius from the Santa Monica Pier, the Santa Monica Pier is considered as your center.
    + lat: `34.0103` (number, required) - Latitude coordinate of the center point. The `lat` value must be between -90 and +90. For example, the `lat` value for Santa Monica Pier is 34.0103. Format: Decimal 
    + long: `-118.4963` (number, required) - Longitude coordinate of the center point. The `long` value must be between -180 and +180. For example, the `long` value for Santa Monica Pier is -118.4963. Format: Decimal
+ radiusKm: `60.5` (number, required) - Distance, in kilometers, from the center point that you want to consider in the search area. The `radiusKm` value must be between `1` and `100`. For example, if you want to search within a 60.5-km radius from the Santa Monica Pier, then set the `radiusKm` field to 60.5.
 Format: Decimal

## dateRangeRQ
+ dateRange (dateRangeInfo, required) - Contains the range of date between which the customer wants to search for activities. 

## dateRangeRQStateless
+ dateRange (dateRangeInfoSL, required) - Contains the range of date for which the customer wants to search for activities. 

## dateRangeInfo
+ from: `{date|YYYY-MM-DD|30}` (string, required) - Start date from when the customer wants to search for activities. Format: YYYY-MM-DD
+ to: `{date|YYYY-MM-DD|30}` (string, required) - End date up to when the customer wants to search for activities. Format: YYYY-MM-DD

## dateRangeInfoSL
+ from: `{date|YYYY-MM-DD|30}` (string, required) - Start date from when the customer wants to search for the activity. Format: YYYY-MM-DD
+ to: `{date|YYYY-MM-DD|30}` (string, required) - End date up to when the customer wants to search for the activity. Format: YYYY-MM-DD

## optionsRQ
+ paxNationality: `US` (string, nullable) - 2-character ISO code that indicates the traveler's nationality. 
Notes:
  + This is an optional field.
  + If you want to provide the `paxNationality` in the request, you must provide a valid character ISO country code or set the field to `null` without the quotation marks ("").

## allowedCountry
+ allowedCountry: US - Include only those activities that belong to the country character ISO country code specified in this field. This filter is used when the specified radial search region spreads across different countries and you want to restrict the results to only one specific country. Consider a scenario where the georegion provided in the search criteria is located close to a country's borderline and the radius spans two countries, such as `France` and `Belgium`. In this scenario, if you want to restrict the results to `France`, you must set the `allowedCountry` field value to `FR`.

## customerInfoRQ
+ customerInfo (customerDetails, required) - Contains information about the customer and the eligibility information of the customer for the loyalty program that the customer is associated with.

## customerDetails
+ include customerIdRQ
+ include pointBalance
+ include transitCode
+ include eligibilityInfoRQ

## customerIdRQ
+ id: `autoUser` (string, required) - Unique ID for the customer.

## pointBalance
+ availablePointBalance: `90000.0` (number, required) - Number of loyalty points available in the customer's credit card account. Format: Decimal

## transitCode 
+ transitCode: `72e87c86-c240-45eb-8d96-b46c52e5618f` (string, required) - Unique code that is generated by the transit service. The transit code is used to track all the calls made to different systems within cxLoyalty for all search to booking-related transactions for a single user session. The transit code is valid for `72 hours` from the time it is generated.

## eligibilityInfoRQ
+ eligibilityInfo (eligibility) - For internal use only.

## eligibility
+ programCurrency: `Points` - For internal use only.
+ purchaseAllowed: true (boolean) - For internal use only.
+ redemptionAllowed: true (boolean) - For internal use only.
+ displayProgramCurrencyAsDecimal: false (boolean) - For internal use only.
+ useVariableMilesFormula: false (boolean) - For internal use only.
+ shortfallAllowed: true (boolean) - For internal use only.

## currencyRQ
+ currency: `USD` (string, required) - 3-character ISO code that indicates the currency in which you want to retrieve monetary amounts. The API calculates the amount equivalents and returns the amounts in the currency specified. For example, if the `currency` field value is set to `USD`, then the base fare, discount, taxes, and other monetary amounts are returned in their `USD` amount equivalents. We support all ISO currencies If you want to configure multiple currencies, please contact cxLoyalty Business Team. Consider a scenario where you set the `currency` field value to `USD` and the supplier's currency is in `AUD`. The API calculates the `AUD` to `USD` amount equivalents and displays monetary amounts in `USD`. 
Note: If you do not set a value for the `currency` field, the `currency` value will automatically be set based on your default account configuration.

## programIdRQ
+ programId: `docs` (string, required) - Unique ID for the loyalty program. Each loyalty program can be associated with various rewards. The `programId` is used to retrieve all the rewards mapped to it.

## session
+ sessionId: `d29e0c56-54fb-4e1a-974a-7362635bb135` - Unique acknowledgement token that indicates that the request has been received and the processing has been initiated. The session ID is valid for 60 minutes from the time it is generated. You must use this `sessionId` for the subsequent API calls made in the same session. 

## sessionIdReq
+ sessionId: `d29e0c56-54fb-4e1a-974a-7362635bb135` (string, required) - Unique ID for the current session. You must obtain the `sessionId` for your current session from the `Initiate Activity Search` API response. The session ID is valid for 60 minutes from the time it is generated.

## getstatusresponse
+ status: `Inprogress` (enum) - Current status of your activity search request. 
    + Completed 
    + Faulted
    + InProgress
+ resultCount: `10` (number) - Total number of activities that are available in the result set at the time when the status request is made.
+ errors (array [errorInfo], fixed-type) - Contains the list of errors that occur during the activity search. For example, if an error occurs when the engine validates the currency provided in the request with the currency that is set in the account configuration, the `errors` array lists the appropriate error message.

## errorInfo
+ code: `14` - Code for the error.
+ message: `The supplier server is unreachable. Try again after some time.` - Error message text. 

## getSearchResults
+ include paging 
+ include currencyRQ
+ include sessionIdReq
+ include filtersResults 
+ include customerInfoSearchRQ

## paging 
+ paging (pageInfo) - Contains information about the pagination manner in which you want the response to provide the search results.

## pageInfo
+ pageNo: `1` (number, required) - Indicates the start page from where you want to retrieve the search results. The response returns the result set only from the `pageNo` that you specify while considering the number of search results per page based on the `/paging/pageSize` field. Consider a scenario where you set the `/paging/pageSize` field to `10`, which means that the response will return 10 search results per page. If you want the response to return the search results from the 21st search result/record and skip/ignore search results 1 to 20. In this scenario, you must set the `pageNo` field to `3`. Default value: `1`.
+ pageSize: `10` (number, required) - Indicates the number of search results/records that the response must return per page. For example, if you want the response to return `10` search results per page, set the `pageSize` field to `10`. Note: The `pageSize` field value must be greater than `0`. 
+ orderBy: `price` (string) - Indicates the sort criteria or order in which the response must return the search results. You can sort the search results by: - `recommended` (Sort order based on supplier's recommendation) - `price` (Ascending order of total fare) - `price asc` (Ascending order of total fare) - `price desc` (Descending order of total fare) - `rating` (Ascending order of TripAdvisor rating) - `rating asc` (Ascending order of TripAdvisor&reg; rating) - `rating desc` (Descending order of TripAdvisor&reg; rating) - `name` (Ascending order of activity name) - `name asc` (Ascending order of activity name) - `name desc` (Descending order of activity name). Default value: price asc

## filters 
+ filters (filterInfo) - Contains filters to narrow down the activity search results. The search results include only those activities that match all the filter criteria specified. Note that all the content related to an activity, such as the activity cancellation policies, location, address, and contact information, are obtained from the supplier.

## filtersResults
+ filters (filterInfo) - Contains filters to narrow down the activity search results. The search results include only those activities that match all the filter criteria specified. Note that all the content related to an activity, such as the activity cancellation policies, location, address, and contact information, are obtained from the supplier. Note: If you do not specify the `filters` in the `Get Activity Search Results` API request, then the activity search results are filtered based on the filter criteria provided in the `Initiate Activity Search` API request, if specified. 

## filterInfo
+ include activityNameFilter
+ include priceFilter
+ include categoryFilter
+ include tripAdvRatingFilter
+ include allowedCountry

## activityNameFilter
+ activityNames: `Virtual Guided Cultural Tour of Los Angeles`, `Gambling Built the Sunset Strip Walking Audio Tour by VoiceMap`, `Crazy Dash Walking Adventure of Ontario, CA`, `Wacky Walk Adventure Game - Anaheim, CA`, `Operation City Quest Scavenger Hunt - Los Angeles, CA` (array) - Include only those activities whose activity name is same as specified in this field. Note: This is a case-insensitive exact match filter. 

## priceFilter
+ price (priceFilterInfo) - Include only those activities whose rate is equal to or higher than the rate specified in the `minPrice` field and equal to or less than the rate specified in the `maxPrice` field. The `price` filter allows users to see only those activities that are within the specified price range. 
Notes:
  + It is recommended that you provide both the `minPrice` and `maxPrice` fields in the request. 
  + For both `minPrice` and `maxPrice` fields, the value must be greater than or equal to `0`. 
  + The `maxPrice` field value must be greater than the `minPrice`. 

## priceFilterInfo
+ minPrice: 20.00 (number) - Include only those activities whose rate is equal to or higher than the rate specified in this field. The `minPrice` value must be greater than or equal to `0`. Notes: The `minPrice` value is an indicative rate, which means that these are approximate rates. If you want to obtain the exact rate, you must call the Get Activity Details API. The value for this field must be less than the value of the `maxPrice` field.  Default value: `0` Format: Decimal
+ maxPrice: 1000.00 (number) - Include only those activities whose rate is equal to or lower than the rate specified in this field. The `maxPrice` value must be greater than or equal to `0`. Notes: The `maxPrice` must be greater than or equal to the `minPrice`. By default, the `maxPrice` field is set to the highest price value returned in the search result set.  Format: Decimal

## categoryFilter
+ categories: `9`, `12`, `16`, `4` (array) - Include only those activities that belong to the categories specified in this field. You must provide the IDs of the categories that are supported by the `categories` filter.

## tripAdvRatingFilter
+ tripAdvisorRating: `1`,`2`, `3`, `4`, `5` (array) - Include only those activities whose TripAdvisor&reg; rating is equal to the TripAdvisor&reg; rating specified in this field. The `tripAdvisorRating` field value must be between 1 and 5. This rating information is obtained from the TripAdvisor. If you set the `tripAdvisorRating` field to `2`, then the search results include activities whose TripAdvisor&reg; rating is between `2.0` and `2.9`.

## customerInfoSearchRQ
+ customerInfo (customerResults) - Contains information about the customer.
 Notes:
  + If you do not provide this field, the API returns the reward options based on the available point balance provided in the Initiate Activity Search API request. 
  + If you provide this field, the API returns the reward options based on the available point balance provided in the `Get Activity Search Results` API request.

## customerInfoResultsRQ
+ customerInfo (customerResults) - Contains information about the customer.
 Notes:
  + If you do not provide this field, the API returns the reward options based on the available point balance provided in the Initiate Activity Search or the `Initiate a Stand-Alone Activity Search` APIs request. 
  + If you provide this field, the API returns the reward options based on the available point balance provided in the `Get Activity Details Result` API request.

## customerResults
+ include customerIdRQ
+ include availablePointBalance

## availablePointBalance
+ availablePointBalance: `90000.0` (number, required) - Number of loyalty points available in the customer's credit card account. Format: Decimal

## getresultsresponse
+ include sessionRS
+ include activitiesRS
+ include pagingRS

## sessionRS
+ sessionId: `d29e0c56-54fb-4e1a-974a-7362635bb135` - Unique acknowledgement token that indicates that the request has been received and the processing has been initiated. The session ID is valid for 60 minutes from the time it is generated.

## pagingRS
+ paging (pageInfoRS, required) - Contains information about the pagination manner in which you want the response to provide the search results. Default value: `200`.

## pageInfoRS
+ totalRecords: `1` (number) - Indicates the total number of search results provided in the response.
+ pageNo: `1` (number, required) - Indicates the start page from where the response retrieved the search results. The response returns the result set only from the `PageNo` that you specify in the `Get Activity Search Results` request, while considering the number of search results per page based on the `/paging/pageSize` field. Consider a scenario where the `/paging/pageSize` field is set to `10`, which means that the response will return 10 search results per page. If you want the response to return the search results from the 21st search result (record) and skip (ignore) search results 1 to 20. In this scenario, you must set the `pageNo` field to `3`. Default value: `1`. 
+ pageSize: `10` (number) - Indicates the number of search results (records) per page, as returned in the response. For example, if the response returned `10` search results per page, set the `pageSize` field returns `10`. Default value: `200`.

## activitiesRS
+ activities (array [activityDetails], fixed-type) - Contains the list of the activities, along with their content attributes, such as activity name, images, policies, reviews, and rating. The activity-related content attributes are obtained from the supplier.  

## activityDetails
+ include activityIdRS
+ include activityName
+ include activitySupplier
+ include activityCategory
+ include activityContent
+ include bookingQuestions
+ include fareType
+ include displayFare
+ include purchaseOptionsRS

## activityIdRS
+ id: `59521P1` - Unique activity ID that identifies a specific activity. 

## activityName
+ name: `Anaheim Resort Area Multi-Day Transportation Tickets` - Name of the activity. 

## activityCategory
+ categories (array [categoryInfo], fixed-type) - Contains the list of categories to which the activity belongs.  

## categoryInfo
+ id: `20` - Unqiue ID for the category. 
+ name: `Multi-day & Extended Tours` - Name of the category. 

## activityContent
+ content (contentInfo) - Contains information about the activity, including its content attributes, such as the activity summary, rating, location, reviews, images, and policies. The activity-related content attributes are obtained from the supplier.

## contentInfo
+ include media 
+ include location
+ include summary
+ include duration 
+ include notes 
+ include inclusions 
+ include exclusions
+ include displayInfos
+ include policies
+ include reviews
+ include rating 
+ include maxPassengerCount
+ include cancellationPolicy
+ include offers

## media 
+ media (mediaInfo) - Contains the media information related to the activity, such as primary image, images, thumbnails, and captions. 

## mediaInfo
+ primaryImage (primaryImageInfo) - Contains information about the primary image for the activity. 
+ images (array [imagesResults], fixed-type) - Contains the list of full-size images for the activity. 

## primaryImageInfo
+ url: `https://hare-media-cdn.tripadvisor.com/media/attractions-splice-spp-674x446/06/71/c3/b5.jpg` - The content delivery network (CDN) URL for the full-size image. If this information is not available from the supplier, this field is returned as `null`.
+ thumbnailUrl: `https://hare-media-cdn.tripadvisor.com/media/attractions-splice-spp-154x109/06/71/c3/b5.jpg` - The content delivery network (CDN) URL for the thumbnail image. If this information is not available from the supplier, this field is returned as `null`.
+ caption: `Anaheim Resort Area Multi-Day Transportation Tickets` - Description of the full-size image. The caption can be used to display text alongside the image or to display text while the image is loading. If this information is not available from the supplier, this field is returned as `null`.

## location 
+ location (locationInfo) - Contains the location of the activity. Either the `city` or the `state` details are returned in the `location` object. This is a supplier-specific limitation. 

## locationInfo
+ include geoCodeLocation
+ include addressActivity
+ include departureInfo

## geoCodeLocation 
+ geoCode (geoCodeInfo) - Contains the geographic coordinates of the activity location. If this information is not provided by the supplier, then the value of `lat` and `long` is returned as null. 

## geoCodeInfo
+ lat: 33.859013 (number, nullable) - Latitude coordinate of the activity location. The `lat` value must be between `-90` and `+90`. If the supplier does not provide this information, then the value of the `lat` field is returned as `null`. 
+ long: `-117.9778750001` (number, nullable) - Longitude coordinate of the activity location. The `long` value must be between `-180` and `+180`. If the supplier does not provide this information, then the value of the `long` field is returned as `null`. 

## city 
+ city (cityInfo) - Contains information about the city. Depending on the supplier, either the city `code`, `name`, or both fields are returned in the API response. 

## cityInfo
+ code: `ANA` - 3-character city code. 
+ name: `Anaheim Buena Park` - Name of the city. 

## state
+ state (stateInfo) - Contains information about the state. If this information is not provided by the supplier, then this field is not returned in the response. 

## stateInfo
+ name: `California` - Name of the state. 

## countryCode
+ countryCode: `US` - 2-character ISO code of the country. 

## summary
+ summary: `Enjoy all the theme parks, hotels, restaurants, shopping, dining and other destinations within the Anaheim Resort area with this multi-day transportation ticket. Whether you want to go to the theme parks, do some shopping or sample some local cuisine you will be able to get there quickly and efficiently by eco-friendly bus! The routes include the cities of Anaheim, Garden Grove, Buena Park, Costa Mesa, Santa Ana and Orange and the tickets can be delivered to your hotel.` - Description of the activity.

## duration 
+ duration: `5 days` - Duration of the activity. 

## notes
+ notes: `Confirmation will be received at time of booking` (array) - Contains additional notes or important information related to the activity. If this information is not provided by the supplier, then this field is returned as an empty array. 

## inclusions 
+ inclusions: `Transportation for the number of selected days`, `All taxes, fees and handling charges` (array) - Contains a list of services that are included in the activity. If this information is not provided by the supplier, then this field is returned as an empty array. 
 

## exclusions
+ exclusions: `Hotel pickup and drop-off` (array) - Contains a list of services that are excluded from the activity. If this information is not provided by the supplier, then this field is returned as an empty array. 

## displayInfos
+ displayInfos (array [display], fixed-type) - Contains the list of display information for the activity, which can be used for display or advertisement purpose on the User Interface (UI). If this information is not provided by the supplier, then this field is returned as an empty array. 


## display 
+ title: `Highlights` - Title for the display information. 
+ desc: `Family friendly. Multiple departure times and locations available. Flexibility to customize your itinerary to your own preferences.` - Display text. 

## policies
+ policies (array [policiesInfo], fixed-type) - Contains the list of information about the applicable policies for the activity. If this information is not provided by the supplier, then this field is returned as an empty array. 


## policiesInfo
+ type: `General` - Policy type as received from the supplier.
+ desc: `For a full refund, cancel at least 24 hours in advance of the start date of the experience.` - Textual description of the policy. 

## reviews
+ reviews (array[reviewInfo], fixed-type) - Contains the list of reviews, given by other customers, for the activity. If this information is not provided by the supplier, then this field is returned as an empty array. 


## reviewInfo
+ desc: `It was an amazing experience with exceptional travel arrangements.` - Description of the review. 
+ rating: 5.0 (number) - Rating (1-5) for the activity, as provided by the reviewer. Format: Decimal
+ date: `2018-12-08T10:20` - Date when the review was submitted. Format:YYYY-MM-DDTHH:MM

## rating 
+ rating: 4.5 (number) - Overall rating (1-5) for the activity, as obtained from the supplier. Format: Decimal

## maxPassengerCount
+ maxPassengerCount: 3 (number) - Indicates the maximum number of travelers allowed to participate in this activity. 

## cancellationPolicy
+ cancellationPolicy (Penalties) - Contains information about the cancellation policy and the list of applicable cancellation penalties, including information such as the window determining the penalty period and the penalties incurred for the cancellation. 


## offers
+ offers (array[offerInfo], fixed-type) - Contains details about supplier-specific promotional offers. If this information is not provided by the supplier, then this field is returned as an empty array. 

## offerInfo
+ format: `Text` (enum) - Indicates the format in which the offer is provided by the supplier. 
    + Structured
    + Text  
+ desc: `10% off Tours & Activities` - Description of the promotional offer. 

## bookingQuestions
+ bookingQuestions (array[questionInfo], fixed-type) - Contains the list of questions that is displayed to the customer at the time of booking. The customer must provide a response for the mandatory questions for the booking to be successful. Note that if this information is not provided by the supplier, then this field is returned as an empty array. 

## questionInfo
+ question: `Please pick me up at` - Contains the question that is displayed to the customer on the User Interface (UI) at the time of booking. 
+ sampleAnswer: `Holiday Inn Anaheim- Resort Area` - Sample answer that is displayed, as a reference, on the User Interface (UI).
+ id: `19` (number) - Unique ID that is assigned to the question.
+ isMandatory: true (boolean) - Indicates whether the question is mandatory for the customer at the time of booking. If this field returns `true`, then you must provide question ID returned in the `bookingQuestions[]/id` field in the `questionAnswers[]/questionId` field in the Initiate Booking API request. For more information on how the `isMandatory` field value affects the `Initiate Booking` API request, see the `/bookingInfo/questionAnswers` field description in the `Initiate Booking` API request.
+ sortOrder: `1` (number) - Indicates the order index used for displaying the question.
+ questionCategory: `Pickup Location` - Contains the category to which this question belongs. 

## fareType
+ fareType: `Negotiated` (enum) - Indicates the type of fare.
    + published
    + negotiated

## displayFare
+ displayFare (displayFareInfo) - Contains information about the fare, along with the various breakup components that make up the fare for the activity. This fare is displayed to the customer on the User Interface (UI). 

## displayFareInfo
+ include currencyDSFare 
+ include isRefundable
+ include totalFareStartsFrom
+ include breakup

## currencyDSFare
+ currency: `USD` - 3-character ISO code that indicates the currency in which monetary amounts are returned in the response. The API calculates the amount equivalents and returns the amounts in the currency specified. For example, if the `currency` field value is set to `USD`, then the `baseFareStartsFrom`, `discount`, `taxes`, and other monetary amounts are returned in their `USD` amount equivalents. We support all ISO currencies If you want to configure multiple currencies, please contact cxLoyalty Business Team.

## isRefundable
+ isRefundable: true (boolean) - Indicates whether the fare is refundable. 

## totalFareStartsFrom
+ totalFareStartsFrom: `5.59` (number) - Contains the starting fare for the activity after considering the `breakup/baseFareStartsFrom`, `breakup/taxes`, `breakup/fees`, `breakup/discounts`, and `breakup/markups` amounts. Format: Decimal

## breakup
+ breakUp (breakupDSInfo) - Contains information about various breakup components that make up the `displayFare/totalFareStartsFrom`.

## breakupDSInfo
+ baseFareStartsFrom: `4.4` (number) - Contains the starting base fare for the activity. 
Note: The baseFare amount does not include the discount, taxes, fees, markup one, or any other additional cost. Format: Decimal
+ include taxes
+ include fees
+ include discounts 
+ include markups

## taxes 
+ taxes (array [taxesInfo], fixed-type) - Contains the list of all the applicable taxes for the activity. This amount is not included in the `breakup/baseFareStartsFrom` field. However, this amount is already included in the `displayFare/totalFareStartsFromFare` field. If the supplier does not provide this information, the `taxes` array returns empty.

## taxesOptions
+ taxes (array [taxesInfo], fixed-type) - Contains the list of all the applicable taxes for the activity. This amount is not included in the `breakup/baseFare` field. However, this amount is already included in the `displayFare/totalFare` field. If the supplier does not provide this information, the `taxes` array returns empty.

## taxesInfo
+ amount: `0.0` (number) - Tax amount. Format: Decimal
+ code: `LT` - Unique code for the tax that is charged.
+ desc: `Luxury tax` - Description or additional information for the type of tax that is charged.

## fees 
+ fees (array [feesInfo], fixed-type) - Contains the list of all the applicable fees for the activity. This amount is not included in the `breakup/baseFareStartsFrom` field. However, this amount is already included in the `displayFare/totalFareStartsFrom` field. If the supplier does not provide this information, the `fees` array returns empty.

## feesOptions
+ fees (array [feesInfo], fixed-type) - Contains the list of all the applicable fees for the activity. This amount is not included in the `breakup/baseFare` field. However, this amount is already included in the `displayFare/totalFare` field. If the supplier does not provide this information, the `fees` array returns empty.

## feesInfo
+ amount: `0` (number) - Fee amount. Format: Decimal
+ desc: `Early check-in fee` - Description or additional information for the type of fee that is charged.
+ source: `Supplier` - Indicates whether the fee is charged by the supplier or the Online Travel Agency (OTA system).

## discounts
+ discounts (array [discountsInfo], fixed-type) - Contains the list of all the applicable discounts for the activity. This amount is not included in the `breakup/baseFareStartsFrom` field. However, this amount is already included in the `displayFare/totalFareStartsFrom` field. If the supplier does not provide this information, the `discounts` array returns empty.

## discountsOptions
+ discounts (array [discountsInfo], fixed-type) - Contains the list of all the applicable discounts for the activity. This amount is not included in the `breakup/baseFare` field. However, this amount is already included in the `displayFare/totalFare` field. If the supplier does not provide this information, the `discounts` array returns empty.

## discountsInfo
+ amount: `0.0` (number) - Discount amount. Format: Decimal 
+ desc: `Low season discount` - Description or additional information for the discount that is offered.
+ source: `supplier` - Indicates whether the discount is provided by the supplier or the Online Travel Agency (OTA system).

## markups
+ markups (array [markupsInfo], fixed-type) - Contains the list of applicable markup one for the fare. This amount is not included in the `breakup/baseFareStartsFrom` field. However, this amount is already included in the `displayFare/totalFareStartsFrom` field. 

## markupsOptions
+ markups (array [markupsInfo], fixed-type) - Contains the list of applicable markup one for the fare. This amount is not included in the `breakup/baseFare` field. However, this amount is already included in the `displayFare/totalFare` field. 

## markupsInfo
+ amount: `1.19` (number) - markup two (MUP) amount. Format: Decimal
+ desc: `agency` - Description or additional information for the markup three.
+ source: `Agency` - Indicates the source that has applied the markup three.

## purchaseOptionsRS
+ purchaseOption (purchaseOptionInfo) - Contains information about the different reward options that the customer can avail to pay for the booking.

## purchaseOptionInfo 
+ include totalPurchaseUnits 
+ include cashCurrency
+ include pointsCurrency
+ include rewards 

## purchaseOptionsOptionsRS
+ purchaseOption (purchaseOptionOptionsInfo) - Contains information about the different reward options that the customer can avail to pay for the booking.

## purchaseOptionOptionsInfo 
+ include totalPurchaseUnits 
+ include cashCurrency
+ include pointsCurrency
+ include rewardsOptions

## totalPurchaseUnits 
+ totalPurchaseUnits: `1` (number) - Total number of rewards that the customer can avail to pay for the booking.

## cashCurrency
+  cashCurrency: `USD` - 3-character ISO code that indicates the currency in which the cash amount is returned in the `cash` field. For example, if the `currency` is set to `USD`, then the `cash` amounts are returned in the `USD` amount equivalents. We support all ISO currencies.

## pointsCurrency
+ pointsCurrency: `Points` - Indicates the currency that is associated with the loyalty program. For example, points and miles. Note that the `points` field value is represented by this currency.

## rewards 
+ rewards (array[rewardInfo], fixed-type) - Contains the list of reward options that the customer can avail to make the booking.

## rewardInfo
+ id: `1482|1` - Unique ID for the reward.
+ name: `Activity Reward` - Name of the reward.
+ rank: `10` - Rank assigned to the reward. This can be used to display the reward options on the User Interface (UI), based on the reward ranking.
+ type: `Variable_TieredVariable_LAPF_HybridFTP` (enum) - Type of reward.
  + Dollars_Off_Incremental
  + Dollars_Off
  + FixedTicketPrice_TieredFTP
  + Purchase
  + Variable_TieredVariable_LAPF_HybridFTP
+ recommendation (recommendationInfo) - Contains information about the recommended combination of cash and points that can used to pay for the booking. The recommendation is calculated based on the type of reward, customer's point balance, and the customer's eligibility information. If this field returns `null`, this means that the customer is not eligible for the reward returned in the `rewards[]/type` field. 
+ isEligible: true (boolean) - Indicates whether the customer is eligible to use this reward based on the customer's point balance. If the `isEligible` field returns `false`, this means that the customer is not eligible to use the reward.
+ ruleSet (ruleSetInfo) - Contains information about the rules based on which the `minimum` and `maximum` points that the customer can redeem is calculated.
+ strikeoutValue (strikeoutValueInfo) - Contains the pre-discounted fare for the activity in cash, points, or a combination of cash and points based on the type of reward. Note that this is a pre-discounted fare that appears striked-out to the customer on the User Interface (UI).
+ actualValue (actualValueInfo) - Contains the actual fare for the activity in cash, points, or a combination of cash and points based on the type of reward. 
+ stateBag (array [stateBagInfoPurchase], fixed-type) - For internal use only. 

## rewardsOptions 
+ rewards (array[rewardOptionsInfo], fixed-type) - Contains the list of reward options that the customer can avail to make the booking.

## rewardOptionsInfo
+ id: `1482|1` - Unique ID for the reward.
+ name: `Activity Reward` - Name of the reward.
+ rank: `10` - Rank assigned to the reward. This can be used to display the reward options on the User Interface (UI), based on the reward ranking.
+ type: `Variable_TieredVariable_LAPF_HybridFTP` (enum) - Type of reward. 
  + Dollars_Off_Incremental
  + Dollars_Off
  + FixedTicketPrice_TieredFTP
  + Purchase
  + Variable_TieredVariable_LAPF_HybridFTP
+ recommendation (recommendationInfo) - Contains information about the recommended combination of cash and points that can used to pay for the booking. The recommendation is calculated based on the type of reward, customer's point balance, and the customer's eligibility information. If this field returns `null`, this means that the customer is not eligible for the reward returned in the `rewards[]/type` field. 
+ isEligible: true (boolean) - Indicates whether the customer is eligible to use this reward based on the customer's point balance. If the `isEligible` field returns `false`, this means that the customer is not eligible to use the reward.
+ ruleSet (ruleSetInfoOption) - Contains information about the rules based on which the `minimum` and `maximum` points that the customer can redeem is calculated.
+ strikeoutValue (strikeoutValueInfo) - Contains the pre-discounted fare for the activity in cash, points, or a combination of cash and points based on the type of reward. Note that this is a pre-discounted fare that appears striked-out to the customer on the User Interface (UI).
+ actualValue (actualValueInfo) - Contains the actual fare for the activity in cash, points, or a combination of cash and points based on the type of reward. 
+ stateBag (array [stateBagInfoPurchase], fixed-type) - For internal use only. 

## recommendationInfo
+ cash: `0.0` (number) - Recommended cash component of the actual fare that can be paid to book the activity. Format: Decimal 
+ points: `1000.0` (number) - Recommended number of points that can be redeemed by the customer in the `pointsCurrency`. Note: If the type of reward returned in the `rewards[]/type` field is `Purchase`, then the `points` field will always return value as `0`. Format: Decimal
+ fee (feeRecommendation) - Contains information about the applicable fee that the customer must pay when this reward option (rewards[]/id field) is used. If additional fee is not applicable for this reward option, then the `rewards[]/recommendation/fee` field is not returned in the API response.
+ maxQuantity: `1` (number) - Maximum number of times that this reward can be used to make payment for the booking, based on the customer's point balance.

## feeRecommendation
+ cash: `0.0` (number) - Cash component of the fee amount. Format: Decimal 
+ points: `0.0` (number) - Points component of the fee amount in the `pointsCurrency`. Format: Decimal 
+ description: `fees` - Description of the fee. 

## ruleSetInfo
+ minimumPoints: `1000.0` (number) - Minimum points that the customer must redeem to use this reward option. Format: Decimal
+ maximumPoints: `1000.0` (number) - Maximum points that the customer can redeem to use this reward option. Format: Decimal
+ pointToCashFactor (pointToCashFactorInfo) - Contains information about the conversion factor that is used to convert points to cash in case of a variable reward.
+ cashRoundingOff: `0.0` (number) - Amount of cash that is deducted from the `displayFare/totalFareStartsFrom` and redeemed against the equivalent number of points from the customer’s point balance in case of dollar off reward and dollar off increemental reward. Format: Decimal
+ pointStepSize: `1.0` (number) - Minimum quantity by which the customer can increase or decrease the number of points in case of a variable reward. Format: Decimal
+ roundingType: `None` (enum) - Indicates the rounding type that is used for rounding the points value.
  + Up
  + Down
  + Natural
  + None

## ruleSetInfoOption
+ minimumPoints: `1000.0` (number) - Minimum points that the customer must redeem to use this reward option. Format: Decimal
+ maximumPoints: `1000.0` (number) - Maximum points that the customer can redeem to use this reward option. Format: Decimal
+ pointToCashFactor (pointToCashFactorInfo) - Contains information about the conversion factor that is used to convert points to cash in case of a variable reward.
+ cashRoundingOff: `0.0` (number) - Amount of cash that is deducted from the `displayFare/totalFare` and redeemed against the equivalent number of points from the customer’s point balance in case of dollar off reward and dollar off increemental reward. Format: Decimal
+ pointStepSize: `1.0` (number) - Minimum quantity by which the customer can increase or decrease the number of points in case of a variable reward. Format: Decimal
+ roundingType: `None` (enum) - Indicates the rounding type that is used for rounding the points value.
  + Up
  + Down
  + Natural
  + None
             
## pointToCashFactorInfo
+ value: `0.0100000` (number) - Indicates the conversion factor value that is used to calculate the cash equivalent in the `cashCurrency` for specific number of points. Consider a scenario where the `cashCurrency` is `USD` and you want to calculate the cash equivalent for `10000` points. If the conversion factor value is `0.01` and the `operator` is `Multiply`, then the cash equivalent for `10000` points will be `$100`. Format: Decimal
+ conversionOperator: `Multiply` (enum) - Arithmetic operator applied to calculate the points to cash conversion.
  + Multiply
  + Divide
  + Subtract
  + Add

## strikeoutValueInfo
+ cash: `0.0` (number) - Cash component of the pre-discounted fare amount. Format: Decimal
+ points: `0.0` (number) - Points component of the pre-discounted fare amount in the `pointsCurrency`. Format: Decimal

## actualValueInfo
+ cash: `0.0` (number) - Cash component of the actual fare amount. Format: Decimal
+ points: `1000.0` (number) - Points component of the actual fare amount in the `pointsCurrency`. The number of points returned in the `actualValue/points` field is calculated without considering the customer's point balance. Format: Decimal

## stateBagInfo
+ key1: `Value1` - For internal use only. 

## stateBagInfoPurchase
+ key: `Discount` - For internal use only. 
+ value: 20.00 (number) - For internal use only. 

## initiateStatefulActivitySearchRequest
+ include activityIdStateful
+ include sessionIdReq
+ include currencyRQ

## activityIdStateful
+ activityId: `59521P1` (string, required) - Unique activity ID that identifies a specific activity for which you want to retrieve the activity details. You must obtain the activity ID from the `/activities[]/id` field returned in the `Get Activity Search Results` API response. 

## activityIdStateless
+ activityId: `59521P1` (string, required) - Unique activity ID that identifies a specific activity for which you want to retrieve the activity details. You must use this `activityId` as an identifier for the activity in subsequent API calls at a later point in time. 

## initiateActivityStatefulSearchResponse
+ include activitySearchRS
+ include sessionRS

## initiateStatelessActivitySearchRequest
+ include activityIdStateless
+ include currencyRQ
+ include programIdRQ
+ include searchQueryStateless 
+ include customerInfoRQ

## activitySearchRS
+ activityId: `59521P1` (string, required) - Unique activity ID that identifies a specific activity for which you want to retrieve the activity details. You must use this `activityId` as an identifier for the activity in subsequent API calls at a later point in time. 

## searchQueryStateless
+ searchQuery (searchInfoStateless, required) - Contains information about the search criteria that must be used to search for the activity. The `searchQuery` object must contain the date range between which the customer wants to search for the activity.

## searchInfoStateless
+ include dateRangeRQStateless
+ include optionsRQ

## initiateStatelessActivitySearchResponse
+ include activitySearchRS
+ include sessionRS

## statusRequest
+ include activityIdStatus 
+ include sessionIdStatusReq

## activityIdStatus
+ activityId: `59521P1` (string, required) - Unique activity ID that identifies a specific activity for which you want to retrieve information. You must set the value for this field to the activity ID received in the `Initiate Retrievel of Activity Details` API response. 

## sessionIdStatusReq
+ sessionId: `d29e0c56-54fb-4e1a-974a-7362635bb135` (string, required) - Unique ID for the current session. You must obtain the session ID for your current session from `Initiate Retrieval of Activity Details` API response. The session ID is valid for 60 minutes from the time it is generated.

## getActivitystatusresponse
+ status: `Inprogess` (enum) - Current status of the activity details request. 
    + Completed 
    + Faulted
    + InProgress
+ errors (array [errorInfo], fixed-type) - Contains the list of errors that occur while retrieving the activity details. For example, if an error occurs when the engine validates the currency provided in the request with the currency that is set in the account configuration, the errors array lists the appropriate error message.

## resultsRequest
+ include sessionIdStatusReq
+ include activityIdRQ
+ include currencyRQ
+ include customerInfoResultsRQ

## activityIdRQ
+ activityId: `59521P1` (string, required) - Unique activity ID that identifies a specific activity. You must set the value for this field to the activity ID received in the `Initiate Retrieval of Activity Details` API response.

## resultsResponse
+ include sessionResultsRS
+ include activitiesResultsRS

## sessionResultsRS
+ sessionId: `d29e0c56-54fb-4e1a-974a-7362635bb135` (string, required) - Unique ID for the current session. You must obtain the `sessionId` for your current session from the `Initiate Retrieval of Activity Details` API response. The session ID is valid for 60 minutes from the time it is generated.

## activitiesResultsRS
+ activity (activityResultsDetails) - Contains information about the activity, along with its content attributes, such as activity name, images, policies, reviews, and rating. The activity-related content attributes are obtained from the supplier.  

## activityResultsDetails
+ include activityIdRS
+ include activityName
+ include activitySupplier
+ include activityCategory
+ include activityContentDetails
+ include bookingQuestions
+ include availableOn
+ include fareType
+ include displayFare
+ include purchaseOptionsRS
+ include paxTypeInfo
 

## activitySupplier
+ supplierId: `3awhj4i7z7k` - Unique ID for the supplier of this activity. This supplier will be used to process any bookings for this activity. 

## activityContentDetails
+ content (contentInfoResults) - Contains information about the activity, including its content attributes, such as the activity summary, rating, location, reviews, images, and policies. The activity-related content attributes are obtained from the supplier. 

## contentInfoResults
+ include mediaDetails 
+ include locationResults
+ include summary
+ include activityDesc
+ include duration 
+ include schedule
+ include notes 
+ include inclusions 
+ include exclusions
+ include displayInfo
+ include vouchers
+ include policies
+ include reviews
+ include rating 
+ include maxPassengerCount
+ include cancellationPolicy
+ include offers

## mediaDetails
+ media (mediaInfoResults) - Contains the media information related to the activity, such as primary image, images, thumbnails, and captions. 

## mediaInfoResults
+ primaryImage (primaryImageInfo) - Contains information about the primary image for the activity. This image can be used to advertise about the activity on the UI (User Interface).
+ images (array [imagesResults], fixed-type) - Contains the list of full-size images for the activity. 

## imagesResults
+ url: `https://hare-media-cdn.tripadvisor.com/media/attractions-splice-spp-674x446/07/38/2b/fd.jpg` - The content delivery network (CDN) URL for the full-size image. If this information is not available from the supplier, this field is returned as `null`.
+ thumbnailUrl: `https://hare-media-cdn.tripadvisor.com/media/attractions-splice-spp-674x446/07/38/2b/fd.jpg` - The content delivery network (CDN) URL for the thumbnail image. If this information is not available from the supplier, this field is returned as `null`.
+ caption: `Travel easily to local attractions` - Description of the full-size image. The caption can be used to display text alongside the image or to display text while the image is loading. If this information is not available from the supplier, this field is returned as `null`.

## locationResults
+ location (locationDetails) - Contains the location of the activity. Depending on the activity, either the `address` or the `departurePoint` details are returned in the response. 

## locationDetails
+ include geoCodeLocation
+ include addressActivity
+ include departureInfo

## addressActivity
+ address (addressActivityInfo) - Contains information about the address of the location where the activity is conducted. If this information is not provided by the supplier, then this field is not returned in the response. 

## addressActivityInfo
+ line1: `3077 ACME Street` - Street number and street name.
+ line2: `Landmark: Beside the ACME Shopping Mall` - Additional information related to the address, such as landmark, apartment, suite, unit, and building information. If this information is not provided by the supplier, then this field is not returned in the response. 
+ include city 
+ include state 
+ include countryCode
+ postalCode: `94133` - Postal code. In various countries, postal code is also known as postcode, post code, Eircode, PIN Code, or ZIP Code.

## departureInfo
+ departurePoint (departureDetails) - Contains information about the departure location, where the customer must reach to board the transport for the activity. If this information is not provided by the supplier, then this field is not returned in the response. 

## departureDetails
+ desc: `Multiple locations around the Anaheim Resort Area.` - Description of the departure location. 
+ departureTime: `Buses operate from 1 hour prior to \n Disneyland ® Park opening to 30 mins after Park closing` - Contains details about the departure time, along with the mode of transport for the duration of the activity.

## activityDesc
+ desc: `These 1, 3 or 5-day tickets give you access to an hop-on, hop-off service with comfortable, eco-friendly buses that run on 22 scheduled routes in Anaheim and Orange County. All of the routes begin and end at the Disneyland® Resort Transportation Center, and serve over 60 hotels and dozens of popular destinations for dining, shopping, and playing!Service operates 7 days a week and typically begins one hour before the Disneyland® Resort opens, continuing through 30 minutes after close. Travelers can also plan their trips on-the-go with the mobile phone. Once in destination, it is possible to download a handy app to ensure they have all the information they need at hand.Tickets will be conveniently delivered to your hotel, so please be sure to enter the hotel info during the booking process. Then once in Anaheim, simply find the appropriate line, make your way to the closest stop to board the bus and begin your Anaheim vacation!Below is a sample of places you will be able to visit using these tickets: • Anaheim Brewery • Anaheim Garden Walk  • Anaheim Packing District  • Angel Stadium  • Bowers Museum  • Discovery Cube  • Disneyland® Resort  • Downtown Anaheim  • Honda Center  • Knott's Berry Farm  • MainPlace Mall  • Medieval Times  • Pirates Dinner Adventure  • South Coast Plaza` - Description about the activity. 

## schedule
+ schedule (scheduleResults) - Contains the schedule for the activity. The type of schedule may vary per activity and per supplier. The schedule of an activity is always returned in a free text format, which includes the timing and the activity frequency.

## scheduleResults 
+ freeText (array [freeTextResp], fixed-type) - Contains the schedule of the activity in free text format. 

## freeTextResp
+ timing: `Valid from the time of first use, for the consecutive days selected.` - Contains the activity timing. 
+ frequency: `See Availability` - Contains the frequency of the activity. 
    
## displayInfo
+ displayInfos (array [display], fixed-type) - Contains information about the activity that can be used for displayed on the User Interface (UI).

## vouchers 
+ voucher (voucherInfo) - Contains information about the voucher that is provided for the activity. 

## voucherInfo 
+ type: `Evoucher` (enum) - Type of voucher. 
    + Evoucher 
    + IdOnly 
    + PaperOnly 
+ desc: `You can present either a paper or an electronic voucher for this activity.` - Description of the voucher. 

## availableOn
+ availableOn: `2019-06-13T00:00:00` (array) - Contains the list of dates, when the activity is available. Format:YYYY-MM-DDTHH:MM:SS 

## paxTypeInfo
+ paxTypeInfo (array[paxDetails]) - Contains the list of eligibility criteria for the traveler for the activity. This information helps the traveler to decide whether they are eligible to book the activity or not. 

## paxDetails 
+ type: `Adult` (enum) - Type of traveler
    + Adult
    + Child
    + Infant
    + Senior
    + Youth
+ minAge: 10 (number) - Minimum allowable age of traveler to book the activity. 
+ maxAge: 99 (number) - Maximum allowable age of traveler to book the activity. 
+ minQty: 0 (number) - Minimum number of travelers allowed to book the activity. 
+ maxQty: 9 (number) - Maximum number of travelers allowed to book the activity. 
+ treatAsAdult: true (boolean) - Indicates whether the traveler type `Child`, `Infant`, `Senior`, and `Youth` can be considered as an `Adult` for this activity. 

## initiateActivityOptionsRequest
+ include activityIdOptions
+ include sessionIdReq
+ include currencyRQ
+ include activityDate
+ include passengerActivityDetails 

## activityIdOptions
+ activityId: `59521P1` (string,required) - Unique activity ID that identifies a specific activity for which you want to retrieve the list of available activity options. You must set the value for this field to the activity ID returned in the Get Activity Details Result API response.

## activityDate 
+ activityDate : `{date|YYYY-MM-DD|30}` (string, required) - Date for which the traveler wants to book the activity for. You must set the value for this field to one of the available dates for the activity returned within the `/activity[]/availableOn` array in the Get Activity Details Result API response. Format:YYYY-MM-DD

## passengerActivityDetails
+ passengerDetails (array [passengerDetails], required, fixed-type) - Contains the list of information about the travelers, based on which you want to retrieve the list of activity options. Consider a scenario where you want to retrieve the list of activity options for 3 travellers, 2 Adults and 1 Child. In this scenario, you must provide two objects in the `passengerDetails` array, one object which provides the count and traveler information for both the `Adult` travelers and another object which provides the count and traveler information for the `Child` traveler.

## passengerDetails
+ count: 1 (number, required) - Number of travelers of a specific `type`. Note that the count set for a specific traveler `type` must be between the `paxTypeInfo[]/minQty` and the `paxTypeInfo[]/maxQty` returned within the Get Activity Details Result API response.
+ ages :`20` (array [number], fixed-type) - Age of travelers of a specific `type`. For example, if the `count` field value is set to `2` for traveler type `Adult`, then you must provide the age of two adult travelers in the `ages` array. Note that the `ages` set for a specific traveler `type` must be between the `paxTypeInfo[]/minAge` and the `paxTypeInfo[]/maxAge` returned within the Get Activity Details Result API response. 
+ type: `Adult` (enum, required) - Type of traveler. 
    + Adult 
    + Child
    + Infant
    + Senior 
    + Youth

## initiateActivityOptionsResponse
+ include activityOptionsRS
+ include sessionRS

## activityOptionsRS
+ activityId: `59521P1` (string) - Unique activity ID that identifies a specific activity for which you want to retrieve the list of available options. You must use this `activityId` as an identifier for the activity in subsequent API calls at a later point in time. 

## optionsStatusRequest
+ include sessionIdOptReq
+ include activityIdStatReq

## sessionIdOptReq
+ sessionId: `d29e0c56-54fb-4e1a-974a-7362635bb135` (string, required) - Unique ID for the current session. You must obtain the `sessionId` for your current session from the `Initiate Search for Activity Options` API response. The session ID is valid for 60 minutes from the time it is generated.

## activityIdStatReq
+ activityId: `59521P1` (string,required) - Unique activity ID that identifies a specific activity for which you want to retrieve the list of available options. You must set the value for this field to the activity ID returned in the `Initiate Search for Activity Options` API response. 

## optionsStatusResponse
+ status: `Completed` (enum) - Current status of the activity options search request.
    + Completed 
    + Faulted
    + InProgress
+ resultCount: `10` (number) - Total number of activity options that were available in the result set at the time when the status request is made.
+ errors (array [errorsInfo], fixed-type) - Contains the list of errors that occur during the activity options search. For example, if an error occurs when the engine validates the currency provided in the request with the currency that is set in the account configuration, the `errors` array lists the appropriate error message.

## errorsInfo
+ code: 5 (string) - Code for the error. 
+ message: `Invalid request. Verify the request format and then try again.` - Error message text. 

## optionsresultsRequest
+ include sessionIdDetailsReq
+ include activityIdStatReq
+ include currencyRQ
+ include customerInfoOptionsRQ

## sessionIdDetailsReq
+ sessionId: `d29e0c56-54fb-4e1a-974a-7362635bb135` (string, required) - Unique ID for the current session. You must obtain the `sessionId` for your current session from the `Initiate Search for Activity Options` API response. The session ID is valid for 60 minutes from the time it is generated.

## customerInfoOptionsRQ
+ customerInfo (customerResults) - Contains information about the customer.
 Notes:
  + If you do not provide this field, the API returns the reward options based on the available point balance provided in the Initiate Activity Search, or the Initiate a Stand-Alone Activity Search APIs request. 
  + If you provide this field, the API returns the reward options based on the available point balance provided in the `Get Activity Options Search Results` API request.

## optionsresultsResponse
+ include sessionRS
+ include activitiesOptionsRS

## activitiesOptionsRS
+ activity (activityOptions) - Contains information about the activity, along with its content attributes, such as activity name, images, policies, reviews, and rating. The activity-related content attributes are obtained from the supplier.

## activityOptions 
+ include activityIdRS
+ include activityName
+ include activitySupplier
+ include activityCategory
+ include activityContentOptions
+ include bookingQuestions
+ include fareType
+ include allPaxRequired
+ include options

## activityContentOptions
+ content (contentOptionsResults) - Contains information about the activity, including its content attributes, such as the activity summary, rating, location, reviews, images, and policies. The activity-related content attributes are obtained from the supplier.

## contentOptionsResults
+ include mediaDetails 
+ include locationResults
+ include summary
+ include activityDesc
+ include duration 
+ include schedule
+ include notes 
+ include inclusions 
+ include exclusions
+ include displayInfo
+ include vouchers
+ include policies
+ include reviews
+ include rating 
+ include maxPassengerCount
+ include offers

## allPaxRequired
+ allPaxRequired: true (boolean) - If the `allPaxRequired` field returns `true`, then the information for all the travelers is required within the `/bookingInfo/passengers` array of the Initiate Booking API request. If `allPaxRequired` field returns `false`, then the traveler information for atleast one `Adult` traveler is required within the `/bookingInfo/passengers` array in the `Initiate Booking` API request. For more information on how the `allPaxRequired` field value affects the `Initiate Booking` API request, see the scenarios provided in the `/bookingInfo/passengers` array in the `Initiate Booking` API request. 

## options 
+ options (array [optionsResp], fixed-type) - Contains the list of available options for the activity and their details, such as the option name, description, the fare for the activity option, available purchase options, and the applicable cancellation policy. 

## optionsResp
+ include optionId 
+ include optionName 
+ include optionDesc 
+ include optionRate
+ include cancellationPolicyOptions

## optionId
+ id: `TG1` - Unique ID for the option provided by the supplier. 

## optionName
+ name: `1-Day Ticket` - Name of the option. 

## optionDesc
+ desc: `1-Day Ticket` - Description of the option. 

## optionRate
+ rate (rateInfo) - Contains information about the rate for the activity option, such as the rate ID, the fare (including fees, taxes, markup one, and discounts), and the available reward options. Note that the rate for an activity option may vary if the activity date and the traveler details, specified in the Initiate Options Search API request, are changed.

## rateInfo
+ include rateId
+ include fareType
+ include isRefundable
+ include currencyDSOptFare
+ include displayFareOptions
+ include purchaseOptionsOptionsRS

## rateId
+ id: `NjEwZWM2NDctYTA1Zi00M2JmLWI2MmMtNGE4ZTY4OGJhYTZlLUFDTlhUJDQ2M3w1OTUyMVAxfFRHMXxmZjkzNzhkNy0wMDNhLTQ0N2MtODJlMi1lYjMzYmU2MmJhM2Q=` - Unique ID for the rate. 

## displayFareOptions
+ displayFare (displayOps) - Contains information about the fare, along with the various breakup components that make up the fare for the activity. This fare is displayed to the customer on the User Interface (UI). 
 
## currencyDSOptFare
+ currency: `USD` (string) - 3-character ISO code that indicates the currency in which monetary amounts are returned in the response. The API calculates the amount equivalents and returns the amounts in the currency specified. For example, if the `currency` field value is set to `USD`, then the `baseFare`, `discount`, `taxes`, and other monetary amounts are returned in their `USD` amount equivalents. We support all ISO currencies If you want to configure multiple currencies, please contact cxLoyalty Business Team.

## displayOps
+ include totalFare
+ include breakupOps

## breakupOps
+ breakUp (breakupOpsInfo) - Contains information about various breakup components that make up the `displayFare/totalFare`.

## breakupOpsInfo
+ baseFare: `4.40` - Contains the base fare for the activity. 
Note:The `baseFare` amount does not include the discount, taxes, fees, markup one, or any other additional cost. Format: Decimal
+ include taxesOptions
+ include feesOptions
+ include discountsOptions
+ include markupsOptions

## totalFare
+ totalFare: `5.59` (number) - Contains the fare for the activity after considering the `breakup/baseFare`, `breakup/taxes`, `breakup/fees`, `breakup/discounts`, and `breakup/markups` amounts. Format: Decimal

## cancellationPolicyOptions
+ cancellationPolicy (Penalties) - Contains the information about the cancellation policy and the list of applicable cancellation penalties, including information such as the window determining the penalty period and the penalties incurred for the cancellation. 

## Penalties 
+ text: `Cancellations received within three (3) days of activity date will be subject to a supplier cancellation fee equal to the total activity cost. Theater tickets, theme-park passes, and select sightseeing tours are completely non-refundable once booked. No shows are non-refundable.Please refer to the Terms and Conditions for more information.` - Textual description of the cancellation policy. If this information is not provided by the supplier, then this field is returned as an empty array.
+ penaltyRules (array [penaltyInfo], fixed-type) - Contains the list of information related to the penalty, such as the start and end window and the penalty value. If this information is not provided by the supplier, then this field is returned as an empty array.
+ window (windowInfo) - Window during which the penalty is applicable.

## penaltyInfo
+ value: 100.0 (number) - If the cancellation is made within the given cancellation window, this field indicates the value of the penalty for the cancellation. For example, if this field returns `100` and the `valueType` field returns `Percent`, this means that a `100%` cancellation fee is applicable. Consider another scenario where the penalty of $100 is levied for the cancellation. In this case, the `value` field returns `100` and the `valueType` field returns `Fixed`. Format: Decimal
+ valueType: `Percent` (enum) - Indicates the type of penalty value. The penalty can either be a fixed amount or a percentage of the total fare of the activity. For example, if the `value` field returns `100` and the `valueType` field returns `Percent`, this means that the cancellation penalty calculated is `100%` of the total fare. Consider another scenario where a penalty of $100 is levied for the cancellation. In this case, the `value` field returns `100` and the `valueType` field returns `Fixed`. This means that the cancellation penalty of `$100` is deducted from the total fare.
    + Fixed 
    + Percent
+ estimatedValue: `2.79` (number) - Approximate cancellation penalty amount calculated based on the value returned in the `value` and the `valueType` fields. For example, if the `valueType` field returns `Percent` and the `value` field returns `50`, then the estimateValue for cancellation penalty is calculated to be 50% of the total fare. Consider another scenario where the `value` field returns `100` and the `valueType` field returns `Fixed`, then the `estimatedValue` for cancellation penalty is `$100`. Format: Decimal
 

## windowInfo
+ start: `2019-06-13T00:00:00` - Start date and time for the window. Format: YYYY-MM-DDTHH:MM:SS 
+ end: `2019-06-15T00:00:00` - End date and time for the window. Format: YYYY-MM-DDTHH:MM:SS 
            
<!-- Activity Cart Specific structure-->

## CreateCartWithAnItemRQActivity
+ include programIdActivity
+ include currencyCartRQActivity
+ include pointsCurrencyReq
+ include itemCreateCartAddItemtRQActivity
+ include customerInfo

## programIdActivity
+ programId: `docs` (string, required) - Unique ID for the loyalty program. Each loyalty program can be associated with various rewards. You must set the same `programId` that you provided in the Initiate Activity Search or the Initiate a Stand-Alone Activity Search APIs request. 

## currencyCartRQActivity
+ currency: `USD` (string, required) - 3-character ISO code that indicates the currency in which you want to retrieve the monetary amounts for the cart. The API calculates the amount equivalents and returns the amounts in the currency specified. For example, if the `currency` field value is set to `USD`, then all the monetary amounts are returned in their `USD` amount equivalents. We support all ISO currencies If you want to configure multiple currencies, please contact cxLoyalty Business Team. Consider a scenario where you set the `currency` field value to `USD` and the supplier's currency is in `AUD`. The API calculates the `AUD` to `USD` amount equivalents and displays monetary amounts in `USD`. Note: If the amount is returned in a currency different from the currency specified in the request, then the `currency` for that amount field is returned separately. For example, the currency for `/chargePrice/amount` is returned in the `/chargePrice/currency` field.

## pointsCurrencyReq
+ pointsCurrency: `points` - Indicates the currency that is associated with the loyalty program. For example, points and miles. You can obtain this information from the `rate/purchaseOption/pointsCurrency` field returned within the `/activity/options` array in the Get Activity Options Search Results API response. 
Notes: 
  + The `points` field value is represented by this currency. 
  + If you provide the `points` field in the `/item/paymentOptions` array, then the `pointsCurrency` field must be provided in the request. 

## itemCreateCartAddItemtRQActivity
+ item (itemCreateCartAddItemtDetailsRQActivity, required) - Contains information about the item (activity option) for which you want to obtain the latest price.

## itemCreateCartAddItemtDetailsRQActivity
+ include productIdAddToCartActivity
+ include productTypeAddToCartActivity
+ include quotedFareAddToCartActivity
+ include paymentOptionsRQActivity
+ include reportingFieldsActivity
+ include stateBagRSActivity

## productTypeAddToCartActivity
+ productType: `Activity` (string, required) - Text

## productIdAddToCartActivity
+ productId: `aa0123aa-12z3-1234-8f12-1236374qwz1` (string, required) - Unique ID for the product for which you want to obtain the latest price. The `productId` must map with the one of the rate IDs (rate/id field) returned within the `/activity/options` array in the Get Activity Options Search Results API response.

## quotedFareAddToCartActivity
+ quotedPrice (quotedFareObjectActivity) - Contains information about the fare for the activity. This is the activity fare returned in the Get Activity Options Search Results API response. 
  Notes:
    + The `quotedPrice` is an optional field. You can obtain the `quotedPrice` from the `/rate/displayFare/totalFare` field returned within the `options` array in the Get Activity Options Search Results API response.
    + If you want to know whether the price of the item (activity option) has changed, you must provide the `quotedPrice` in the request. If there is any change in the price after the search results are retrieved, an error message along with the latest price is returned. In this case, you must use the latest fare amount returned in the response and call the `Get Price Using Cart` API again.

## quotedFareObjectActivity
+ amount: 258.03 (number, required) - Total fare of the activity after considering the `baseFare`, `discount`, `taxes`, `fees`, `markups`, and any other additional cost. Format: Decimal

## amountWithoutTaxInfo
+ amountWithoutTax: 227.57 (number, required) - Total fare of the activity after considering the `baseFare`, `discount`, `fees`, `markups`, and any other additional cost. The `amountWithoutTax` does not include the taxes. Format: Decimal 

## paymentOptionsRQActivity
+ paymentOptions (array[paymentOptionsObjectActivity], required) - Contains the list of reward options that you want to avail to pay for the activity. 
 Notes: 
  + In case of activity bookings, you can only provide one reward option within the `/paymentOptions` array.
  + Depending on the selected reward option, you must provide either the amount in cash, points, or a combination of both the amount in cash and points within the `/paymentOptions` array.
  + If you provide this field, then you must provide the `/customerInfo` field in the request. 
  + If you do not provide this field, then the `pointsCurrency` and the `points` fields are not returned in the response. 

## paymentOptionsObjectActivity
+ rewardId: `5256|5` (string, required) - Unique ID for the reward that is availed to pay for the activity. The `rewardId` must map with one of the IDs returned within the `purchaseOption/rewards` array in the  Get Activity Options Search Results API response.
+ amount: 258.03 (number) - Cash component of the activity fare that the customer must pay to book the activity. You can obtain this information from the `rewards[]/recommendation/cash` field returned within the `rate/purchaseOption` object in the Get Activity Options Search Results API response. Format: Decimal
+ points: 10000 (number) - Number of points that the customer must redeem to book the activity. You can obtain this information from the `rewards[]/recommendation/points` field returned within the `rate/purchaseOption` object in the Get Activity Options Search Results API response. 
Notes: 
  + If the payment option selected by the customer for the activity option is to pay by points or by a combination of cash and points, then you must provide the `pointsCurrency` field. 
  + If the payment option selected by the customer for the activity option is to pay by cash, then do not provide the `points` field in the request. In case you provide the `points` field, then you must set the `points` field value to `0` and provide the `pointsCurrency` field in the request. Format: Decimal

## reportingFieldsActivity
+ reportingFields (reportingFieldsListActivity) - Contains the fields that can be used for any business-related purposes, such as to pass the booking token for reporting purpose. Note that you can only pass up to five custom fields. If you want to configure a custom field, please contact cxLoyalty Business Team.

## customerInfo
+ customerInfo (customerInfoDetails) - Contains information about the customer. Note: If you provide the `/item/paymentOptions` array, then you must provide this field in the request.

## customerInfoDetails
+ id: `autoUser` (string, required) - Unique ID for the customer.
+ transitCode: `cdf16c64-71f2-4c49-b162-68cfaa7aa86f` (string, required) - Unique code that is generated by the transit service. The transit code is used to track all the calls made to different systems within cxLoyalty for all search to booking-related transactions for a single user session. The transit code is valid for `72 hours` from the time it is generated.
+ availablePointBalance: 90000.0 (number, required) - Number of loyalty points available in the customer's credit card account. Format: Decimal

## CreateCartWithAnItemRSActivity
+ include cartidRSActivity
+ include currencyRSActivity
+ include pointsCurrencyResp
+ include itemsRSActivity
+ include priceResp
+ include chargeFareRSActivity
+ include createdAtUtcRSActivity
+ include updatedAtUtcRSActivity

## cartidRSActivity
+ id: `0f8fad5b-d9cb-461f-a165-70867728951z` (string) - Unique ID for the cart that contains the item for which you want to obtain the latest price. You must use this cart id as an identifier in subsequent API calls at a later point in time. For example, you must provide this `id` in the Initiate Booking API request.

## currencyRSActivity
+ currency: `USD` (string) - 3-character ISO code that indicates the currency in which the monetary amounts are returned for the cart. The API calculates the amount equivalents and returns the amounts in the currency specified. For example, if the `currency` field value is `USD`, then all the monetary amounts are returned in their `USD` amount equivalents. We support all ISO currencies If you want to configure multiple currencies, please contact cxLoyalty Business Team. Note: If the amount is returned in a currency different from the currency specified in the request, then the `currency` for that amount field is returned separately. For example, the currency for `/chargePrice/amount` is returned in the `/chargePrice/currency` field.

## pointsCurrencyResp
+ pointsCurrency: `points` - Indicates the currency that is associated with the loyalty program. For example, points and miles. 
Notes: 
  + The `points` field value is represented by this currency. 
  + If you do not provide the `/item/paymentOptions[]/points` field in the request, then this field is not returned in the response. 

## itemsRSActivity
+ items (array[itemDetailsRSActivity]) - Contains the list of the items in the cart.

## itemDetailsRSActivity
+ include itemIdRSActivity
+ include productIdRSActivity
+ include productTypeRSActivity
+ include fareCartActivity
+ include sellingPriceActivity
+ include productDetailsLinkActivity
+ include stateBagRSActivity

## stateBagRSActivity
+ statebag (stateBagInfo) - For internal use only. 

## itemIdRSActivity
+ id: `sdea34-d9cb-461f-a165-7086772w324` (string) - Unique ID that is assigned to identify the item (activity option) within the cart. 

## productIdRSActivity
+ productId: `aa0123aa-12z3-1234-8f12-1236374qwz1` (string) - Unique ID for the product for which you want to obtain the latest price. 

## productTypeRSActivity
+ productType: `Activity` (string) - Type of product.

## fareCartActivity
+ costPrice (fareDetailsRSActivity) - Contains information about the latest fare for the activity. Format: Decimal

## fareDetailsRSActivity
+ amount: 258.03 (number) - Total fare of the activity after considering the `baseFare`, `discount`, `taxes`, `fees`, `markups`, and any other additional cost. Format: Decimal
+ amountWithoutTax: 227.57 (number) - Total fare of the activity after considering the `baseFare`, `discount`, `fees`, `markups`, and any other additional cost. The `amountWithoutTax` does not include the taxes. Format: Decimal  

## sellingPriceActivity
+ sellingPrice (sellingPriceRSActivity) - Contains information about the activity fare that the customer must pay in either cash, points, or a combination of both cash and points after considering the selected payment options. 

## sellingPriceRSActivity
+ amount: 248.03 (number) - Cash amount that the customer must pay to book the activity. The `amount` field value is the sum total of the amount returned in the `/breakup/paymentOptions[]/amount` field.  Format: Decimal
+ points: 10000 (number) - Number of points that the customer must redeem to book the activity. The `points` field value is the sum total of the points returned in the `/breakup/paymentOptions[]/points` field. 
Notes:
  +  The value in the `points` field is represented by the currency returned in the `pointsCurrency` field.
  +  If the `/item/paymentOptions[]/points` field is not provided in the request, then this field is not returned in the response. Format: Decimal
+ breakUp (breakupSellingPrice) - Contains information about the selected payment option availed to pay for the activity. 

## breakupSellingPrice
+ include paymentOptionsRSActivity

## dependsOnActivity
+ dependsOn (dependsOnDetailsRSActivity) - Contains information about item on which the add on is dependent. Note:If there is no add-on associated with this item, this field is not returned in the API response. 


## dependsOnDetailsRSActivity
+ itemRefId: (nullable) - Unique ID for the item on which the add on is dependent.

## isAvailableActivity
+ isAvailable: true (boolean) - Indicates whether the rate of the requested item is available with the supplier. Note that if the `isAvailable` field returns `false`, you must not go ahead with the Checkout API call. In this scenario, you must initiate the search again and then call the `Get Price Using Cart` API.

## paymentOptionsRSActivity
+ paymentOptions (array[paymentOptionsObjectActivityRS]) - Contains the list of reward options that are availed to pay for the activity.

## paymentOptionsObjectActivityRS
+ id: `63h6u-d4sb-2asf-a165-q2w123sa` - Unique ID for the selected payment option.
+ rewardId: `5256|5` (string) - Unique ID for the reward that is availed to pay for the activity. 
+ amount: 0.0 (number) - Cash component of the activity fare that the customer must pay to book the activity. Format: Decimal
+ points: 1000 (number) - Number of points that the customer must redeem to book the activity. 
Notes:
  +  The value in the `points` field is represented by the currency returned in the `pointsCurrency` field.
  +  If the `/item/paymentOptions[]/points` field is not provided in the request, then this field is not returned in the response. Format: Decimal Format: Decimal

## productDetailsLinkActivity
+ productDetailsLink: `http://www.example.com/detail/123` (string) - URL to view the latest fare details of the selected activity option and the activity information, such as activity description, images, reviews, ratings, and policies. The `productDetailsLink` is valid for `60` minutes from the time the activity search is initiated.  To retrieve the activity information and latest fare details, you must make a GET call on the `productDetailsLink` by using the `Get Product Details` API. 

## priceResp
+ price (priceDetailsActivity) - Contains information about the cart total. Depending on the selected payment option, the cart total is returned in either cash, points, or a combination of cash and points in the `price` object. Note: In this scenario, where the cart contains a single item (activity option), the cart total is equivalent to the selling price of the single item (activity option).

## priceDetailsActivity
+ amount: 248.03 (number) - Cash component of the cart total in the `/currency` set in the request. Note: In this scenario, where the cart contains a single item (activity option), this amount is same as the amount returned in the `sellingPrice/amount` field. Format: Decimal
+ points: 10000.0 (number) - Number of points that the customer must redeem to pay the cart total. The value in the `points` field is represented currency returned in the `pointsCurrency` field. Note: In this scenario, where the cart contains a single item (activity option), the value in the `points` field is same as the value returned in the `sellingPrice/points` field. Format: Decimal

## chargeFareRSActivity
+ chargePrice (chargeFareDetailsActivity) - Contains information about the cart total charged to the customer at the time of check out. Depending on the selected payment option, the cart total is returned in either cash, points, or a combination of cash and points in the `chargePrice` object. Note: In this scenario, where the cart contains a single item (activity option), the cart total is equivalent to the selling price of the single item (activity option).

## chargeFareDetailsActivity
+ currency: `CAD` (string) - 3-character ISO code that indicates the currency in which the cart total is charged to the customer. The API calculates the amount equivalents and returns the amount in the currency specified. For example, if the `/currency` field value returns `USD` and the `chargePrice/currency` field returns `CAD`, then the `chargePrice` amount is returned in `CAD` amount equivalents. We support all ISO currencies If you want to configure multiple currencies, please contact cxLoyalty Business Team.
+ amount: 311.20 (number) - Cash component of the cart total that is charged to the customer in the `/chargePrice/currency`. Format: Decimal
+ points: 10000.0 (number) - Number of points that the customer must redeem to pay the cart total charged to the customer. The value in the `points` field is represented by the currency returned in the `pointsCurrency` field. Format: Decimal

## createdAtUtcRSActivity
+ createdAtUtc: `2020-05-21T06:35:10Z` (string) - Date and time when the cart is created. Format: YYYY-MM-DDTHH:MM:SSZ

## updatedAtUtcRSActivity
+ updatedAtUtc: `2020-05-22T06:35:10Z` (string) - Date and time when the cart is updated. Format: YYYY-MM-DDTHH:MM:SSZ

## getFetchPriceResponse
+ include sessionRS
+ include activityPriceDetails 

## activityPriceDetails 
+ activity (activityPriceInfo) - Contains information about the activity, along with its content attributes, such as activity name, images, policies, reviews, and rating. The activity-related content attributes are obtained from the supplier.

## activityPriceInfo
+ include activityIdRS
+ include activitySupplier
+ include activityName
+ include activityContentOptions
+ include vouchers
+ include policies
+ include bookingRequirements
+ include optionsPrice

## bookingRequirements 
+ bookingRequirements (ReqInfo) - Contains information about the booking requirements, such as the booking questions that the customer must answer at the time of booking and the list of credit cards that can be used to pay for the booking. 

## ReqInfo
+ include bookingQuestions
+ include allPaxRequired
+ include allowedCreditCards

## allowedCreditCards
+ allowedCreditCards: `VI`, `MC`, `AX` (array) - Contains the list of credit card types that are accepted at the time of booking.

## optionsPrice
+ option (optionsPriceDetails) - Contains information about the selected activity option, along with the details of the option, such as the option name, description, the fare for the activity option, available purchase options, and the applicable cancellation policy. 

## optionsPriceDetails
+ include optionId
+ include optionName
+ include optionDesc
+ include ratePrice
+ include cancellationPolicyOptions 

## ratePrice 
+ rate (ratePriceInfo) - Contains information about the rate for the activity option, such as the rate ID, the fare (including fees, taxes, markup one, and discounts), and the available reward options. Note that the rate for an activity option is associated with the requested activity date.

## ratePriceInfo
+ include rateId
+ include fareType
+ include isRefundable
+ include currencyDSFarePrice
+ include displayFareOptions
+ include purchaseOptionsOptionsRS

## currencyDSFarePrice
+ currency: `USD` - 3-character ISO code that indicates the currency in which monetary amounts are returned in the response. The API calculates the amount equivalents and returns the amounts in the currency specified. For example, if the `currency` field value is set to `USD`, then the `baseFare`, `discount`, `taxes`, and other monetary amounts are returned in their `USD` amount equivalents. We support all ISO currencies If you want to configure multiple currencies, please contact cxLoyalty Business Team.

## initiateBookCartRequest
+ idempotencyToken: `123-456-789` (string, required) - Token ID that represents a unique booking request. You must assign a new token ID for every booking request.  Both the `idempotencyToken` and `cartId` field values are used to decide if the same booking request is reattempted. Consider the following scenarios for the `idempotencyToken` field usage: 
Scenario 1: 
Consider a scenario where you want to check out a cart. You pass a new, unique value for the `idempotencyToken` field in the booking request. In this scenario, the request is considered as a new booking request and the API returns a new and unique `orderID`. 
Scenario 2: 
Consider a scenario where you want to check out the same cart again and you pass the same `idempotencyToken` field value that was used in the earlier booking request. In this scenario, the booking request is considered as a duplicate, regardless of whether the booking request contains new booking field values or the same booking field values as of the previous booking request. The API returns the same `orderID` that was returned for the previous booking request and not a new `orderID`. If you want to reattempt the booking, you must provide a new and unique value for the `idempotencyToken` field for the same cart.
+ items (array [itemBookInfo], required, fixed-type) - Contains the list of the items in the cart that you want to book. 
+ customer (customerBookInfo, required) - Contains information about the customer.
+ purchaseId: `123453` (string, required) - Unique ID for the booking. You must provide this ID to track all the booking-related transactions across different systems within cxLoyalty. The `purchaseId` is required when you contact the cxLoyalty Customer Service. 
+ agent (agentInfo, required) - Contains information about the agent.
+ formOfPayment (formOfPaymentInfo) - Contains information about the credit card that is used to pay for the activity booking. This credit card information is used to pay the `cash/amount` specified within the `paymentOptions` array.
 Notes: 
  + If the `/cash/paymentMode` field within the `/items[]/bookingInfo/paymentOptions` array is set to `Card`, then you must provide the `/formOfPayment` field.
  + If the `/cash/paymentMode` field within the `/items[]/bookingInfo/paymentOptions` array is set to `Cash`, then you must not provide the `/formOfPayment` field.
+ statebag (stateBagInfo) - For internal use only.
+ reportingFields (reportingFieldsListActivity) - Contains the fields that can be used for any business-related purposes, such as to pass the booking token for reporting purpose. Note that you can only pass up to five custom fields. If you want to configure a custom field, please contact cxLoyalty Business Team.

## itemBookInfo
+ id: `1e817cd6-85ba-451d-9553-dee99e04eeec` (string, required) - Unique ID for the item (activity option) that you want to book. You must obtain this `id` from the `/items[]/id` field returned in the `Get Price Using Cart` API response. 
+ bookingInfo (bookCartInfo, required) - Contains information about the booking details which includes the selected payment options, the traveler or passenger information, and the contact information of the person who is making the booking.
+ statebag (stateBagInfo) - For internal use only. 
+ include reportingFieldsBook

## bookCartInfo
+ passengers (array [passengerInfo], required, fixed-type) - Contains the list of information of travelers for whom the customer wants to book the activity option. 
If the `allPaxRequired` field in the Get Activity Options Search Results API response returned `true`, the information for all the travelers is required within the `passengers` array of the `Initiate Booking` API request, which includes the traveler's type, name, and age. If you do not provide the required information, the booking fails. Note that the `age` field is mandatory for the child traveler and optional for the adult traveler. If the `allPaxRequired` field returns `false`, then the traveler information must be provided for atleast one `Adult` traveler or for a traveler who belongs to a traveler type for which `treatAsAdult` field is returned `true` in the Get Activity Details Result API response. 
The sample scenarios for the implementation of the `passengers` array are provided below. 
Scenario 1: 
Consider a scenario where you want to book an activity for two travelers, one adult and one child.
If the `allPaxRequired` field returned `true`: 
In this case, two objects must be provided in the `passengers` array, one object for the adult traveler and another object for the child traveler. For the adult traveler, you must provide the traveler's `type` and `name`. The traveler's `age` is optional for an adult. For the child traveler, you must provide the traveler `type`, `name`, and `age`. 
If the `allPaxRequired` field returns `false` and `treatAsAdult` field is `true` for traveler type `Child`: 
In this case, only one object for either `Adult` or `Child` traveler must be provided in the `passengers` array. You must provide the traveler's `type` and `name`. The traveler's `age` is optional for an adult.  
Note that in the JSON sample, we have provided the details of the child traveler as `treatAsAdult` field is `true` for traveler type `Child`. 
Scenario 2: 
Consider a scenario where you want to book an activity for two travelers, both adults. 
If the `allPaxRequired` field returned `true`: 
In this case, two objects must be provided in the `passengers` array, one object for each adult. For both adults, you must provide the traveler's `type` and `name`. The traveler's age is optional for adults. 
If the `allPaxRequired` field returned `false`: 
In this case, only one object for an adult traveler must be provided in the `passengers` array. You must provide the traveler `type` and `name` for adult. The traveler's `age` is optional for adults. 
+ bookingContact (bookingContactInfo, required) - Contains the name, contact information, nationality, and date of birth of the person who is making the booking. Note: The person who is making the booking must be an `Adult` traveler or must belong to a traveler `type` for which `treatAsAdult` field is returned `true` in the  Get Activity Details Result API response.
+ paymentOptions (array [paymentOptionsBook], required, fixed-type) - Contains the list of reward options that you want to avail to pay for the activity.  
 Notes: 
  + You must provide either the payment option returned within the `/items[]/paymentOptions` array in the Get Price Using Cart API response or one of the payment options returned within the `purchaseOption/rewards` array in the Get Product Details API response.
  + In case of activity bookings, you must provide `only` one reward option within the `/paymentOptions` array.
  + Depending on the selected reward option, you must provide either the amount in cash, points, or a combination of both the amount in cash and points within the `/paymentOptions` array.
+ specialRequest: `Please arrange a wheelchair` - Contains information about any special requests that is made, with respect to the activity, at the time of booking. 
+ questionAnswers (array [questionAnsInfo], fixed-type) - Contains the list of optional and mandatory questions for the customer to answer, at the time of booking.  You must obtain the list of questions from the `bookingQuestions` array. To know whether the question is mandatory or not, see the `isMandatory` field returned within the `bookingQuestions` array in the Get Activity Options Search Results or the Get Product Details APIs response 
Note: If the `bookingQuestions` array does not contain any mandatory questions, then the `questionAnswers` array is an optional field in the API request. 
+ include reportingFields


## paymentOptionsBook
+ rewardId: `5256|5` (string, required) - Unique ID for the reward that is availed to pay for the activity.
+ cash (cashBookReq) - Contains information about the amount in cash that the customer must pay to book the activity.
+ points (pointsBookReq) - Contains information about the number of points that the customer must redeem to book the activity. If you provide the `points` field, then you must provide the `value` field and the `unit` field in the request.

## cashBookReq
+ amount: 0.00 (number, required) - Cash component of the actual fare that the customer must pay to book the activity. Format: Decimal
+ paymentMode: `Card` (enum, required) - Indicates the mode of payment for the `cash/amount`. Notes: If this field is set to `Card`, then you must provide the credit card information in the `/formOfPayment` field.  If this field is set to `Cash`, then you must not provide the `/formOfPayment` field.  
  + Cash
  + Card

## pointsBookReq
+ value: 1000.0 (number, required) - Number of points that the customer must redeem to book the activity. Format: Decimal
+ unit: `points` (string, required) - Indicates the currency that is associated with the loyalty program. For example, points and miles. 

## passengerName
+ name (namePassenger) - Contains information about the name of the traveler. Note: If the `allPaxRequired` field returns `true` in the Get Product Details API response, then you must provide the `first` name and the `last` name of the traveler.

## passengerInfo
+ include passengerType 
+ include passengerName
+ include agePassenger

## passengerType
+ type: `Adult` (enum, required) - Type of traveler.
    + Adult
    + Child
    + Infant
    + Senior
    + Youth

## namePassenger
+ first: `John` (string, required) - First name.
+ last: `Doe` (string, required) - Last name.
+ middle: `Jerry` - Middle name.
+ title: `Mr` (enum) - Title before the name. 
  + Mr
  + Madam
  + Master
  + Miss
  + Mrs
  + Ms
  + Mx
+ suffix: `Jr` - Suffix that follows the name.

## agePassenger
+ `age`: 35 (number) - Age of traveler. The age must be provided for a child traveler. A traveler's age must be between the minimum (minAge field) and maximum (maxAge field) age that is specified for the activity in the  Get Activity Details Result API response. 

## bookingContactInfo
+ include nameBookContact 
+ include ageBookingContact 
+ include contactInfoBookContact

## nameBookContact 
+ name (namePassenger, required) - Contains information about the name of the person who is making the booking.

## ageBookingContact
+ age: 35 (number) - Age of the person who is making the booking. 

## contactInfoBookContact
+ contactInfo (contactDetails, required) - Contains the contact information of the person who is making the booking.

## contactDetails 
+ phone (phoneBookContact, required) - Contains the contact number of the person who is making the booking. 
+ address (addressBookContact) - Contains information about the address of the person who is making the booking.
+ email: `abc@xyz.com` (string, required) - Email address (recipient ID) that must be used when any email communication needs to be made with the person who is making the booking.

## phoneBookContact
+ type: `Work` (enum, required) - Type of phone number or contact number. If you do not provide the phone `type`, this field is set to `Unknown`.
  + Fax
  + Home
  + Mobile
  + Work
  + Unknown
+ number: `555-0173` (string, required) - Phone number. 
Note: The phone number must not include the country code, area code, or the extension number. You can provide the country code in the `countryCode` field, the area code in the `areaCode` field, and the extension number in the `ext` field. 
+ countryCode: `1` - Country code for the phone number.
+ ext: `123` - Extension number where the contact can be reached.
+ areaCode: 200 - Area code for the phone number.

## addressBookContact
+ line1: `3077 ACME Street` (string, required) - Street number and street name.
+ line2: `Landmark: Beside the ACME Shopping Mall` (string) - Additional information related to the address, such as landmark, apartment, suite, unit, and building information.
+ cityName: `San Francisco` (string, required) - Name of the city.
+ state (stateBookContact) - Contains information about the state. 
+ countryCode: `US` (string, required) - 2-character ISO code of the country.
+ postalCode: `94133` (string)- Postal code. In various countries, postal code is also known as postcode, post code, Eircode, PIN Code, or ZIP Code. 

## stateBookContact
+ code: `CA` - 2-character state code.
+ name: `California` - Name of the state.

## questionAnsInfo 
+ questionId: 19 (string) - Unique ID for the question. You must obtain the `questionId` from the `bookingQuestion[]/id` field returned in the Get Options Search Results or the Get Product Details APIs response. 
+ answer: `Yes` (string) - Response to the question. 

## agentInfo
+ id: `agent1` (string, required) - Unique ID for the agent. 

## customerBookInfo
+ include customerName
+ include phone
+ include alternatePhone
+ include address
+ include emailCustomer
+ include reportingFields 
+ include customerIdRQ
+ include transitCode
+ include availablePointBalance

## customerName
+ name (custName, required) - Contains information about the name of the customer.

## custName
+ title (enum) - Title before the name.
  + Mr
  + Madam
  + Master
  + Miss
  + Mrs
  + Ms
  + Mx
+ first: `John` (string, required) - First name.
+ middle: `Alex` - Middle name.
+ last: `Smith` (string, required) - Last name.
+ suffix: `Jr` - Suffix that follows the name. 

## phone
+ phone (phoneBookInfo, required) - Contains the contact number of the customer. 

## alternatePhone
+ alternatePhone (phoneBookInfo) - Contains the alternate contact number of the customer.

## phoneBookInfo
+ type: `Unknown` (enum) - Type of phone number or contact number. If you do not provide the phone `type`, this field is set to `Unknown`.
  + Fax
  + Home
  + Mobile
  + Work
  + Unknown
+ number: `555-0173` (string, required) - Phone number. 
Notes:
    + The phone number can include the area code, if applicable.
    + The phone number must not include the country code. You can provide the country code in the `countryCode` field.
+ countryCode: `1` - Country code for the phone number.

## address
+ address (addressCustomer) - Contains information about the address of the customer. 

## addressCustomer
+ line1: `3077 ACME Street` (string, required) - Street number and street name. 
+ line2: `Landmark: Beside the ACME Shopping Mall` (string) - Additional information related to the address, such as landmark, apartment, suite, unit, and building information.
+ cityName: `San Francisco` (string, required) - Name of the city.
+ state (stateBook) - Contains information about the state. 
+ countryCode: `US` (string, required) - Country code for the phone number.
+ postalCode: `94133` (string, required)- Postal code. In various countries, postal code is also known as postcode, post code, Eircode, PIN Code, or ZIP Code.

## emailCustomer
+ email: `abc@xyz.com` (string, required) - Email address (recipient ID) that must be used when any email communication needs to be made with the customer.

## stateBook
+ code: `CA` (string, required) - 2-character state code.
+ name: `California` (string) - Name of the state.

## formOfPaymentInfo
+ card (cardInfo) - Contains information about the credit card that is used make the payment for the booking.

## cardInfo
+ number: `5555555555554444` (string, required) - Credit card number used for the payment. Note that the credit card number must be at least 12 digits.
+ holderName: `John Doe` (string, required) - Name on the credit card that is used for the payment.
+ cvv: `123` (string, required) - Three or four-digit card verification value (CVV) or card security code (CSC). 
+ issuedBy: `VI` (enum, required) - Card issuer. Note that the card issuer set in the `issuedBy` field must match with one of the allowed credit card issuers returned in the `/activity/bookingRequirements/allowedCreditCards` array in the Get Product Details API response.
  + VI
  + CA
  + AX
  + DS
  + TO 
  + DC
  + S
  + JC
  + BC
  + T
  + R 
  + E
+ expiry (expiryInfo, required) - Contains the credit card expiration details. Note that the expiration date of the credit card must be later than or equal to the current month and of the current year. 
+ contactInfo (cardcontactInfo, required) - Contains the contact information for the cardholder. The contact information provided for the cardholder must be the same as the billing contact information that is on the record of the credit card issuing bank.

## expiryInfo
+ month: 12 (number, required) - Expiration month of the credit card. Note that the value of `month` must be between `1` and `12`.
+ year: 2023 (number, required) - Expiration year of the credit card.

## cardcontactInfo
+ email: `abc@xyz.com` (string, required) - Email address (recipient ID) that must be used when any email communication needs to be made with the cardholder. 
+ billingAddress (addressCustomer, required) - Contains information about the billing address of the cardholder.
+ phone (phoneBookInfo) - Contains the contact number of the cardholder.

## reportingFields
+ reportingFields (reportingFieldsListActivity) - Contains the fields that can be used for any business-related purposes, such as to pass the booking token for reporting purpose. Note that you can only pass up to five custom fields. If you want to configure a custom field, please contact cxLoyalty Business Team.

## reportingFieldsListActivity
+ field1: `Value1` - Indicates the value for custom field 1.
+ field2: `Value2` - Indicates the value for custom field 2.
+ field3: `Value3` - Indicates the value for custom field 3.
+ field4: `Value4` - Indicates the value for custom field 4.
+ field5: `Value5` - Indicates the value for custom field 5.

## reportingFieldsBook
+ reportingFields (reportingFieldsListBook, required) - Contains the fields that can be used for any business-related purposes, such as to pass the booking token for reporting purpose. Note that you can only pass up to five custom fields. If you want to configure a custom field, please contact cxLoyalty Business Team.

## reportingFieldsListBook
+ field1: `{dateTime|YYYY/MM/DD HH:mm|30 64800}` (string, required) - Contains a unique booking reference ID for the activity booking that is provided to the supplier for booking reconcillation. Note that you must provide a unique reference ID for each booking.  
+ field2: `Value2` - Indicates the value for custom field 2.
+ field3: `Value3` - Indicates the value for custom field 3.
+ field4: `Value4` - Indicates the value for custom field 4.
+ field5: `Value5` - Indicates the value for custom field 5.


## initiateBookCartResponse
+ orderId: `123-456-789` - Unique ID for the order. You must use the `orderId` as an identifier in other API calls at a later point in time. For example, you need the `orderId` when you check the booking status using the `Get Booking Status` API.

## bookStatusRequest
+ orderId: `123-456-789` (string, required) - Unique ID for the order for which you want to check the status. You must obtain the `orderId` from the `Initiate Booking` API response.

## bookStatusResponse
+ orderId: `123-456-789` - Unique ID for the order for which the status is checked. 
+ status: `InProgress` (enum) - Indicates the status of the order. If the `status` field returns `CompletedWithFailure` or Failed, see the `errors[]`, `/items[]/status`, and `/items[]/errors[]/message` fields for more information.
  + Completed
  + CompletedWithFailure
  + Failed
  + InProgress
+ items (array [itemsInfo], fixed-type) - Contains the list of items that are booked. 
+ errors (array [errorsBookStatus], fixed-type) - Contains the list of errors that occur during the booking process. For example, if the  booking fails, the `errors` array lists the appropriate error message.
+ warnings (array [warningsBookStatus], fixed-type) - Contains the list of warnings that appear during the booking process.
+ statebag (stateBagInfo) - For internal use only. 

## itemsInfo
+ id: `1e817cd6-85ba-451d-9553-dee99e04eeec` - Unique ID for the item (activity option) that is booked. 
+ include bookingId
+ status: `InProgress` (enum) - Indicates the status of the booking. If the `status` field returns `Failed` or `NotAttempted`, see the `/items[]/errors[]/message` field for more information.
  + Confirmed
  + InProgress
  + Failed
  + NotAttempted
+ productDetailsLink: `http://www.example-product.com/detail` - URL to view the activity booking details. To retrieve the booking details, you must make a GET call on the `productDetailsLink` by using the `Get Booking Details` API. 
+ statebag (stateBagInfo) - For internal use only.
+ errors (array [errorsBookStatus], fixed-type) - Contains the list of errors that have occurred during the booking process. For example, if the  booking fails, the errors array lists the appropriate error message.
+ warnings (array [warningsBookStatus], fixed-type) - Contains the list of warnings that appear during the booking process.

## bookingId
+ bookingId: `1gxyupie4-12z3-1234-8f12-1236374qwz1` - Unique ID for the booking. You must use the `bookingId` as an identifier for the booking in other API calls at a later point in time. For example, you will need the `bookingId` when you want to retrieve the booking details (by using the `Get Booking Details` API). Note: The ORXe API generates the `bookingId`. This ID is not shared with the supplier, which means that the `bookingId` cannot be used as a confirmation number for the booking.

## errorsBookStatus
+ code: `14` - Code for the error.
+ message: `The supplier server is unreachable. Try again after some time.` - Error message text.

## warningsBookStatus
+ code: `4313` - Code for the warning.
+ message: `The supplier server is unreachable. Try again after some time.` - Warning message text.

## retrieveBookResponse
+ include statusRetrieve 
+ include sessionRS
+ include createdOn 
+ include lastUpdatedOn 
+ include bookingId
+ include searchRequest
+ include activityRetrieve
+ include bookingInfoRetrieve
+ include formOfPaymentRetrieve
+ include confirmationDetails
+ include cancellationDetails

## statusRetrieve 
+ status: `Confirmed` (enum) - Indicates the status of the booking.
    + Canceled
    + Confirmed
    + Failed 
    + NotAttempted
    + NotCanceled

## createdOn 
+ createdOn: `2020-03-21T06:35:10.864Z` - Date and time when the booking is made. Format:YYYY-MM-DDTHH:MM:SSZ

## lastUpdatedOn 
+ lastUpdatedOn: `2020-03-21T06:35:10.864Z` - Date and time when the booking is last updated. Format:YYYY-MM-DDTHH:MM:SSZ

## searchRequest
+ searchRequest (searchReqInfo) - Contains information about the search criteria that were provided in the Initiate Activity Search or the Initiate Stand-alone Activity Search API request.

## searchReqInfo
+ include currencyRQ
+ include searchQueryRS 
+ include customerInfoRS 
+ include programIDRS
 
## searchQueryRS
+ searchQuery (searchQueryInfo) - Contains the list of search criteria that is used to search for activities. The `searchQuery` object contains the information about the geo region and the date range within which the customer wants to search for activities.
 Notes 
  + Depending on the type of search radial search or stand-alone activity search that you perform, the information returned within the `searchQuery` object is different.
  + If you performed a radial activity search, then the `searchQuery/bounds` object contains the geographic coordinates of the center point and the radius within which the search for activities is requested.
  + If you performed a stand-alone activity search, then the `searchQuery` object contains the activity ID and the date range between which the search for the activity is requested.

## searchQueryInfo
+ passengerDetails (array [passengerDetailsRS], fixed-type) - Contains the list of information about the travelers based on which you want to retrieve the list of activity options.  Consider a scenario where you retrieved activity options for three travellers, 2 Adults and 1 Child. In this scenario, the `passengerDetails` array contains two objects,one object which returns the count and traveler information for both the `Adult` travelers and another object which returns the count and traveler information for the `Child` traveler.
+ dateRange (dateRangeRS) - Contains the range of date between which the customer wants to search for activities. 
+ activityDate: `{date|YYYY-MM-DD|30}` - Date that the traveler wants book the activity for. Format:YYYY-MM-DD
+ filters (filterRS) - Contains filters to narrow down the activity search results. The search results include only those activities that match all the filter criteria specified. Note that all the content related to an activity, such as the activity cancellation policies, location, address, and contact information are obtained from the supplier.
+ bounds (boundInfoRS) - Contains information about the geo region where the customer wants to search for activites.

## passengerDetailsRS
+ count: 1 (number) - Number of travelers of a specfic `type`.
+ ages: 20 (array [number], fixed-type) - Age of travelers of a specific `type`. For example, if the `count` field value is set to `2` for traveler type `Adult`, `ages` array contains two values. 
+ type: `Adult` (enum) - Type of traveler.
    + Adult
    + Child
    + Infant
    + Senior
    + Youth

## dateRangeRS
+ from: `{date|YYYY-MM-DD|30}` - Start date from when the customer wants to search for activities. Format: YYYY-MM-DD
+ to: `{date|YYYY-MM-DD|30}` - End date up to when the customer wants to search for the activity. Format: YYYY-MM-DD

## filterRS
+ include activityNameFilter
+ include priceFilter
+ include categoryFilter
+ include tripAdvRatingFilter
+ include allowedCountry

## boundInfoRS
+ circle (circleRS) - Contains the geographic coordinates of the center point and the radius within which you want to search for activities.

## circleRS
+ center (centerRS) - Contains the latitude and longitude coordinates of the given point from which the radius is calculated to determine the area to search for activities. For example, if you want to search for activities within a 60.5 km radius from the Santa Monica Pier, the Santa Monica Pier is considered as your center.
+ radiusKm: `48.2802` - Distance, in kilometers, from the center point that you want to consider in the search area. The `radiusKm` value must be between `1` and `100`. For example, if you want to search within a 60.5 km radius from the Santa Monica Pier, then set the `radiusKm` field to 60.5.
 Format: Decimal

## centerRS 
+ lat: `33.93333` (number) - Latitude coordinate of the center point. The lat value must be between -90 and +90. For example, the lat value for Santa Monica Pier is 34.0103. Format: Decimal  
+ long: `-118.4` (number) - Longitude coordinate of the center point. The long value must be between -180 and +180.  For example, the long value for Santa Monica Pier is -118.4963. Format: Decimal

## customerInfoRS 
+ customerInfo (customerDetailsRS) - Contains information about the customer and the eligibility information of the customer for the loyalty program that the customer is associated with.

## customerDetailsRS
+ include customerIdRS
+ include pointBalanceRS
+ include transitCodeRS
+ include eligibilityInfoRS

## customerIdRS
+ id: `autoUser` (string) - Unique ID for the customer.

## pointBalanceRS
+ availablePointBalance: `90000.0` (number) - Number of loyalty points available in the customer's credit card account. Format: Decimal

## transitCodeRS
+ transitCode: `72e87c86-c240-45eb-8d96-b46c52e5618f` (string) - Unique code that is generated by the transit service. The transit code is used to track all the calls made to different systems within cxLoyalty for all search to booking-related transactions for a single user session. The transit code is valid for `72 hours` from the time it is generated.

## eligibilityInfoRS
+ eligibilityInfo (eligibilityRS) - For internal use only. 

## eligibilityRS
+ programCurrency: `Points` - For internal use only. 
+ purchaseAllowed: true (boolean) - For internal use only. 
+ redemptionAllowed: true (boolean) - For internal use only. 
+ displayProgramCurrencyAsDecimal: false (boolean) - For internal use only. 
+ useVariableMilesFormula: false (boolean) - For internal use only. 
+ shortfallAllowed: true (boolean) - For internal use only. 

## programIDRS
+ programId: `docs` - Unique ID for the loyalty program. Each loyalty program can be associated with various rewards. The `programId` is used to retrieve all the rewards mapped to it.

## activityRetrieve
+ activity (activityRet) - Contains information about the activity, along with its content attributes, such as activity name, images, policies, reviews, and rating. The activity-related content attributes are obtained from the supplier.

## activityRet 
+ include activityIdRS
+ include activityName
+ include activitySupplier
+ include vouchers
+ include policies
+ include bookingRequirements
+ include optionsPrice

## bookingInfoRetrieve
+ bookingInfo (bookCartRetrieve) - Contains information about the booking details which includes the selected payment options, the traveler information, and the contact information of the person who is made the booking.

## bookCartRetrieve
+ passengers (array [passengerInfoRS], fixed-type) - Contains the traveler information for whom the activity is booked. 
+ bookingContact (bookingContactInfoRS) - Contains the name and the contact information of the person who made the booking.
+ paymentOptions (array [paymentOptionsBookRS], fixed-type) - Contains the list of reward options that are availed to pay for the activity.
+ specialRequest: `Please arrange a wheelchair` - Contains information about any special requests that is made, with respect to the activity, at the time of booking.
+ questionAnswers (array [questionAnsInfoRS], fixed-type) - Contains the list of questions that are answered at the time of booking. 
+ include reportingFields

## paymentOptionsBookRS
+ rewardId: `5256|5` (string) - Unique ID for the reward that is availed to pay for the activity. 
+ cash (cashBookRS) - Contains information about the amount in cash that the customer must pay to book the activity.
+ points (pointsBookRS) - Number of points that the customer must redeem to book the activity.

## cashBookRS
+ amount: 0.00 (number) - Cash component of the actual fare that the customer must pay to book the activity. Format: Decimal
+ paymentMode: `Card` (enum) - Indicates the mode of payment for the `cash/amount`. Notes: If this field returns `Card`, then the credit card information is returned in the `/formOfPayment` object.  If this field is set to `Cash`, then the `/formOfPayment` object is not returned in the API response.  
  + Cash
  + Card

## pointsBookRS
+ value: 1000.0 (number) - Number of points that the customer must redeem to book the activity. Format: Decimal
+ unit: `points` (string) - Indicates the currency that is associated with the loyalty program. For example, points and miles. 

## passengerNameRS
+ name (namePassengerRS) - Contains information about the name of the traveler.

## passengerInfoRS
+ include passengerTypeRS
+ include passengerNameRS
+ include agePassengerRS

## passengerTypeRS
+ type: `Adult` (enum) - Type of traveler
    + Adult
    + Child
    + Infant
    + Senior
    + Youth

## namePassengerRS
+ first: `John` (string) - First name.
+ last: `Doe` (string) - Last name.
+ middle: `Jerry` - Middle name.
+ title: `Mr` (enum) - Title before the name.
  + Mr
  + Madam
  + Master
  + Miss
  + Mrs
  + Ms
  + Mx
+ suffix: `Jr` - Suffix that follows the name. 

## agePassengerRS
+ `age`: 35 (number) - Age of the traveler.

## bookingContactInfoRS
+ include nameBookContactRS
+ include ageBookingContactRS
+ include contactInfoBookContactRS

## nameBookContactRS
+ name (namePassengerRS) - Contains information about the name of the person who is making the booking.

## ageBookingContactRS
+ age: 35 (number) - Age of the person who is making the booking contact. 

## contactInfoBookContactRS
+ contactInfo (contactDetailsRS) - Contains the contact information of the person who is making the booking. 

## contactDetailsRS
+ phone (phoneBookContactRS) - Contains the contact number of the person who is making the booking.
+ address (addressBookContactRS) - Contains information about the address of the person who is making the booking. 
+ email: `abc@xyz.com` (string) - Email address (recipient ID) that must be used when any email communication needs to be made with the person who is making the booking.

## phoneBookContactRS
+ type: `Work` (enum) - Type of phone number or contact number
    + Home
    + Mobile
    + Work
    + Unknown
+ number: `555-0173` (string) - Phone number. 
Note: The phone number must not include the country code, area code, or the extension number. You can provide the country code in the `countryCode` field, the area code in the `areaCode` field, and the extension number in the `ext` field. 
+ countryCode: `1` - Country code for the phone number.
+ ext: `123` - Extension number where the contact can be reached.
+ areaCode: 200 - Area code for the phone number.

## addressBookContactRS
+ line1: `3077 ACME Street` - Street number and street name. 
+ line2: `Landmark: Beside the ACME Shopping Mall` (string) - Additional information related to the address, such as landmark, apartment, suite, unit, and building information.
+ cityName: `San Francisco` - Name of the city.
+ state (stateBookContactRS) - Contains information about the state.
+ countryCode: `US` (string) - Country code for the phone number.
+ postalCode: `94133` (string)- Postal code. In various countries, postal code is also known as postcode, post code, Eircode, PIN Code, or ZIP Code.

## stateBookContactRS
+ code: `CA` - 2-character state code.
+ name: `California` - Name of the state.

## questionAnsInfoRS
+ questionId: 1 (number) - Unique ID for the question.
+ answer: `Yes` (string) - Response to the question. 

## formOfPaymentRetrieve
+ formOfPayment (formOfPaymentInfoRS) - Contains information about the credit card that is used to pay for the activity booking. This credit card information is used to pay the `cash/amount` specified within the `paymentOptions` array.
 Notes: 
  + If the `/cash/paymentMode` field within the `/items[]/bookingInfo/paymentOptions` array is set to `Card`, then the `/formOfPayment` object is returned in the API response.
  + If the `/cash/paymentMode` field within the `/items[]/bookingInfo/paymentOptions` array is set to `Cash`, then the `/formOfPayment` object is not returned in the response.

## formOfPaymentInfoRS
+ type: `Card` (enum) - Indicates the type of payment that is used to make the booking. Notes: - If cxLoyalty is the Merchant of Record, the value returned in the `type` field is `Card` and the `/formOfPayment/card` object is returned in the API response.  - If cxLoyalty is not the Merchant of Record, the value returned in the `type` field is `Cash` and the `/formOfPayment/card` object is not returned in the API response. 
    + Card
    + Cash
+ card (cardInfoRS) - Contains information about the card that is used to make the payment for the booking. If the `/formOfPayment/type` field returns `cash`, the `card` object is not returned in the API response. Note: We currently support payment only using one card.

## cardInfoRS
+ number: `5555555555554444` (string) - Credit card number used for the payment. Note that the credit card number must be at least 12 digits.
+ holderName: `John Doe` (string) - Name on the credit card that is used for the payment.
+ cvv: `123` (string) - Three or four-digit card verification value (CVV) or card security code (CSC).
+ issuedBy: `VI` (enum) - Card issuer.
  + VI
  + CA
  + AX
  + DS
  + TO 
  + DC
  + S
  + JC
  + BC
  + T
  + R 
  + E
+ expiry (expiryInfoRS) - Contains the credit card expiration details.
+ contactInfo (cardcontactInfoRS) - Contains the contact information for the cardholder.

## expiryInfoRS
+ month: 12 (number) - Expiration month of the credit card.
+ year: 2023 (number) - Expiration year of the credit card.

## cardcontactInfoRS
+ email: `abc@xyz.com` (string) - Email address (recipient ID) that must be used when any email communication needs to be made with the cardholder. 
+ billingAddress (addressCustomer) - Contains information about the billing address of the cardholder.
+ phone (phoneBookInfoRS) - Contains the contact number of the cardholder.

## phoneBookInfoRS
+ type: `Unknown` (enum) - Type of phone number or contact number
  + Fax
  + Home
  + Mobile
  + Work
  + Unknown
+ number: `555-0173` (string) - Phone number. 
Notes:
    + The phone number can include the area code, if applicable.
    + The phone number must not include the country code. 
+ countryCode: `1` - Country code for the phone number.

## confirmationDetails
+ confirmationDetails (bookingDetailsInfo) - Contains the confirmation details of the activity booking. 

## cancellationDetails
+ cancellationDetails (cancellationDetailsRS) - Contains the cancellation details of the activity booking.

## bookingDetailsInfo
+ bookingTimestamp: `2018-03-21T06:35:10.864Z` - Date and time when the activity booking is completed. Format: YYYY-MM-DDTHH:MM:SSZ 
+ include supplierConfirmationNumber
+ cancellationToken:`268063245` - Cancellation token received from the supplier that is required to cancel the activity booking. Note that this information is supplier-specific, which means that some suppliers might provide a `cancellationToken` while some suppliers do not provide a `cancellationToken`.
+ errors (array [errorsBookings], fixed-type) - Contains the list of errors that occur during the booking process. For example, if the booking fails, the `errors` array lists the appropriate error message.
+ warnings (array [warningsBookings], fixed-type) - Contains the list of warnings that appear during the booking process. 

## cancellationDetailsRS
+ cancellationTimestamp: `2018-03-21T06:35:10.864Z` - Date and time when the activity booking is canceled. Format: YYYY-MM-DDTHH:MM:SSZ 
+ include supplierCancellationNumber
+ errors (array [errorsCancel], fixed-type) - Contains the list of errors that occur during the cancellation process. For example, if the  cancellation fails, the `errors` array lists the appropriate error message.
+ warnings (array [warningsCancel], fixed-type) - Contains the list of warnings that appear during the cancellation process.

## supplierConfirmationNumber
+ supplierConfirmationNumber: `2356` - Supplier confirmation number for the booking. 
Notes:
  + The `supplierConfirmationNumber` is required when you contact cxLoyalty Customer Service.
  + The `supplierConfirmationNumber` must be used as the confirmation number for the booking.

## supplierCancellationNumber
+ supplierCancellationNumber: `78558816` - Supplier cancellation number for the booking. 
Notes:
  + The `supplierCancellationNumber` is required when you contact cxLoyalty Customer Service.
  + The `supplierCancellationNumber` must be used as the cancellation number for the booking. 

## errorsBookings
+ code: `3434` - Code for the error.
+ message: `Error: Could not process the request due to network connectivity issues. Please try again.` - Error message text.

## warningsBookings
+ code: `4313` - Code for the warning. 
+ message: `Warning: Due to heavy traffic, the processing might take longer than expected.` - Warning message text.

## errorsCancel
+ code: `3434` - Code for the error.
+ message: `Error: Could not process the request due to network connectivity issues. Please try again.` - Error message text.

## warningsCancel
+ code: `4313` - Code for the warning.
+ message: `Warning: Due to heavy traffic, the processing might take longer than expected.` - Warning message text.

## searchByActivityNameResp
+ include activitiesList 

## activitiesList
+ activities (array [activitiesInfo], fixed-type) - Contains the list of activity names returned based on query string specified in the query parameter. For example, if you set the query parameter as `tour`, the API returns all the activity names that contain the query string `tour`. 
Notes: 
  + By default, the API returns the list of activity names in alphabetical order. 
  + If you provide an invalid `sessionId`, the `/activities` array is returned as an empty array. 
  + If the query string provided in the `query` parameter does not return any results, then the `/activities` array is returned as an empty array. 

## activitiesInfo 
+ id: `30724o4o8lmd` - For internal use only. 
+ name: `Tour of the Eiffel Tower Viewing Deck at Paris` - Name of the activity. 

## getFilterDataResp
+ include filtersData 

## filtersData 
+ filters (filtersInfo) - Contains the filter data for various filters. You can use this filter data to display filters on the search results page so that your customers can narrow down the search results to activities that best meet their requirements. 

## filtersInfo
+ activityNames (activityNamesFilter) - Contains the URL to retrieve the list of activity name suggestions from the search result set. 
+ price (activityPriceFilter) - Contains the filter data for the price filter. This filter data includes the `minPrice` and `maxPrice` value.
+ categories (activityCategoriesFilter) - Contains the filter data for the categories filter. This filter data includes the list of categories and the activity count for each category.
+ tripAdvisorRating (tripAdvisorRatingFilter) - Contains the filter data for the TripAdvisor rating filter. This filter data includes the list of TripAdvisor&reg; ratings and the activity count for each rating.

## activityNamesFilter
+ getUrl: `https://activity-loyalty.stage.cnxloyalty.com/activity/v1.0/filter-data/{sessionId}/activities?q={query}` - URL to retrieve the list of activity names from the search result set. The URL is valid for `60` minutes from the time the activity search is initiated. You can retrieve the list of activity name suggestions by calling the `Get Activity Name Suggestions` API.

## activityPriceFilter 
+ minPrice: 224.10 (number) - Fare of the lowest priced activity that is returned in the search result set. Format: Decimal  
+ maxPrice: 1797.02 (number) - Fare of the highest priced activity that is returned in the search result set. Format: Decimal 
+ currency: `USD` - 3-character ISO code that indicates the currency in which monetary amounts are returned in the response. The API calculates the amount equivalents and returns the amounts in the currency specified. For example, if the currency field value is set to USD, then the `minPrice` and `maxPrice` amounts are returned in their USD amount equivalents. We support all ISO currencies If you want to configure multiple currencies, then please contact cxLoyalty Business Team.

## activityCategoriesFilter 
+ items (array [itemCategoriesInfo], fixed-type) - Contains the list of categories-related filter data. 

## itemCategoriesInfo 
+ name: `Outdoor Activities` (string) - Name of the activity category.
+ value: `9`(string) - Category ID.
+ count: 25 (number) - Count of activities that belong to category returned in the `categories/items[]/name` field. 
+ include minPriceCategories

## minPriceCategories
+ minPrice: 500.00 (number) - Fare of the lowest priced activity from the list of activities that belong to the category returned in the `categories/items[]/name` field. Format: Decimal

## tripAdvisorRatingFilter 
+ items (array [itemtripAdvisorRatingInfo], fixed-type) - Contains the list of TripAdvisor rating filter data. 

## itemtripAdvisorRatingInfo 
+ name: `5` (string) - Name of the TripAdvisor&reg; rating.
+ value: `5`(string) - Value for the TripAdvisor&reg; rating.
+ count: 30 (number) - Count of activities whose TripAdvisor&reg; rating is equal to the TripAdvisor&reg; rating returned in the `tripAdvisorRating/items[]/value` field. Note: If the `tripAdvisorRating/items[]/value` field returns `5`, then the `count` field includes activities whose TripAdvisor® rating is between 5.0 and 5.9.
+ include minPriceTripAdvisorRating

## minPriceTripAdvisorRating
+ minPrice: 500.00 (number) - Fare of the lowest priced activity from the list of activities whose TripAdvisor&reg; rating is equal to or higher than the rating returned in the `tripAdvisorRating/items[]/value` field. Format: Decimal












































































































































































































































































































































































































































































































































































<!---Order API-->

## createOrderRequest
+ include sessionIdOrderReq
+ include cartIdOrderReq 
+ include purchaseIdOrderReq
+ include searchTypeOrderReq
+ include searchRequestOrderReq 
+ include activityOrderReq 
+ include bookingInfoOrderReq 
+ include paymentMethodsOrderReq
+ include confirmationDetailsOrderReq 
+ include cancellationDetailsOrderReq
+ include reportingFieldOrderReq 
+ include customerOrderReq

## sessionIdOrderReq 
+ sessionId: `0f8fad5b-d9cb-461f-a165-70867728951z` (string) - Unique acknowledgement token that indicates that the request has been received and the processing has been initiated. Note: As an ORXe API consumer, you must use the same `sessionId` that is passed at the time of booking (search to book). The session ID is valid for 60 minutes from the time it is generated. 

## cartIdOrderReq
+ cartId: `0f8fad5b-d9cb-461f-a165-70867728951z` (string) -  Unique ID for the cart that contains the item (activity option) that the customer wants to book. Note: If you do not provide this field, then the `cartId` field is not returned in the API response.

## purchaseIdOrderReq
+ purchaseId: `0fad5b-d9cb-461f-a165-70861z` (string) - Purchase ID used to retrieve the details of the item purchased by the customer. Note: If you do not provide this field, then the `purchaseId` field is not returned in the API response.

## searchTypeOrderReq
+ detailsSearchType: `Stateful` (enum) - Type of activity search. Depending on the type of search, the `searchQuery` object specified is different. Note: If you do not provide this field, then the `detailsSearchType` field is not returned in the API response. 
  + Stateful 
  + Stateless 

## searchRequestOrderReq
+ searchRequest (searchRequestInfoOrderReq, required) - Contains information about the search criteria that were provided in the Initiate Activity Search or the Initiate a Stand-Alone Activity Search  API request at time of search.

## searchRequestInfoOrderReq
+ include currencyOrderReq 
+ include searchQueryOrderReq 
+ include customerInfoOrderReq 
+ include programIdOrderReq 

## currencyOrderReq
+ currency: `USD` (string) - 3-character ISO code that indicates the currency that was specified in the search request.  
Note: If you do not provide this field, the `currency` field is not returned in the API response.

## searchQueryOrderReq
+ searchQuery (searchQueryStatelessOrderReq) - Contains the list of search criteria that is used to search for activities. The `searchQuery` object contains the information about the geo region, the date range within which the customer wants to search for activities, passenger details, and the activity date. 
Notes: 
  + If specified at the time of order creation, the `searchQuery` object provided can be different depending on the type of search performed. For better understanding, see the JSON samples for the following search use cases: statefulorderreq and statelessorderreq.
  + If you do not provide this field, then the `searchQuery` object is not returned in the API response.

## searchQueryStatelessOrderReq
+ passengerDetails (array [passengerDetailsOrderReq], fixed-type) - Contains the list of information about the travelers based on which you want to retrieve the list of activity options. Note: If you do not provide this field, then the `passengerDetails` array is not returned in the API response.
+ dateRange (dateRangeInfoOrderReq) - Contains the range of date between which the customer wants to search for activities. Note: If you do not provide this field, then the `dateRange` object is not returned in the API response. 
+ activityDate: `{dateTime|YYYY-MM-DDTHH:mm:ss|30 0}` (string) - Date that the traveler wants book the activity for. Note: If you do not provide this field, then the `activityDate` field is set to `0001-01-01T00:00:00`. Format: YYYY-MM-DD or YYYY-MM-DDTHH:MM:SS
+ activityId: `59521P1` (string) - Unique activity ID that identifies a specific activity for which you want to retrieve the activity details. You must specify the `activityId` in case of stateless activity search. Note: If you do not provide this field, then the `activityId` field is not returned in the API response.  
+ filters (filterOrderReq) - Contains filters to narrow down the activity search results. 
Notes: 
  + This field is applicable only in case of stateful activity search. 
  + If you do not provide this field in case of stateful activity search, then the `filters` object is not returned in the API response.
+ bounds (boundsInfoOrderReq) -  Contains information about the geo region where the customer wants to search for activites. 
Notes: 
  + This field is applicable only in case of stateful activity search. 
  + If you do not provide this field in case of stateful activity search, then the `bounds` object is not returned in the API response.

## passengerDetailsOrderReq
+ count: 1 (number) - Number of travelers of a specific `type`. Note: If you do not provide this field, then the `count` field value is set to `0`.
+ ages :`20` (array [number], fixed-type) - Age of travelers of a specific `type`. For example, if the `count` field value is set to `2` for traveler type `Adult`, then you must provide the age of two adult travelers in the `ages` array. Note: If you do not provide this field, then the `ages` array is not returned in the API response.
+ type: `Adult` (enum) - Type of traveler. Note: If you do not provide this field, then the `type` field is not returned in the API response. 
    + Adult 
    + Child
    + Infant
    + Senior 
    + Youth
    + Unknown

## dateRangeInfoOrderReq
+ from: `{date|YYYY-MM-DD|30}` (string) - Start date from when the customer wants to search for activities. Note: If you do not provide this field, then the `from` field is set to `0001-01-01T00:00:00`. Format: YYYY-MM-DD or YYYY-MM-DDTHH:MM:SS
+ to: `{date|YYYY-MM-DD|30}` (string) - End date up to when the customer wants to search for the activity. Note: If you do not provide this field, then the `to` field is set to `0001-01-01T00:00:00`. Format: YYYY-MM-DD or YYYY-MM-DDTHH:MM:SS

## boundsInfoOrderReq
+ circle (centerInfoOrderReq) - Contains the geographic coordinates of the center point and the radius within which you want to search for activities. Note: If you do not provide this field, then the `circle` object is not returned in the API response.

## centerInfoOrderReq
+ center (object) - Contains the latitude and longitude coordinates of the given point from which the radius is calculated to determine the area to search for activities. For example, if you want to search for activities within a 60.5 km radius from the Santa Monica Pier, the Santa Monica Pier is considered as your center. Note: If you do not provide this field, then the `center` object is not returned in the API response.
    + lat: `34.0103` (number) - Latitude coordinate of the center point. The `lat` value must be between -90 and +90. For example, the `lat` value for Santa Monica Pier is 34.0103. Note: If you do not provide this field, then the `lat` field value is set to `0`. Format: Decimal  
    + long: `-118.4963` (number) - Longitude coordinate of the center point. The `long` value must be between -180 and +180.  For example, the `long` value for Santa Monica Pier is -118.4963. Note: If you do not provide this field, then the `long` field value is set to `0`. Format: Decimal
+ radiusKm: `60.5` (number) - Distance, in kilometers, from the center point that you want to consider in the search area. The `radiusKm` value must be between `1` and `100`. For example, if you want to search within a 60.5-km radius from the Santa Monica Pier, then set the `radiusKm` field to 60.5. Note: If you do not provide this field, then the `radiusKm` field value is set to `0`. Format: Decimal

## filterOrderReq
+ include activityNameFilterOrderReq
+ include priceFilterOrderReq
+ include categoryFilterOrderReq
+ include tripAdvRatingFilterOrderReq
+ include allowedCountryOrderReq

## activityNameFilterOrderReq
+ activityNames: `Virtual Guided Cultural Tour of Los Angeles`, `Gambling Built the Sunset Strip Walking Audio Tour by VoiceMap`, `Crazy Dash Walking Adventure of Ontario, CA`, `Wacky Walk Adventure Game - Anaheim, CA`, `Operation City Quest Scavenger Hunt - Los Angeles, CA` (array) - Include only those activities whose activity name is same as specified in this field.

## priceFilterOrderReq
+ price (priceFilterInfoOrderReq) - Include only those activities whose rate is equal to or higher than the rate specified in the `minPrice` field and equal to or less than the rate specified in the `maxPrice` field. The `price` filter allows users to see only those activities that are within the specified price range.

## priceFilterInfoOrderReq
+ minPrice: 20.00 (number) - Include only those activities whose rate is equal to or higher than the rate specified in this field. Format: Decimal
+ maxPrice: 1000.00 (number) - Include only those activities whose  rate is equal to or lower than the rate specified in this field. Format: Decimal

## categoryFilterOrderReq
+ categories: `9`, `12`, `16`, `4` (array) - Include only those activities that belong to the categories specified in this field.  You must provide the IDs of the categories that are supported by the `categories` filter.  

## tripAdvRatingFilterOrderReq
+ tripAdvisorRating: `1`,`2`, `3`, `4`, `5` (array) - Include only those activities whose TripAdvisor&reg; rating is equal to the TripAdvisor&reg; rating specified in this field. 

## allowedCountryOrderReq
+ allowedCountry: `US` (string) - Include only those activities that belong to the country character ISO country code specified in this field. This filter is used when the specified radial search region spreads across different countries and you want to restrict the results to only one specific country. Consider a scenario where the georegion provided in the search criteria is located close to a country's borderline and the radius spans two countries, such as `France` and `Belgium`. In this scenario, if you want to restrict the results to `France`, you must set the `allowedCountry` field value to `FR`.

## customerInfoOrderReq
+ customerInfo (customerDetailsOrderReq) - Contains information about the customer and the eligibility information of the customer for the loyalty program that the customer is associated with. Note: If you do not provide this field, then the `customerInfo` field is not returned in the API response. 

## customerDetailsOrderReq
+ include customerIdOrderReq
+ include pointBalanceOrderReq
+ include transitCodeOrderReq
+ include eligibilityInfoOrderReq

## customerIdOrderReq
+ id: `autoUser` (string) -  Unique ID for the customer. Note: If you do not provide this field, then the `id` field is not returned in the API response. 

## pointBalanceOrderReq
+ availablePointBalance: `90000.0` (number) - Number of loyalty points available in the customer's credit card account. Note: If you do not provide this field, then the `availablePointBalance` field value is set to `0`. Format: Decimal

## transitCodeOrderReq 
+ transitCode: `72e87c86-c240-45eb-8d96-b46c52e5618f` (string) - Unique code that is generated by the transit service. The transit code is used to track all the calls made to different systems within cxLoyalty for all search to booking-related transactions for a single user session. The transit code is valid for `72 hours` from the time it is generated. Note: If you do not provide this field, then the `transitCode` field is not returned in the API response. 

## eligibilityInfoOrderReq
+ eligibilityInfo (eligibilityOrderReq) - For internal use only.

## eligibilityOrderReq
+ programCurrency: `Points` (string) - For internal use only.
+ purchaseAllowed: true (boolean) - For internal use only.
+ redemptionAllowed: true (boolean) - For internal use only.
+ displayProgramCurrencyAsDecimal: false (boolean) - For internal use only.
+ useVariableMilesFormula: false (boolean) - For internal use only.
+ shortfallAllowed: true (boolean) - For internal use only.

## programIdOrderReq
+ programId: `docs` (string) - Unique ID for the loyalty program. Each loyalty program can be associated with various rewards. The `programId` is used to retrieve all the rewards mapped to it. Note: If you do not provide this field, the `programId` field is not returned in the API response.

## activityOrderReq
+ activity (activityInfoOrderReq, required) - Contains information about the  activity, along with its content attributes, such as activity name, images, policies, reviews, and rating. 
Note: If you provide the `activity` object, then you must provide the activity name and the activity option in the request.

## activityInfoOrderReq
+ include activityIdOrderReq
+ include supplierIdOrderReq
+ include supplierAccountIdOrderReq
+ include activityNameOrderReq
+ include activityCategoryOrderReq
+ include activityContentOrderReq
+ include voucherDetailsOrderReq 
+ include policiesDetailsOrderReq
+ include bookingRequirementsOrderReq
+ include activityOptionOrderReq

## activityIdOrderReq
+ id: `59521P1` (string) - Unique activity ID that identifies a specific activity. Note: If you do not provide this field, then the `id` field is not returned in the API response.

## supplierIdOrderReq
+ supplierId: `3awhj4i7z7k` (string) - Unique ID for the supplier of this activity. Note: If you do not provide this field, then the `supplierId` field is not returned in the API response.  

## supplierAccountIdOrderReq
+ supplierAccountId: `36br8t9byf4` (string) - Unique account ID for the supplier of this activity. Note: If you do not provide this field, then the `supplierAccountId` field is not returned in the API response. 

## activityNameOrderReq
+ name: `Anaheim Resort Area Multi-Day Transportation Tickets` (string, required) - Name of the activity.

## activityCategoryOrderReq
+ categories (array [categoryOrderReq], fixed-type) - Contains the list of categories to which the activity belongs.   Note: If you do not provide this field, then the `categories` array is not returned in the API response.

## categoryOrderReq
+ id: `20` (string) - Unqiue ID for the category. Note: If you do not provide this field, then the `id` field is not returned in the API response. 
+ name: `Multi-day & Extended Tours` (string) - Name of the category. Note: If you do not provide this field, then the `name` field is not returned in the API response. 

## activityContentOrderReq
+ content (contentOrderReq) - Contains information about the activity, including its content attributes, such as the activity summary, rating, location, reviews, images, and policies. Note: If you do not provide this field, then the `content` object is not returned in the API response.

## contentOrderReq
+ include mediaOrderReq 
+ include locationOrderReq
+ include summaryOrderReq
+ include activityDescOrderReq
+ include durationOrderReq 
+ include scheduleOrderReq
+ include notesOrderReq 
+ include inclusionsOrderReq 
+ include exclusionsOrderReq
+ include displayInfoOrderReq
+ include vouchersOrderReq
+ include policiesOrderReq
+ include reviewsOrderReq
+ include reviewCountOrderReq
+ include ratingOrderReq
+ include maxPassengerCountOrderReq
+ include offersOrderReq

## mediaOrderReq 
+ media (mediaInfoOrderReq) - Contains the media information related to the activity, such as primary image, images, thumbnails, and captions. Note: If you do not provide this field, then the `media` object is not returned in the API response. 

## mediaInfoOrderReq
+ primaryImage (primaryImageOrderReq) - Contains information about the primary image for the activity. Note: If you do not provide this field, then the `primaryImage` object is not returned in the API response.  
+ images (array [imagesOrderReq], fixed-type) - Contains the list of full-size images for the activity. Note: If you do not provide this field, then the `images` array is not returned in the API response.  

## primaryImageOrderReq
+ url: `https://hare-media-cdn.tripadvisor.com/media/attractions-splice-spp-674x446/06/71/c3/b5.jpg` (string) - The content delivery network (CDN) URL for the full-size image. Note: If you do not provide this field, then the `url` field is not returned in the API response. 
+ thumbnailUrl: `https://hare-media-cdn.tripadvisor.com/media/attractions-splice-spp-154x109/06/71/c3/b5.jpg` (string) - The content delivery network (CDN) URL for the thumbnail image. Note: If you do not provide this field, then the `thumbnailUrl` field is not returned in the API response. 
+ caption: `Anaheim Resort Area Multi-Day Transportation Tickets` (string) - Description of the full-size image. The caption can be used to display text alongside the image or to display text while the image is loading. Note: If you do not provide this field, then the `caption` field is not returned in the API response. 

## imagesOrderReq
+ url: `https://hare-media-cdn.tripadvisor.com/media/attractions-splice-spp-674x446/06/71/c3/b5.jpg` (string) -  The content delivery network (CDN) URL for the full-size image. Note: If you do not provide this field, then the `url` field is not returned in the API response. 
+ thumbnailUrl: `https://hare-media-cdn.tripadvisor.com/media/attractions-splice-spp-154x109/06/71/c3/b5.jpg` (string) - The content delivery network (CDN) URL for the thumbnail image. Note: If you do not provide this field, then the `thumbnailUrl` field is not returned in the API response. 
+ caption: `Anaheim Resort Area Multi-Day Transportation Tickets` (string) - Description of the full-size image. The caption can be used to display text alongside the image or to display text while the image is loading. Note: If you do not provide this field, then the `caption` field is not returned in the API response. 

## locationOrderReq
+ location (locationInfoOrderReq) - Contains the location of the activity. Note: If you do not provide this field, then the `location` object is not returned in the API response.  

## locationInfoOrderReq 
+ include geoCodeLocationOrderReq
+ include addressActivityOrderReq
+ include departureInfoOrderReq
+ include returnInfoOrderReq

## geoCodeLocationOrderReq
+ geoCode (geoCodeInfoOrderReq) - Contains the geographic coordinates of the activity location. Note: If you do not provide this field, then the `geoCode` object is not returned in the API response.  

## geoCodeInfoOrderReq
+ lat: 33.859013 (number) - Latitude coordinate of the activity location. Note: If you do not provide this field, then the `lat` field value is set to `0`. 
+ long: `-117.9778750001` (number) - Longitude coordinate of the activity location. Note: If you do not provide this field, then the `long` field value is set to `0`.

## addressActivityOrderReq
+ address (addressActivityInfoOrderReq) - Contains information about the address of the location where the activity is conducted. Note: If you do not provide this field, then the `address` object is not returned in the API response. 

## addressActivityInfoOrderReq
+ line1: `3077 ACME Street` (string) - Street number and street name.
+ line2: `Landmark: Beside the ACME Shopping Mall` (string) - Additional information related to the address, such as landmark, apartment, suite, unit, and building information. 
+ include cityOrderReq
+ include stateOrderReq
+ include countryCodeOrderReq
+ postalCode: `94133` (string) - Postal code. In various countries, postal code is also known as postcode, post code, Eircode, PIN Code, or ZIP Code.

## departureInfoOrderReq
+ departurePoint (departureDetailsOrderReq) - Contains information about the departure location, where the customer must reach to board the transport for the activity. Note: If you do not provide this field, then the `departurePoint` object is not returned in the API response.  

## departureDetailsOrderReq
+ desc: `Multiple locations around the Anaheim Resort Area.` (string) - Description of the departure location. 
+ departureTime: `Buses operate from 1 hour prior to \n Disneyland ® Park opening to 30 mins after Park closing` (string) - Contains details about the departure time, along with the mode of transport for the duration of the activity.

## returnInfoOrderReq
+ returnPoint (returnDetailsOrderReq) - Contains information about the return location, where the customer is dropped off at the end of the activity. Note: If you do not provide this field, then the `returnPoint` object is not returned in the API response.  

## returnDetailsOrderReq
+ desc: `Multiple locations around the Anaheim Resort Area.` (string) - Description of the return location, where the customer is dropped off at the end of the activity. 
+ returnTime: `Buses operate from 1 hour after the \n Disneyland ® Park opening to 30 mins prior to Park closing` (string) - Contains details about the return time, along with the mode of transport for the duration of the activity.

## cityOrderReq
+ city (cityInfoOrderReq) - Contains information about the city.

## cityInfoOrderReq
+ code: `ANA` (string) - 3-character city code.
+ name: `Anaheim Buena Park` (string) - Name of the city.

## stateOrderReq
+ state (stateInfoOrderReq) - Contains information about the state. 

## stateInfoOrderReq
+ name: `California` (string) - Name of the state.
+ code: `CA` (string) - 2-character state code. 

## countryCodeOrderReq
+ countryCode: `US` (string) - 2-character ISO code of the country.  

## summaryOrderReq
+ summary: `Enjoy all the theme parks, hotels, restaurants, shopping, dining and other destinations within the Anaheim Resort area with this multi-day transportation ticket. Whether you want to go to the theme parks, do some shopping or sample some local cuisine you will be able to get there quickly and efficiently by eco-friendly bus! The routes include the cities of Anaheim, Garden Grove, Buena Park, Costa Mesa, Santa Ana and Orange and the tickets can be delivered to your hotel.` (string) - Description of the activity. Note: If you do not provide this field, then the `summary` field is not returned in the API response. 

## activityDescOrderReq
+ desc: `These 1, 3 or 5-day tickets give you access to an hop-on, hop-off service with comfortable, eco-friendly buses that run on 22 scheduled routes in Anaheim and Orange County. All of the routes begin and end at the Disneyland® Resort Transportation Center, and serve over 60 hotels and dozens of popular destinations for dining, shopping, and playing!Service operates 7 days a week and typically begins one hour before the Disneyland® Resort opens, continuing through 30 minutes after close. Travelers can also plan their trips on-the-go with the mobile phone. Once in destination, it is possible to download a handy app to ensure they have all the information they need at hand.Tickets will be conveniently delivered to your hotel, so please be sure to enter the hotel info during the booking process. Then once in Anaheim, simply find the appropriate line, make your way to the closest stop to board the bus and begin your Anaheim vacation!Below is a sample of places you will be able to visit using these tickets: • Anaheim Brewery  • Anaheim Garden Walk  • Anaheim Packing District  • Angel Stadium  • Bowers Museum  • Discovery Cube  • Disneyland® Resort  • Downtown Anaheim  • Honda Center  • Knott's Berry Farm  • MainPlace Mall  • Medieval Times  • Pirates Dinner Adventure  • South Coast Plaza` (string) - Description about the activity. Note: If you do not provide this field, then the `desc` field is not returned in the API response.

## durationOrderReq 
+ duration: `5 days` (string) - Duration of the activity. Note: If you do not provide this field, then the `duration` field is not returned in the API response. 

## scheduleOrderReq
+ schedule (scheduleResultsOrderReq) - Contains the schedule for the activity. The type of schedule may vary per activity and per supplier. The schedule of an activity is specified in a free text format, which includes the timing and the activity frequency. Note: If you do not provide this field, then the `schedule` object is not returned in the API response. 

## scheduleResultsOrderReq
+ freeText (array [freeTextOrderReq], fixed-type) - Contains the schedule of the activity in free text format. Note: If you do not provide this field, then the `freeText` array is not returned in the API response.  

## freeTextOrderReq
+ timing: `Valid from the time of first use, for the consecutive days selected.` (string) - Contains the activity timing. Note: If you do not provide this field, then the `timing` field is not returned in the API response.  
+ frequency: `See Availability` (string) - Contains the frequency of the activity. Note: If you do not provide this field, then the `frequency` field is not returned in the API response.  

## notesOrderReq 
+ notes: `Confirmation will be received at time of booking` (array) - Contains additional notes or important information related to the activity. Note: If you do not provide this field, then the `notes` array is returned as an empty array in the API response.

## inclusionsOrderReq 
+ inclusions: `Transportation for the number of selected days`, `All taxes, fees and handling charges` (array) - Contains a list of services that are included in the activity. Note: If you do not provide this field, then the `inclusions` array is returned as an empty array in the API response.

## exclusionsOrderReq
+ exclusions: `Hotel pickup and drop-off` (array) - Contains a list of services that are excluded from the activity. Note: If you do not provide this field, then the `exclusions` array is returned as an empty array in the API response.

## displayInfoOrderReq
+ displayInfos (array [displayOrderReq], fixed-type) - Contains the list of display information for the activity, which can be used for display or advertisement purpose on the User Interface (UI). Note: If you do not provide this field, then the `displayInfos` array is returned as an empty array in the API response.

## displayOrderReq
+ title: `Highlights` (string) - Title for the display information. 
+ desc: `Family friendly. Multiple departure times and locations available. Flexibility to customize your itinerary to your own preferences.` (string) - Display text. 

## vouchersOrderReq
+ voucher (voucherInfoOrderReq) - Contains information about the voucher that is provided for the activity. Note: If you do not provide this field, then the `voucher` object is not returned in the API response. 

## voucherInfoOrderReq
+ type: `Evoucher` (enum) - Type of voucher. Note: If you do not provide this field, then the `type` field is not returned in the API response.  
    + Evoucher 
    + IdOnly
    + PaperOnly
+ desc: `You can present either a paper or an electronic voucher for this activity.` (string) - Description of the voucher. Note: If you do not provide this field, then the `desc` field is not returned in the API response. 

## policiesOrderReq
+ policies (array [policiesInfoOrderReq], fixed-type) - Contains the list of information about the applicable policies for the activity. Note: If you do not provide this field, then the `policies` array is not returned in the API response. 

## policiesInfoOrderReq
+ type: `General` (string) - Type of policy. Note: If you do not provide this field, then the `type` field is not returned in the API response.  
+ desc: `For a full refund, cancel at least 24 hours in advance of the start date of the experience.` (string) - Textual description of the policy. Note: If you do not provide this field, then the `desc` field is not returned in the API response.  

## reviewsOrderReq
+ reviews (array[reviewInfoOrderReq], fixed-type) - Contains the list of reviews, given by other customers, for the activity. Note: If you do not provide this field, then the `reviews` array is returned as an empty array in the API response.

## reviewInfoOrderReq
+ desc: `It was an amazing experience with exceptional travel arrangements.` (string) - Description of the review. Note: If you do not provide this field, then the `desc` field is not returned in the API response. 
+ rating: 5.0 (number) - Rating (1-5) for the activity, as provided by the reviewer. Note: If you do not provide this field, then the `rating` field value is set to `0`. Format: Decimal
+ date: `2018-12-08T10:20` (string) - Date when the review was submitted. Note: If you do not provide this field, then the `date` field is set to `0001-01-01T00:00:00`. Format: YYYY-MM-DD or YYYY-MM-DDTHH:MM:SS
+ userInfo: `John Doe` (string) - Name of the reviewer. Note: If you do not provide this field, then the `userInfo` field is not returned in the API response. 
+ language: `en` (string) - Language in which the review was submitted. Note: If you do not provide this field, then the `language` field is not returned in the API response.   
+ title: `Mr` (enum) - Title before the name. Note: If you do not provide this field, then the `title` field is not returned in the API response.  
  + Mr
  + Madam
  + Master
  + Miss
  + Mrs
  + Ms
  + Mx

## reviewCountOrderReq
+ reviewCount: 25 (number) - Number of reviews provided for the activity. Note: If you do not provide this field, then the `reviewCount` field value is set to `0` 

## ratingOrderReq
+ rating: 4.5 (number) - Overall rating (1-5) for the activity.  Note: If you do not provide this field, then the `rating` field value is set to `0`. Format: Decimal

## maxPassengerCountOrderReq
+ maxPassengerCount: 3  (number) - Indicates the maximum number of travelers allowed to participate in this activity. Note: If you do not provide this field, then the `maxPassengerCount` field value is set to `0`. Format: Decimal 

## offersOrderReq
+ offers (array[offerInfoOrderReq], fixed-type) - Contains details about supplier-specific promotional offers. Note: If you do not provide this field, then the `offers` array is returned as an empty array in the API response.

## offerInfoOrderReq
+ format: `Text` (enum) - Indicates the format in which the offer is provided by the supplier. Note: If you do not provide this field, then the `format` field is set to `Structured`.
    + Structured
    + Text   
+ desc: `10% off Tours & Activities` (string) - Description of the promotional offer. Note: If you do not provide this field, then the `desc` field is not returned in the API response.    

## voucherDetailsOrderReq 
+ voucher (voucherInfoOrderReq) - Contains information about the voucher that is provided for the activity. Note: If you do not provide this field, then the `voucher` object is not returned in the API response. 

## policiesDetailsOrderReq
+ policies (array [policiesInfoOrderReq], fixed-type) - Contains the list of information about the applicable policies for the activity. Note: If you do not provide this field, then the `policies` array is not returned in the API response. 

## bookingRequirementsOrderReq
+ bookingRequirements (ReqInfoOrderReq) - Contains information about the booking requirements, such as the booking questions that the customer must answer at the time of booking and the list of credit cards that can be used to pay for the booking. Note: If you do not provide this field, then the `bookingRequirements` object is not returned in the API response. 

## ReqInfoOrderReq
+ include bookingQuestionsOrderReq
+ include allPaxRequiredOrderReq
+ include allowedCreditCardsOrderReq

## bookingQuestionsOrderReq
+ bookingQuestions (array[questionInfoOrderReq], fixed-type) - Contains the list of questions that is displayed to the customer at the time of booking. Note: If you do not provide this field, then the `bookingQuestions` array is returned as an empty array in the API response.

## questionInfoOrderReq
+ question: `Please pick me up at` (string) - Contains the question that is displayed to the customer on the User Interface (UI) at the time of booking. Note: If you do not provide this field, then the `question` field is not returned in the API response. 
+ sampleAnswer: `Holiday Inn Anaheim- Resort Area` (string)- Sample answer that is displayed, as a reference, on the User Interface (UI). Note: If you do not provide this field, then the `sampleAnswer` field is not returned in the API response.
+ id: `19` (number) - Unique ID that is assigned to the question. Note: If you do not provide this field, then the `id` field value is set to `0`.
+ isMandatory: true (boolean) - Indicates whether the question is mandatory for the customer at the time of booking. Note: If you do not provide this field, then the `mandatory` field is set to `false`. 
+ sortOrder: `1` (number) - Indicates the order index used for displaying the question. Note: If you do not provide this field, then the `sortOrder` field value is set to `0`.
+ questionCategory: `Pickup Location` (string) - Contains the category to which this question belongs. Note: If you do not provide this field, then the `questionCategory` field is not returned in the API response.

## allPaxRequiredOrderReq
+ allPaxRequired: true (boolean) -  If the `allPaxRequired` field returns `true`, then the information for all the travelers is required at the time of booking. Note: If you do not provide this field, then the `allPaxRequired` field is set to `false`. 

## allowedCreditCardsOrderReq
+ allowedCreditCards: `VI`, `MC`, `AX` (array) - Contains the list of credit card types that are accepted at the time of booking.   Note: If you do not provide this field, then the `allowedCreditCards` array is returned as an empty array in the API response.

## activityOptionOrderReq
+ option (optionOrderReq, required) - Contains information about the selected activity option, along with the details of the option, such as the option name, description, the fare for the activity option, available purchase options, and the applicable cancellation policy. 

## optionOrderReq
+ include optionIdOrderReq
+ include optionNameOrderReq
+ include optionDescOrderReq
+ include rateOrderReq
+ include cancellationPenaltiesOrderReq
+ include cancellationPolicyOptionsOrderReq
+ include isImmediateRefundNeededOrderReq 

## optionIdOrderReq
+ id: `TG1` - Unique ID for the option provided by the supplier. Note: If you do not provide this field, then the `id` field is not returned in the API response.

## optionNameOrderReq
+ name: `1-Day Ticket` - Name of the option. Note: If you do not provide this field, then the `name` field is not returned in the API response.

## optionDescOrderReq
+ desc: `1-Day Ticket` - Description of the option. Note: If you do not provide this field, then the `desc` field is not returned in the API response.

## rateOrderReq
+ rate (rateInfoOrderReq, required) - Contains information about the rate for the activity option, such as the rate ID, the fare (including fees, taxes, markup one, and discounts), and the available reward options.

## rateInfoOrderReq
+ include rateIdOrderReq
+ include fareTypeOrderReq
+ include isRefundableOrderReq
+ include currencyDSFareOrderReq
+ include displayFareOptionsOrderReq
+ include paxTypeFareDetailsOrderReq
+ include purchaseOptionsOrderReq

## rateIdOrderReq
+ id: `NjEwZWM2NDctYTA1Zi00M2JmLWI2MmMtNGE4ZTY4OGJhYTZlLUFDTlhUJDQ2M3w1OTUyMVAxfFRHMXxmZjkzNzhkNy0wMDNhLTQ0N2MtODJlMi1lYjMzYmU2MmJhM2Q=` (string) - Unique ID for the rate. Note: If you do not provide this field, then the `id` field is not returned in the API response. 

## fareTypeOrderReq
+ fareType: `Negotiated` (enum) - Indicates the type of fare.  Note: If you do not provide this field, then the `fareType` field is not returned in the API response.
  + published_type
  + negotiated_type

## isRefundableOrderReq
+ isRefundable: true (boolean) - Indicates whether the fare is refundable. Note: If you do not provide this field, then the `isRefundable` field is set to `false`.  

## currencyDSFareOrderReq
+ currency: `USD` (string) - 3-character ISO code that indicates the currency in which monetary amounts are returned in the response. The API calculates the amount equivalents and returns the amounts in the currency specified. For example, if the `currency` field value is set to `USD`, then the `baseFare`, `discount`, `taxes`, and other monetary amounts are returned in their `USD` amount equivalents. We support all ISO currencies Note: If you do not provide this field, then the `currency` field is not returned in the API response.

## displayFareOptionsOrderReq
+ displayFare (displayOpsOrderReq) - Contains information about the fare, along with the various breakup components that make up the fare for the activity. This fare is displayed to the customer on the User Interface (UI). Note: If you do not provide this field, then the `displayFare` object is not returned in the API response.

## displayOpsOrderReq
+ include totalFareOrderReq
+ include breakupFareOrderReq

## totalFareOrderReq
+ totalFare: `5.59` (number) - Contains the fare for the activity after considering the `breakup/baseFare`, `breakup/taxes`, `breakup/fees`, `breakup/discounts`, and `breakup/markups` amounts. Note: If you do not provide this field, then the `totalFare` field value is set to `0`. Format: Decimal

## breakupFareOrderReq
+ breakUp (breakupFareInfoOrderReq) - Contains information about various breakup components that make up the `displayFare/totalFare`. Note: If you do not provide this field, then the `breakUp` object is not returned in the API response.

## breakupFareInfoOrderReq
+ baseFare: `4.40` (number)- Contains the base fare for the activity. 
Notes:
  + The `baseFare` amount does not include the discount, taxes, fees, markup one, or any other additional cost.
  + If you do not provide this field, then the `baseFare` field value is set to `0`. Format: Decimal
+ include taxesOptionsOrderReq
+ include feesOptionsOrderReq
+ include discountsOptionsOrderReq
+ include markupsOptionsOrderReq

## taxesOptionsOrderReq
+ taxes (array [taxesInfoOrderReq], fixed-type) -  Contains the list of all the applicable taxes for the activity. This amount is not included in the `breakup/baseFare` field. However, this amount is already included in the `displayFare/totalFare` field. Note: If you do not provide this field, then the `taxes` array is returned as an empty array in the API response.

## taxesInfoOrderReq
+ amount: `0.0` (number) - Tax amount. Note: If you do not provide this field, then the `amount` field value is set to `0`. Format: Decimal
+ code: `LT` (string) - Unique code for the tax that is charged. Note: If you do not provide this field, then the `code` field is not returned in the API response.
+ desc: `Luxury tax` (string) - Description or additional information for the type of tax that is charged. Note: If you do not provide this field, then the `desc` field is not returned in the API response.

## feesOptionsOrderReq
+ fees (array [feesInfoOrderReq], fixed-type) - Contains the list of all the applicable fees for the activity. This amount is not included in the `breakup/baseFare` field. However, this amount is already included in the `displayFare/totalFare` field. Note: If you do not provide this field, then the `fees` array is returned as an empty array in the API response.

## feesInfoOrderReq
+ amount: `0` (number) - Fee amount. Note: If you do not provide this field, then the `amount` field value is set to `0`. Format: Decimal
+ desc: `Early check-in fee` (string) - Description or additional information for the type of fee that is charged. Note: If you do not provide this field, then the `desc` field is not returned in the API response.
+ source: `Supplier` (string) - Indicates whether the fee is charged by the supplier or the  Online Travel Agency (OTA system). Note: If you do not provide this field, then the `source` field is not returned in the API response.

## discountsOptionsOrderReq
+ discounts (array [discountsInfoOrderReq], fixed-type) - Contains the list of all the applicable discounts for the activity. This amount is not included in the `breakup/baseFare` field. However, this amount is already included in the `displayFare/totalFare` field. Note: If you do not provide this field, then the `discounts` array is returned as an empty array in the API response.

## discountsInfoOrderReq
+ amount: `0.0` (number) - Discount amount. Note: If you do not provide this field, then the `amount` field value is set to `0`. Format: Decimal 
+ desc: `Low season discount` (string) -  Description or additional information for the discount that is offered. Note: If you do not provide this field, then the `desc` field is not returned in the API response.
+ source: `supplier` (string) - Indicates whether the discount is provided by the supplier or the  Online Travel Agency (OTA system). Note: If you do not provide this field, then the `source` field is not returned in the API response.

## markupsOptionsOrderReq
+ markups (array [markupsInfoOrderReq], fixed-type) - Contains the list of applicable markup one for the fare. This amount is not included in the `breakup/baseFare` field. Note: If you do not provide this field, then the `markups` array is returned as an empty array in the API response.

## markupsInfoOrderReq
+ amount: `1.19` (number) - markup two (MUP) amount.  If you do not provide this field, then the `amount` field value is set to `0`. Format: Decimal
+ desc: `agency` (string) - Description or additional information for the markup three. Note: If you do not provide this field, then the `desc` field is not returned in the API response. 
+ source: `Agency` (string) - Indicates the source that has applied the markup three. Note: If you do not provide this field, then the `source` field is not returned in the API response. 

## paxTypeFareDetailsOrderReq
+ paxTypeFareDetails (array [paxTypeFareInfoOrderReq], required, fixed-type) - Contains the fare details and fare breakup of each traveler for whom this activity is booked. 

## paxTypeFareInfoOrderReq
+ type: `Adult` (enum, required) - Type of traveler. 
  + Adult
  + Child 
  + Infant 
  + Senior 
  + Youth
+ minQty: 1 (number, required) - Minimum number of travelers allowed to book the activity.  
+ maxQty: 9 (number, required) - Maximum number of travelers allowed to book the activity. 
+ pricingType: `Individual` (enum, required) - Indicates the type of pricing offered to the traveler for this activity. If the `pricingType` is `Indiviual`, it means that the fare for this activity is a per individual fare. If the `pricingType` is `Group`, it means that the fare for this activity is a group fare. 
  + Individual 
  + Group 
+ fare (paxTypeFareOrderReq, required) - Contains information about the fare, along with the various breakup components that make up the fare for the activity. 

## paxTypeFareOrderReq
+ currency: `USD` (string, required) -  3-character ISO code that indicates the currency in which monetary amounts are returned in the response. The API calculates the amount equivalents and returns the amounts in the currency specified. For example, if the `currency` field value is set to `USD`, then the `baseFare`, `discount`, `taxes`, and other monetary amounts are returned in their `USD` amount equivalents. We support all ISO currencies
+ totalFare: 2.72 (number, required) - Contains the fare for the activity after considering the `breakup/baseFare`, `breakup/taxes`, `breakup/fees`, `breakup/discounts`, and `breakup/markups` amounts. Format: Decimal
+ breakUp (breakupPaxTypeFareOrderReq, required) - Contains information about various breakup components that make up the `fare/totalFare`.

## breakupPaxTypeFareOrderReq
+ baseFare: `4.40` (number, required)- Contains the base fare for the activity. Note: The `baseFare` amount does not include the discount, taxes, fees, markup one, or any other additional cost. Format: Decimal
+ taxes (array [taxesInfoOrderReq], fixed-type) -  Contains the list of all the applicable taxes for the activity. This amount is not included in the `breakup/baseFare` field. However, this amount is already included in the `fare/totalFare` field.
+ fees (array [feesInfoOrderReq], fixed-type) - Contains the list of all the applicable fees for the activity. This amount is not included in the `breakup/baseFare` field. However, this amount is already included in the `fare/totalFare` field.
+ discounts (array [discountsInfoOrderReq], fixed-type) - Contains the list of all the applicable discounts for the activity. This amount is not included in the `breakup/baseFare` field. However, this amount is already included in the `fare/totalFare` field.
+ markups (array [markupsInfoOrderReq], fixed-type) - Contains the list of applicable markup one for the fare. This amount is not included in the `breakup/baseFare` field.

## purchaseOptionsOrderReq
+ purchaseOption (purchaseOptionInfoOrderReq) - Contains information about the different reward options that the customer can avail to pay for the activity booking. Note: If you do not provide this field, then the `purchaseOption` object is not returned in the API response.   

## purchaseOptionInfoOrderReq 
+ include totalPurchaseUnitsOrderReq 
+ include cashCurrencyOrderReq
+ include pointsCurrencyOrderReq
+ include rewardsOrderReq 

## totalPurchaseUnitsOrderReq
+ totalPurchaseUnits: `1` (number) - Total number of rewards that the customer can avail to pay for the activity booking. Note: If you do not provide this field, then the `totalPurchaseUnits` field value is set to `0`.   

## cashCurrencyOrderReq
+  cashCurrency: `USD` (string) - 3-character ISO code that indicates the currency in which the cash amount is returned in the `cash` field.   Note: If you do not provide this field, then the `cashCurrency` field is not returned in the API response.

## pointsCurrencyOrderReq
+ pointsCurrency: `Points` (string) - Indicates the currency that is associated with the loyalty program. For example, points and miles. Note that the `points` field value is represented by this currency. Note: If you do not provide this field, then the `pointsCurrency` field is not returned in the API response. 

## rewardsOrderReq 
+ rewards (array[rewardInfoOrderReq], fixed-type) - Contains the list of reward options that the customer can avail to make the activity booking. Note: If you do not provide this field, then the `rewards` array is returned as an empty array in the API response. 

## rewardInfoOrderReq
+ id: `1482|1` (string) -  Unique ID for the reward. Note: If you do not provide this field, then the `id` field is not returned in the API response. 
+ name: `Activity Reward` (string) - Name of the reward. Note: If you do not provide this field, then the `name` field is not returned in the API response. 
+ rank: `10` (string) - Rank assigned to the reward. This can be used to display the reward options on the User Interface (UI), based on the reward ranking. Note: If you do not provide this field, then the `rank` field is not returned in the API response.
+ type: `Variable_TieredVariable_LAPF_HybridFTP` (enum) - Type of reward. Note: If you do not provide this field, then the `type` field is not returned in the API response.
  + Dollars_Off_Incremental
  + Dollars_Off
  + FixedTicketPrice_TieredFTP
  + Purchase
  + Variable_TieredVariable_LAPF_HybridFTP
+ recommendation (recommendationInfoOrderReq) - Contains information about the recommended combination of cash and points that can used to pay for the booking. The recommendation is calculated based on the type of reward, customer's point balance, and the customer's eligibility information. Note: If you do not provide this field, then the `recommendation` object is not returned in the API response.
+ isEligible: true (boolean) - Indicates whether the customer is eligible to use this reward based on the customer's point balance. If the `isEligible` field returns `false`, this means that the customer is not eligible to use the reward. Note: If you do not provide this field, then the `isEligible` field is set to `false`.  
+ ruleSet (ruleSetInfoOrderReq) - Contains information about the rules based on which the `minimum` and `maximum` points that the customer can redeem is calculated. Note: If you do not provide this field, then the `ruleSet` object is not returned in the API response.
+ strikeoutValue (strikeoutValueInfoOrderReq) - Contains the pre-discounted fare for the activity in cash, points, or a combination of cash and points based on the type of reward. Note that this is a pre-discounted fare that appears striked-out to the customer on the User Interface (UI). Note: If you do not provide this field, then the `strikeoutValue` object is not returned in the API response.
+ actualValue (actualValueInfoOrderReq) - Contains the actual fare for the activity in cash, points, or a combination of cash and points based on the type of reward. Note: If you do not provide this field, then the `actualValue` object is not returned in the API response. 
+ stateBag (array [stateBagInfoOrderReq], fixed-type) - For internal use only. 

## recommendationInfoOrderReq
+ cash: `0.0` (number) - Recommended cash component of the actual fare that can be paid to book the activity. Note: If you do not provide this field, then the `cash` field value is set to `0`. Format: Decimal  
+ points: `1000.0` (number) - Recommended number of points that can be redeemed by the customer in the `pointsCurrency`. Note: If you do not provide this field, then the `points` field value is set to `0`. Format: Decimal
+ fee (feeRecommendationOrderReq) - Contains information about the applicable fee that the customer must pay when this reward option (rewards[]/id field) is used. Note: If you do not provide this field, then the `fee` object is not returned in the API response.
+ maxQuantity: `1` (number) - Maximum number of times that this reward can be used to make payment for the booking, based on the customer's point balance. Note: If you do not provide this field, then the `maxQuantity` field value is set to `0`.

## feeRecommendationOrderReq
+ cash: `0.0` (number) - Cash component of the fee amount. Note: If you do not provide this field, then the `cash` field value is set to `0`.  Format: Decimal  
+ points: `0.0` (number) - Points component of the fee amount in the `pointsCurrency`. Note: If you do not provide this field, then the `points` field value is set to `0`. Format: Decimal 
+ description: `fees` - Description of the fee. Note: If you do not provide this field, then the `description` field is not returned in the API response. 

## ruleSetInfoOrderReq
+ minimumPoints: `1000.0` (number) - Minimum points that the customer must redeem to use this reward option. Note: If you do not provide this field, then the `minimumPoints` field value is set to `0`. Format: Decimal
+ maximumPoints: `1000.0` (number) - Maximum points that the customer can redeem to use this reward option. Note: If you do not provide this field, then the `maximumPoints` field value is set to `0`. Format: Decimal
+ pointToCashFactor (pointToCashFactorInfoOrderReq) - Contains information about the conversion factor that is used to convert points to cash in case of a variable reward. Note: If you do not provide this field, then the `pointToCashFactor` object is not returned in the API response. 
+ cashRoundingOff: `0.0` (number) - Amount of cash that is deducted from the `displayFare/totalFare` and redeemed against the equivalent number of points from the customer’s point balance in case of dollar off reward and dollar off increemental reward. Note: If you do not provide this field, then the `cashRoundingOff` field value is set to `0`. Format: Decimal
+ pointStepSize: `1.0` (number) - Minimum quantity by which the customer can increase or decrease the number of points in case of a variable reward. Note: If you do not provide this field, then the `pointStepSize` field value is set to `0`. Format: Decimal
+ roundingType: `None` (enum) - Indicates the rounding type that is used for rounding the points value. Note: If you do not provide this field, then the `roundingType` field is not returned in the API response. 
  + Up
  + Down
  + Natural
  + None
             
## pointToCashFactorInfoOrderReq
+ value: `0.0100000` (number) - Indicates the conversion factor value that is used to calculate the cash equivalent in the `cashCurrency` for specific number of points. Consider a scenario where the `cashCurrency` is `USD` and you want to calculate the cash equivalent for `10000` points. If the conversion factor value is `0.01` and the `operator` is `Multiply`, then the cash equivalent for `10000` points will be `$100`. Note: If you do not provide this field, then the `value` field value is set to `0`. Format: Decimal
+ conversionOperator: `Multiply` (enum) - Arithmetic operator applied to calculate the points to cash conversion. Note: If you do not provide this field, then the `conversionOperator` field is not returned in the API response. 
  + Multiply
  + Divide
  + Subtract
  + Add

## strikeoutValueInfoOrderReq
+ cash: `0.0` (number) - Cash component of the pre-discounted fare amount. Note: If you do not provide this field, then the `cash` field value is set to `0`.  Format: Decimal
+ points: `0.0` (number) - Points component of the pre-discounted fare amount in the `pointsCurrency`. Note: If you do not provide this field, then the `points` field value is set to `0`. Format: Decimal

## actualValueInfoOrderReq
+ cash: `0.0` (number) - Cash component of the actual fare amount. Note: If you do not provide this field, then the `cash` field value is set to `0`. Format: Decimal
+ points: `1000.0` (number) - Points component of the actual fare amount in the `pointsCurrency`. Note: If you do not provide this field, then the `points` field value is set to `0`. Format: Decimal

## stateBagInfoOrderReq
+ key: `Discount` (string) - For internal use only.
+ value: 20.00 (number) - For internal use only. 

## cancellationPenaltiesOrderReq
+ cancellationPenalties (array [cancellationPenaltiesInfoOrderReq], fixed-type) - Contains the information about the list of applicable cancellation penalties, including information such as the window determining the penalty period and the penalties incurred for the cancellation. Note: If you do not provide this field, then the `cancellationPenalties` array is not returned in the API response. 

## cancellationPenaltiesInfoOrderReq
+ text: `Cancellations received within three (3) days of activity date will be subject to a supplier cancellation fee equal to the total activity cost. Theater tickets, theme-park passes, and select sightseeing tours are completely non-refundable once booked.  No shows are non-refundable.Please refer to the Terms and Conditions for more information.` - Textual description of the cancellation policy. Note: If you do not provide this field, then the `text` field is not returned in the API response. 
+ penalty (penaltyDetailsOrderReq) - Contains information related to the penalty, such as the start and end window and the penalty value. Note: If you do not provide this field, then the `penalty` object is not returned in the API response. 
+ window (windowInfoOrderReq) - Window during which the penalty is applicable. Note: If you do not provide this field, then the `window` object is not returned in the API response. 

## penaltyDetailsOrderReq
+ value: 100.0 (number) - If the cancellation is made within the given cancellation window, this field indicates the value of the penalty for the cancellation. For example, if this field returns `100` and the `valueType` field returns `Percent`, this means that a `100%` cancellation fee is applicable. Consider another scenario where the penalty of $100 is levied for the cancellation. In this case, the `value` field returns `100` and the `valueType` field returns `Fixed`. Note: If you do not provide this field, then the `value` field is set to `0`. Format: Decimal
+ valueType: `Percent` (enum) - Indicates the type of penalty value. The penalty can either be a fixed amount or a percentage of the total fare of the activity. For example, if the `value` field returns `100` and the `valueType` field returns `Percent`, this means that the cancellation penalty calculated is `100%` of the total fare. Consider another scenario where a penalty of $100 is levied for the cancellation. In this case, the `value` field returns `100` and the `valueType` field returns `Fixed`. This means that the cancellation penalty of `$100` is deducted from the total fare. Note: If you do not provide this field, then the `valueType` field is not returned in the API response. 
    + Fixed 
    + Percent
+ estimatedValue: `2.79` (number) - Approximate cancellation penalty amount calculated based on the value returned in the `value` and the `valueType` fields. For example, if the `valueType` field returns `Percent` and the `value` field returns `50`, then the estimateValue for cancellation penalty is calculated to be 50% of the total fare. Consider another scenario where the `value` field returns `100` and the `valueType` field returns `Fixed`, then the `estimatedValue` for cancellation penalty is `$100`. Note: If you do not provide this field, then the `estimatedValue` field value is set to `0`. Format: Decimal

## cancellationPolicyOptionsOrderReq
+ cancellationPolicy (penaltiesOrderReq) - Contains the information about the cancellation policy and the list of applicable cancellation penalties, including information such as the window determining the penalty period and the penalties incurred for the cancellation. Note: If you do not provide this field, then the `cancellationPolicy` object is not returned in the API response. 

## penaltiesOrderReq 
+ text: `Cancellations received within three (3) days of activity date will be subject to a supplier cancellation fee equal to the total activity cost. Theater tickets, theme-park passes, and select sightseeing tours are completely non-refundable once booked.  No shows are non-refundable.Please refer to the Terms and Conditions for more information.` - Textual description of the cancellation penalty. Note: If you do not provide this field, then the `text` field is not returned in the API response. 
+ penaltyRules (array [penaltyInfoOrderReq], fixed-type) - Contains the list of information related to the penalty, such as the start and end window and the penalty value. Note: If you do not provide this field, then the `penaltyRules` array is not returned in the API response. 

## penaltyInfoOrderReq
+ include penaltyDetailsOrderReq
+ window (windowInfoOrderReq) -  Window during which the penalty is applicable. Note: If you do not provide this field, then the `window` object is not returned in the API response. 

## windowInfoOrderReq
+ start: `2019-06-13T00:00:00` - Start date and time for the window. Note: If you do not provide this field, then the `date` field is set to `0001-01-01T00:00:00`. Format: YYYY-MM-DD or YYYY-MM-DDTHH:MM:SS  
+ end: `2019-06-15T00:00:00` - End date and time for the window. Note: If you do not provide this field, then the `date` field is set to `0001-01-01T00:00:00`. Format: YYYY-MM-DD or YYYY-MM-DDTHH:MM:SS  

## isImmediateRefundNeededOrderReq
+ isImmediateRefundNeeded: true (boolean) - Indicates whether refund must be processed immediately on cancellation or not. If `isImmediateRefundNeeded` is set to `true`, this means that refund must be processed immediately on cancellation. Note: If you do not provide this field, then the `isImmediateRefundNeeded` field is set to `false`.     

## bookingInfoOrderReq
+ bookingInfo (bookingInfoSummaryOrderReq) - Contains information about the booking details which includes the selected payment options, the traveler or passenger information, and the contact information of the person who is making the booking. Note: If you do not provide this field, then the `bookingInfo` object is not returned in the API response.     

## bookingInfoSummaryOrderReq
+ include passengersOrderReq
+ include bookingContactOrderReq
+ include selectedPaymentOptionsOrderReq
+ include specialRequestOrderReq
+ include questionAnswersOrderReq
+ include reportingFieldsBookingInfoOrderReq

## passengersOrderReq
+ passengers (array [passengerInfoOrderReq], required, fixed-type) - Contains the list of information of travelers for whom the customer wants to book the activity option.

## passengerInfoOrderReq
+ include passengerTypeOrderReq
+ include passengerNameOrderReq
+ include agePassengerOrderReq

## passengerTypeOrderReq
+ type: `Adult` (enum, required) - Type of traveler.
    + Adult
    + Child
    + Infant
    + Senior
    + Youth
    + Unknown

## passengerNameOrderReq
+ name (namePassengerOrderReq, required) - Contains information about the name of the traveler.

## namePassengerOrderReq
+ first: `John` (string, required) - First name.
+ last: `Doe` (string, required) - Last name.
+ middle: `Jerry` - Middle name.
+ title: `Mr` (enum) - Title before the name.
  + Mr
  + Madam
  + Master
  + Miss
  + Mrs
  + Ms
  + Mx
+ suffix: `Jr` - Suffix that follows the name.

## agePassengerOrderReq
+ age: 35 (number) - Age of traveler. The age must be provided for a child traveler. Note: If you do not provide this field, then the `age` field value is set to `0`.   

## bookingContactOrderReq
+ bookingContact (bookingContactInfoOrderReq, required) - Contains information about the name of the person who is making the booking.

## bookingContactInfoOrderReq
+ include nameBookContactOrderReq 
+ include ageBookingContactOrderReq 
+ include contactInfoBookContactOrderReq

## nameBookContactOrderReq  
+ name (nameBookingContactOrderReq, required) - Contains information about the name of the person who is making the booking.

## nameBookingContactOrderReq
+ first: `John` (string, required) - First name.
+ last: `Doe` (string, required) - Last name.
+ middle: `Jerry` - Middle name.
+ title: `Mr` (enum) - Title before the name.
  + Mr
  + Madam
  + Master
  + Miss
  + Mrs
  + Ms
  + Mx
+ suffix: `Jr` - Suffix that follows the name.

## ageBookingContactOrderReq 
+ age: 35 (number) - Age of the person who is making the booking.

## contactInfoBookContactOrderReq 
+ contactInfo (contactDetailsOrderReq) - Contains the contact information of the person who is making the booking. Note: If you do not provide this field, then the `contactInfo` object is not returned in the API response.

## contactDetailsOrderReq 
+ phone (phoneBookContactOrderReq) -  Contains the contact number of the person who is making the booking. Note: If you do not provide this field, then the `phone` object is not returned in the API response.
+ address (addressBookContactOrderReq ) - Contains information about the address of the person who is making the booking. Note: If you do not provide this field, then the `address` object is not returned in the API response.
+ email: `abc@xyz.com` (string) - Email address (recipient ID) that must be used when any email communication needs to be made with the person who is making the booking. Note: If you do not provide this field, then the `email` field is not returned in the API response. 

## phoneBookContactOrderReq 
+ type: `Work` (enum) - Type of phone number or contact number.
  + Fax
  + Home
  + Mobile
  + Work
  + Unknown
+ number: `555-0173` (string) - Phone number.
+ countryCode: `1` - Country code for the phone number.
+ ext: `123` - Extension number where the contact can be reached.
+ areaCode: 200 - Area code for the phone number.

## addressBookContactOrderReq 
+ line1: `3077 ACME Street` (string) - Street number and street name.
+ line2: `Landmark: Beside the ACME Shopping Mall` (string) - Additional information related to the address, such as landmark, apartment, suite, unit, and building information.
+ cityName: `San Francisco` (string) - Name of the city.
+ state (stateBookContactOrderReq) - Contains information about the state.  
+ countryCode: `US` (string) - 2-character ISO code of the country.  
+ postalCode: `94133` (string)- Postal code. In various countries, postal code is also known as postcode, post code, Eircode, PIN Code, or ZIP Code.

## stateBookContactOrderReq
+ code: `CA` (string) - 2-character state code.
+ name: `California` (string) - Name of the state.

## selectedPaymentOptionsOrderReq
+ selectedPaymentOptions (array[selectedPaymentOptionInfoOrderReq], required, fixed-type) - Contains the list of selected payment options that the customer wants to avail to pay for the activity. 
Notes: In case of activity bookings, you can only provide one payment option within the `/selectedPaymentOptions` array.  Either the amount in cash, points, or a combination of both the amount in cash and points must be provided within the `/selectedPaymentOptions` array.   

## selectedPaymentOptionInfoOrderReq
+ rewardId: `5256|5` (string, required) - Unique ID for the reward that is availed to pay for the activity.
+ cash (cashBookInfoOrderReq) - Contains information about the amount in cash that the customer must pay to book the activity. Note: If you do not provide this field, then the `cash` object is not returned in the API response.
+ points (pointsBookInfoOrderReq) -  Contains information about the number of points that the customer must redeem to book the activity. Note: If you do not provide this field, then the `points` object is not returned in the API response.

## cashBookInfoOrderReq
+ amount: 100.00 (number, required) - Cash component of the actual fare that the customer must pay to book the activity. Note: If you do not provide this field, then the `amount` field value is set to `0`. Format: Decimal
+ paymentMode: `Card` (enum, required) - Indicates the mode of payment for the `cash/amount`.
  + Cash
  + Card

## pointsBookInfoOrderReq
+ value: 2000 (number, required) - Number of points that the customer must redeem to book the activity. Note: If you do not provide this field, then the `value` field value is set to `0`. Format: Decimal
+ unit: `points` (string, required) - Indicates the currency that is associated with the loyalty program. For example, points and miles.

## specialRequestOrderReq
+ specialRequest: `Wheelchair assistance is needed at time of drop-off.` - Description of the special request. Note: If you do not provide this field, then the `specialRequest` field is not returned in the API response.  

## questionAnswersOrderReq
+ questionAnswers (array [questionAnsInfoOrderReq], fixed-type) - Contains the list of questions that are answered at the time of booking. 

## questionAnsInfoOrderReq 
+ questionId: 19 (string) - Unique ID for the question. 
+ answer: `Yes` (string) - Response to the question.

## reportingFieldsBookingInfoOrderReq
+ reportingFields (reportingFieldsBookingInfo) - Contains the fields that can be used for any business-related purposes, such as to pass the booking token for reporting purpose. 
Notes:
  + You can only pass up to ten custom fields.
  + If you do not provide this field, then the `reportingFields` field is not returned in the API response.

## reportingFieldsBookingInfo
+ field1: `Value1` - Indicates the value for field 1.  
+ field2: `Value2` - Indicates the value for field 2.
+ field3: `Value3` - Indicates the value for field 3.
+ field4: `Value4` - Indicates the value for field 4.
+ field5: `Value5` - Indicates the value for field 5.
+ field6: `Value6` - Indicates the value for field 6.
+ field7: `Value7` - Indicates the value for field 7.
+ field8: `Value8` - Indicates the value for field 8
+ field9: `Value9` - Indicates the value for field 9
+ field10: `Value10` - Indicates the value for field 10.

## paymentMethodsOrderReq
+ paymentMethods (array [paymentMethodDetailsOrderReq], fixed-type) - Contains the list of payment methods used to pay for the booking. We support payments made by cash and credit card.  Notes:  If the `/paymentMethods[]/type` field is set to `Card`, then you must provide the card details within the `/paymentMethods[]/card` object.  If the `/paymentMethods[]/type` field is set to `Cash`, then you must not provide the `/paymentMethods[]/card` object.  If you do not provide this field, then the `paymentMethods` array is not returned in the API response.  

## paymentMethodDetailsOrderReq
+ type: `Card` (enum, required) - Indicates the mode of payment. Notes:  If you set the `/paymentMethods[]/type` to `Card`, then you must provide the card details within the `/paymentMethods[]/card` object.  If you set the `/paymentMethods[]/type` to `Cash`, then the `/paymentMethods[]/card` object is optional.  
  + Card 
  + Cash
+ source: `Customer` (enum) - Indicates the source of payment. Note: If you do not provide this field, then the `source` field is not returned in the API response.
  + Customer 
  + Supplier
+ currency: `USD` - 3-character ISO code that indicates the currency in which the payment is made for the activity booking. Note: If you do not provide this field, then the `currency` field is not returned in the API response. 
+ card (cardInfoSupplierOrderReq) -  Contains information about the credit card that is used make the payment for the booking to the supplier. This credit card information is used to pay the `cash/amount` specified within the `selectedPaymentOptions` array. 
Notes: 
  + You must provide the `card` object, when the `/paymentMethods[]/type` field is set to `Card`.
  + If you do not provide this field, then the `card` object is not returned in the API response. 

## cardInfoSupplierOrderReq 
+ token: `skfwefh$@fkew0fwy32ryr$#8ffjn3` (string, required) - For internal use only.
+ number: `444433******1111` (string, required) - Credit card number used for the payment. Note that the credit card number must be at least 12 digits.
+ holderName: `John Doe` (string, required) - Name on the credit card that is used for the payment.
+ cvv: `123` (string, required) - Three or four-digit card verification value (CVV) or card security code (CSC). 
+ issuedBy: `AX` (enum, required) - Card issuer.  
  + VI
  + CA
  + AX
  + DS
  + TO 
  + DC
  + S
  + JC
  + BC
  + T
  + R 
  + E
+ expiry (expiryInfoOrderReq, required) - Contains the credit card expiration details. Note: The expiration date of the credit card must be later than or equal to the current month and of the current year.
+ contactInfo (cardcontactSupplierInfoOrderReq) - Contains the contact information for the cardholder. The contact information provided for the cardholder must be the same as the billing contact information that is on the record of the credit card issuing bank. Note: If you do not provide this field, then the `contactInfo` object is not returned in the API response. 

## expiryInfoOrderReq
+ month: 12 (number, required) -  Expiration month of the credit card. Note that the value of `month` must be between `1` and `12`.
+ year: 2023 (number, required) - Expiration year of the credit card.

## cardcontactSupplierInfoOrderReq
+ email: `abc@xyz.com` (string) - Email address (recipient ID) that must be used when any email communication needs to be made with the cardholder. Note: If you do not provide this field, then the `email` field is not returned in the API response.  
+ billingAddress (addressBookContactOrderReq) - Contains information about the billing address of the cardholder. Note: If you do not provide this field, then the `billingAddress` object is not returned in the API response. 
+ phone (phoneBookInfoOrderReq) - Contains the contact number of the cardholder. Note:If you do not provide this field, then the `phone` object is not returned in the API response. 

## phoneBookInfoOrderReq
+ type: `Work` (enum) - Type of phone number or contact number.
  + Fax
  + Home
  + Mobile
  + Work
  + Unknown
+ number: `555-0173` (string)  - Phone number.
+ countryCode: `1` - Country code for the phone number.

## confirmationDetailsOrderReq 
+ confirmationDetails (confirmationInfoOrderReq) - Contains the confirmation details of the activity booking. Note: If you do not provide this field, then the `confirmationDetails` object is not returned in the API response.

## confirmationInfoOrderReq 
+ bookingTimestamp: `{dateTime|YYYY-MM-DDTHH:mm:ssZ|0 0}` - Date and time when the activity booking is completed. Note: If you do not provide this field, then the `bookingTimestamp` field value is set to `0001-01-01T00:00:00Z`. Format: YYYY-MM-DDTHH:MM:SSZ  
+ include supplierConfirmationNumberOrderReq
+ include cancellationTokenOrderReq
+ alternateConfirmationDetails (array [alternateConfirmationInfo], fixed-type) - Contains the confirmation details of the activity booking from the supplier. Note: If you do not provide this field, then the `alternateConfirmationDetails` array is not returned in the API response.
+ errors (array [errorsOrderReq], fixed-type) - Contains the list of errors that occur during the booking process. For example, if the  booking fails, the `errors` array lists the appropriate error messages. Note: If you do not provide this field, then the `errors` array is not returned in the API response.
+ warnings (array [warningsOrderReq], fixed-type) - Contains the list of warnings that appear during the booking process. Note: If you do not provide this field, then the `warnings` array is not returned in the API response.

## supplierConfirmationNumberOrderReq
+ supplierConfirmationNumber: `309755104` (string, nullable) - Supplier confirmation number for the booking. Note: If you do not provide this field, then the `supplierConfirmationNumber` field is not returned in the API response.

## cancellationTokenOrderReq
+ cancellationToken: null (string, nullable) - Cancellation token received from the supplier that is required to cancel the activity booking. Note: If you do not provide this field, then the `cancellationToken` field is not returned in the API response.

## errorsOrderReq
+ code: `3434` - Code for the error.  
+ message: `Error: Could not process the request due to network connectivity issues. Please try again.` - Error message text.  

## warningsOrderReq
+ code: `4313` -  Code for the warning. 
+ message: `Warning: Due to heavy traffic, the processing might take longer than expected.` -  Warning message text.

## cancellationDetailsOrderReq
+ cancellationDetails (cancellationInfoOrderReq) -  Contains the cancellation details of the activity booking. Note: If you do not provide this field, then the `confirmationDetails` object is not returned in the API response.

## cancellationInfoOrderReq 
+ cancellationTimestamp: `{dateTime|YYYY-MM-DDTHH:mm:ssZ|0 0}` - Date and time when the activity booking is canceled. Note: If you do not provide this field, then the `cancellationTimestamp` field value is set to `0001-01-01T00:00:00Z`. Format: YYYY-MM-DDTHH:MM:SSZ    
+ include supplierCancellationNumberOrderReq
+ errors (array [errorsOrderReq], fixed-type) - Contains the list of errors that occur during the cancellation process. For example, if the  cancellation fails, the `errors` array lists the appropriate error messages. Note: If you do not provide this field, then the `errors` array is not returned in the API response.
+ warnings (array [warningsOrderReq], fixed-type) - Contains the list of warnings that appear during the cancellation process. Note: If you do not provide this field, then the `warnings` array is not returned in the API response.

## supplierCancellationNumberOrderReq
+ supplierCancellationNumber: `309755104` (string, nullable) - Supplier cancellation number for the booking. Note: If you do not provide this field, then the `supplierCancellationNumber` field is not returned in the API response.

## reportingFieldOrderReq
+ reportingFields (reportingFieldsInfoOrderReq) - Contains the reporting fields that can be used for any business-related purposes, such as to pass the booking token for reporting purpose. You can only pass up to ten fields. Note: If you do not provide this field, then the `reportingFields` object is not returned in the API response.

## reportingFieldsInfoOrderReq
+ field1: `fpkfm2212` - Indicates the value for field 1.  
+ field2: `Value2` - Indicates the value for field 2.
+ field3: `Value3` - Indicates the value for field 3.
+ field4: `Value4` - Indicates the value for field 4.
+ field5: `Value5` - Indicates the value for field 5.
+ field6: `Value6` - Indicates the value for field 6.
+ field7: `Value7` - Indicates the value for field 7.
+ field8: `Value8` - Indicates the value for field 8
+ field9: `Value9` - Indicates the value for field 9
+ field10: `Value10` - Indicates the value for field 10.

## customerOrderReq
+ customer (customerAdditionalInfo, required) - Contains information about the customer and the eligibility information of the customer for the loyalty program that the customer is associated with.

## customerAdditionalInfo
+ id: `autoUser` (string, required) -  Unique ID for the customer.
+ name (customerAdditionalInfoName, required) - Contains information about the name of the customer.
+ phone (phoneCustomerInfoOrderReq, required) - Contains the contact number of the customer.
+ alternatePhone (phoneCustomerInfoOrderReq) - Contains the alternate contact number of the customer.
+ address (addressCustomerOrderReq, required) - Contains information about the address of the customer.
+ include reportingFieldOrderReq
+ extensionData (customerAdditonalInfoExtensionData) - Contains custom fields that you can use to pass data that is required to call external services. For example, API consumers can use `extensionData` object to pass data that is required to call external services. This helps to extend the API functionality without the need to create new API versions. Notes:  You can only pass data in up to ten custom fields – `field1` to `field10`.  The data specified in the `extensionData` object is not stored in our database and is passed as is to the external services.  If you do not provide this field, then the `extensionData` object is not returned in the API response.     

## customerAdditionalInfoName
+ first: `John` (string, required) - First name.
+ last: `Doe` (string, required) - Last name.
+ middle: `Jerry` - Middle name.
+ title: `Mr` (enum) - Title before the name.
  + Mr
  + Madam
  + Master
  + Miss
  + Mrs
  + Ms
  + Mx
+ suffix: `Jr` - Suffix that follows the name.

## phoneCustomerInfoOrderReq
+ type: `Work` (enum) - Type of phone number or contact number.
  + Fax
  + Home
  + Mobile
  + Work
  + Unknown
+ number: `555-0173` (string, required)  - Phone number.
+ countryCode: `1` - Country code for the phone number.

## addressCustomerOrderReq
+ line1: `3077 ACME Street` (string, required) -  Street number and street name.
+ line2: `Landmark: Beside the ACME Shopping Mall` (string) - Additional information related to the address, such as landmark, apartment, suite, unit, and building information. 
+ cityName: `San Francisco` (string, required) - Name of the city.
+ state (stateCustomerInfoOrderReq, required) - Contains information about the state. Note: If the `countryCode` is set to `US`, `state` name is mandatory. For more information on US state codes, see the [state code list](http://pe.usps.com/text/pub28/28apb.htm). 
+ countryCode: `US` (string, required) - 2-character ISO code of the country.  
+ postalCode: `94133` (string, required) - Postal code. In various countries, postal code is also known as postcode, post code, Eircode, PIN Code, or ZIP Code.
 
## stateCustomerInfoOrderReq
+ name: `California` (string) - Name of the state. Note: If the `countryCode` is set to `US`, the `state` name is mandatory.
+ code: `CA` (string) - 2-character state code.

## customerAdditonalInfoExtensionData
+ field1: `value1` - Indicates the value for field1. 
+ field2: `value2` - Indicates the value for field2.
+ field3: `value3` - Indicates the value for field3. 
+ field4: `value4` - Indicates the value for field4. 
+ field5: `value5` - Indicates the value for field5.
+ field6: `value6` - Indicates the value for field6. 
+ field7: `value7` - Indicates the value for field7.
+ field8: `value8` - Indicates the value for field8. 
+ field9: `value9` - Indicates the value for field9. 
+ field10: `value10` - Indicates the value for field10.

## createOrderResponse
+ include orderStatusOrderResp
+ include createdOnDateOrderResp 
+ include lastUpdatedOnDateOrderResp
+ include sessionIdOrderResp
+ include orderIdOrderResp
+ include cartIdOrderResp 
+ include itemIdOrderResp 
+ include purchaseIdOrderResp
+ include searchTypeOrderResp
+ include searchRequestOrderResp 
+ include activityOrderResp 
+ include bookingInfoOrderResp
+ include paymentMethodsOrderResp
+ include confirmationDetailsOrderResp 
+ include cancellationDetailsOrderResp
+ include reportingFieldOrderResp 
+ include customerOrderResp

## orderStatusOrderResp
+ status: `Confirmed` (enum) - Indicates the order status of the activity booking. 
  + Confirmed
  + Canceled
  + Failed
  + Planned

## sessionIdOrderResp 
+ sessionId: `0f8fad5b-d9cb-461f-a165-70867728951z` (string) - Unique acknowledgement token that indicates that the request has been received and the processing has been initiated. The session ID is valid for 60 minutes from the time it is generated. Note: If you do not provide this field, at the time of order creation, then the `sessionId` field is not returned in the API response.

## createdOnDateOrderResp
+ createdOn: `{dateTime|YYYY-MM-DDTHH:mm:ssZ|0 0}` (string) - Date and time when the order is created. Format: YYYY-MM-DDTHH:MM:SSZ   

## lastUpdatedOnDateOrderResp
+ lastUpdatedOn: `{dateTime|YYYY-MM-DDTHH:mm:ssZ|0 0}` (string) - Date and time when the order is last updated. Format: YYYY-MM-DDTHH:MM:SSZ  

## orderIdOrderResp
+ orderId: `123-456-789` (string) -  Unique ID to identify the order for the activity booking. The order ID is generated by the system and returned in the API response. 
Note: You must use this order ID to retrieve the order details, and to update the confirmation details and the cancellation details of the activity booking.

## itemIdOrderResp 
+ itemId: `dmlf22323lsd` (string) - Unique ID of the item (activity option) that the customer wants to book. The item ID is generated by the system and returned in the API response.

## cartIdOrderResp
+ cartId: `0f8fad5b-d9cb-461f-a165-70867728951z` (string) - Unique ID for the cart that contains the item (activity option) that the customer wants to book. Note: If you do not provide this field, at the time of order creation, then the `cartId` field is not returned in the API response.

## purchaseIdOrderResp
+ purchaseId: `0fad5b-d9cb-461f-a165-70861z` (string) - Purchase ID used to retrieve the details of the item purchased by the customer. Note: If you do not provide this field, at the time of order creation, then the `purchaseId` field is not returned in the API response.

## searchTypeOrderResp
+ detailsSearchType: `Stateful` (enum) - Type of activity search. Depending on the type of search, the `searchQuery` object specified is different. Note: If you do not provide this field, at the time of order creation, then the `detailsSearchType` field is not returned in the API response. 
  + stateful 
  + stateless

## searchRequestOrderResp
+ searchRequest (searchRequestInfoOrderResp) - Contains information about the search criteria that were provided in the Initiate Activity Search or the Initiate a Stand-Alone Activity Search  API request at time of search.

## searchRequestInfoOrderResp
+ include currencyOrderResp 
+ include searchQueryOrderResp 
+ include customerInfoOrderResp 
+ include programIdOrderResp 

## currencyOrderResp
+ currency: `USD` - 3-character ISO code that indicates the currency that was specified in the search request.  
Note: If you do not provide this field, at the time of order creation, the `currency` field is not returned in the API response.

## searchQueryOrderResp
+ searchQuery (searchQueryStatelessOrderResp) - Contains the list of search criteria that is used to search for activities. The `searchQuery` object contains the information about the geo region, the date range within which the customer wants to search for activities, passenger details, and the activity date. 
Notes: 
  + If specified at the time of order creation, the `searchQuery` object provided can be different depending on the type of search performed. For better understanding, see the JSON samples for the following search use cases: statefulorderreq and statelessorderreq.
  + If you do not provide this field, at the time of order creation, then the `searchQuery` object is not returned in the API response.

## searchQueryStatelessOrderResp
+ passengerDetails (array [passengerDetailsOrderResp], fixed-type) - Contains the list of information about the travelers based on which you want to retrieve the list of activity options. Note: If you do not provide this field, at the time of order creation, then the `passengerDetails` array is not returned in the API response.
+ dateRange (dateRangeInfoOrderResp) - Contains the range of date between which the customer wants to search for activities. Note: If you do not provide this field, at the time of order creation, then the `dateRange` object is not returned in the API response. 
+ activityDate: `{dateTime|YYYY-MM-DDTHH:mm:ss|30 0}` (string) - Date that the traveler wants book the activity for. Note: If you do not provide this field, at the time of order creation, then the `activityDate` field is returned as `0001-01-01T00:00:00`. Format: YYYY-MM-DD or YYYY-MM-DDTHH:MM:SS
+ activityId: `59521P1` - Unique activity ID that identifies a specific activity for which you want to retrieve the activity details. The `activityId` is returned only in case of stateless activity search, if specified. Note: If you do not provide this field, at the time of order creation, then the `activityId` field is not returned in the API response.  
+ filters (filterOrderResp) - Contains filters to narrow down the activity search results. 
Notes: 
  + This field is returned only in case of stateful activity search, if specified. 
  + If you do not provide this field, at the time of order creation, then the `filters` object is not returned in the API response.
+ bounds (boundsInfoOrderResp) - Contains information about the geo region where the customer wants to search for activites. 
Notes: 
  + This field is applicable only in case of stateful activity search. 
  + If you do not provide this field, at the time of order creation, then the `bounds` object is not returned in the API response.

## passengerDetailsOrderResp
+ count: 1 (number) - Number of travelers of a specific `type`. Note: If you do not provide this field, at the time of order creation, then the `count` field value is returned as `0`.
+ ages :`20` (array [number], fixed-type) -  Age of travelers of a specific `type`. For example, if the `count` field value is returned as `2` for traveler type `Adult`, then the `ages` array contains ages of two adult travelers. Note: If you do not provide this field, at the time of order creation, then the `ages` array is not returned in the API response.
+ type: `Adult` (enum) - Type of traveler. Note: If you do not provide this field, at the time of order creation, then the `type` field is not returned in the API response.  
    + Adult 
    + Child
    + Infant
    + Senior
    + Youth 
    + Unknown

## dateRangeInfoOrderResp
+ from: `{date|YYYY-MM-DD|30}` (string) - Start date from when the customer wants to search for activities. Note: If you do not provide this field, at the time of order creation, then the `from` field is returned as `0001-01-01T00:00:00`. Format: YYYY-MM-DD or YYYY-MM-DDTHH:MM:SS
+ to: `{date|YYYY-MM-DD|30}` (string) - End date up to when the customer wants to search for the activity. Note: If you do not provide this field, at the time of order creation, then the `to` field is returned as `0001-01-01T00:00:00`. Format: YYYY-MM-DD or YYYY-MM-DDTHH:MM:SS

## boundsInfoOrderResp
+ circle (centerInfoOrderResp) - Contains the geographic coordinates of the center point and the radius within which you want to search for activities. Note: If you do not provide this field, at the time of order creation, then the `circle` object is not returned in the API response.

## centerInfoOrderResp
+ center (object) - Contains the latitude and longitude coordinates of the given point from which the radius is calculated to determine the area to search for activities. For example, if you want to search for activities within a 60.5 km radius from the Santa Monica Pier, the Santa Monica Pier is considered as your center. Note: If you do not provide this field, at the time of order creation, then the `center` object is not returned in the API response.
    + lat: `34.0103` (number) - Latitude coordinate of the center point. The `lat` value must be between -90 and +90. For example, the `lat` value for Santa Monica Pier is 34.0103. Note: If you do not provide this field, at the time of order creation, then the `lat` field value is returned as `0`. Format: Decimal  
    + long: `-118.4963` (number) - Longitude coordinate of the center point. The `long` value must be between -180 and +180.  For example, the `long` value for Santa Monica Pier is -118.4963. Note: If you do not provide this field, at the time of order creation, then the `long` field value is returned as `0`. Format: Decimal
+ radiusKm: `60.5` (number) - Distance, in kilometers, from the center point that you want to consider in the search area. The `radiusKm` value must be between `1` and `100`. For example, if you want to search within a 60.5-km radius from the Santa Monica Pier, then set the `radiusKm` field to 60.5. Note: If you do not provide this field, at the time of order creation, then the `radiusKm` field value is returned as `0`. Format: Decimal

## filterOrderResp
+ include activityNameFilterOrderResp
+ include priceFilterOrderResp
+ include categoryFilterOrderResp
+ include tripAdvRatingFilterOrderResp
+ include allowedCountryOrderResp

## activityNameFilterOrderResp
+ activityNames: `Virtual Guided Cultural Tour of Los Angeles`, `Gambling Built the Sunset Strip Walking Audio Tour by VoiceMap`, `Crazy Dash Walking Adventure of Ontario, CA`, `Wacky Walk Adventure Game - Anaheim, CA`, `Operation City Quest Scavenger Hunt - Los Angeles, CA` (array) - Include only those activities whose activity name is same as specified in this field.

## priceFilterOrderResp
+ price (priceFilterInfoOrderResp) - Include only those activities whose rate is equal to or higher than the rate specified in the `minPrice` field and equal to or less than the rate specified in the `maxPrice` field. The `price` filter allows users to see only those activities that are within the specified price range.

## priceFilterInfoOrderResp
+ minPrice: 20.00 (number) - Include only those activities whose rate is equal to or higher than the rate specified in this field. Format: Decimal
+ maxPrice: 1000.00 (number) - Include only those activities whose  rate is equal to or lower than the rate specified in this field. Format: Decimal

## categoryFilterOrderResp
+ categories: `9`, `12`, `16`, `4` (array) - Include only those activities that belong to the categories specified in this field.  You must provide the IDs of the categories that are supported by the `categories` filter.  

## tripAdvRatingFilterOrderResp
+ tripAdvisorRating: `1`,`2`, `3`, `4`, `5` (array) - Include only those activities whose TripAdvisor&reg; rating is equal to the TripAdvisor&reg; rating specified in this field.  

## allowedCountryOrderResp
+ allowedCountry: US - Include only those activities that belong to the country character ISO country code specified in this field. This filter is used when the specified radial search region spreads across different countries and you want to restrict the results to only one specific country. Consider a scenario where the georegion provided in the search criteria is located close to a country's borderline and the radius spans two countries, such as `France` and `Belgium`. In this scenario, if you want to restrict the results to `France`, you must set the `allowedCountry` field value to `FR`.

## customerInfoOrderResp
+ customerInfo (customerDetailsOrderResp) - Contains information about the customer and the eligibility information of the customer for the loyalty program that the customer is associated with. Note: If you do not provide this field, at the time of order creation then the `customerInfo` field is not returned in the API response. 

## customerDetailsOrderResp
+ include customerIdOrderResp
+ include pointBalanceOrderResp
+ include transitCodeOrderResp
+ include eligibilityInfoOrderResp

## customerIdOrderResp
+ id: `autoUser` (string) - Unique ID for the customer. Note: If you do not provide this field, at the time of order creation then the `id` field is not returned in the API response. 

## pointBalanceOrderResp
+ availablePointBalance: `90000.0` (number) - Number of loyalty points available in the customer's credit card account. Note: If you do not provide this field, at the time of order creation then the `availablePointBalance` field value is returned as `0`.  Format: Decimal

## transitCodeOrderResp 
+ transitCode: `72e87c86-c240-45eb-8d96-b46c52e5618f` (string) -  Unique code that is generated by the transit service. The transit code is used to track all the calls made to different systems within cxLoyalty for all search to booking-related transactions for a single user session. The transit code is valid for `72 hours` from the time it is generated. Note: If you do not provide this field, at the time of order creation then the `transitCode` field is not returned in the API response. 

## eligibilityInfoOrderResp
+ eligibilityInfo (eligibilityOrderResp) - For internal use only.

## eligibilityOrderResp
+ programCurrency: `Points` (string) - For internal use only.
+ purchaseAllowed: true (boolean) - For internal use only.
+ redemptionAllowed: true (boolean) - For internal use only.
+ displayProgramCurrencyAsDecimal: false (boolean) - For internal use only.
+ useVariableMilesFormula: false (boolean) - For internal use only.
+ shortfallAllowed: true (boolean) - For internal use only.

## programIdOrderResp
+ programId: `docs` (string) - Unique ID for the loyalty program. Each loyalty program can be associated with various rewards. The `programId` is used to retrieve all the rewards mapped to it. Note: If you do not provide this field, at the time of order creation, the `programId` field is not returned in the API response.

## activityOrderResp
+ activity (activityInfoOrderResp) - Contains information about the  activity, along with its content attributes, such as activity name, images, policies, reviews, and rating.
 
## activityInfoOrderResp
+ include activityIdOrderResp
+ include supplierIdOrderResp 
+ include supplierAccountIdOrderResp
+ include activityNameOrderResp
+ include activityCategoryOrderResp
+ include activityContentOrderResp
+ include voucherDetailsOrderResp 
+ include policiesDetailsOrderResp
+ include bookingRequirementsOrderResp
+ include activityOptionOrderResp

## activityIdOrderResp
+ id: `59521P1` (string, required) - Unique activity ID that identifies a specific activity. Note: If you do not provide this field, at the time of order creation, then the `id` field is not returned in the API response. 

## supplierIdOrderResp
+ supplierId: `3awhj4i7z7k` (string) - Unique ID for the supplier of this activity. Note: If you do not provide this field, at the time of order creation, then the `supplierId` field is not returned in the API response.  

## supplierAccountIdOrderResp
+ supplierAccountId: `36br8t9byf4` (string) - Unique account ID for the supplier of this activity. Note: If you do not provide this field, at the time of order creation, then the `supplierAccountId` field is not returned in the API response. 

## activityNameOrderResp
+ name: `Anaheim Resort Area Multi-Day Transportation Tickets` (string) - Name of the activity.

## activityCategoryOrderResp
+ categories (array [categoryOrderResp], fixed-type) - Contains the list of categories to which the activity belongs.   Note: If you do not provide this field, at the time of order creation, then the `categories` array is not returned in the API response.

## categoryOrderResp
+ id: `20` - Unqiue ID for the category. Note: If you do not provide this field, at the time of order creation, then the `id` field is not returned in the API response. 
+ name: `Multi-day & Extended Tours` - Name of the category. Note: If you do not provide this field, at the time of order creation, then the `name` field is not returned in the API response. 

## activityContentOrderResp
+ content (contentOrderResp) -  Contains information about the activity, including its content attributes, such as the activity summary, rating, location, reviews, images, and policies. Note: If you do not provide this field, at the time of order creation, then the `content` object is not returned in the API response.

## contentOrderResp
+ include mediaOrderResp 
+ include locationOrderResp
+ include summaryOrderResp
+ include activityDescOrderResp
+ include durationOrderResp 
+ include scheduleOrderResp
+ include notesOrderResp 
+ include inclusionsOrderResp 
+ include exclusionsOrderResp
+ include displayInfoOrderResp
+ include vouchersOrderResp
+ include policiesOrderResp
+ include reviewsOrderResp
+ include reviewCountOrderResp
+ include ratingOrderResp
+ include maxPassengerCountOrderResp
+ include offersOrderResp

## mediaOrderResp 
+ media (mediaInfoOrderResp) - Contains the media information related to the activity, such as primary image, images, thumbnails, and captions. Note: If you do not provide this field, at the time of order creation, then the `media` object is not returned in the API response. 

## mediaInfoOrderResp
+ primaryImage (primaryImageOrderResp) - Contains information about the primary image for the activity. Note: If you do not provide this field, at the time of order creation, then the `primaryImage` object is not returned in the API response.
+ images (array [imagesOrderResp], fixed-type) - Contains the list of full-size images for the activity. Note: If you do not provide this field, at the time of order creation, then the `images` array is not returned in the API response.  

## primaryImageOrderResp
+ url: `https://hare-media-cdn.tripadvisor.com/media/attractions-splice-spp-674x446/06/71/c3/b5.jpg` (string) - The content delivery network (CDN) URL for the full-size image. Note: If you do not provide this field, at the time of order creation, then the `url` field is not returned in the API response. 
+ thumbnailUrl: `https://hare-media-cdn.tripadvisor.com/media/attractions-splice-spp-154x109/06/71/c3/b5.jpg` (string) - The content delivery network (CDN) URL for the thumbnail image. Note: If you do not provide this field, at the time of order creation, then the `thumbnailUrl` field is not returned in the API response. 
+ caption: `Anaheim Resort Area Multi-Day Transportation Tickets` - Description of the full-size image. The caption can be used to display text alongside the image or to display text while the image is loading. Note: If you do not provide this field, at the time of order creation, then the `caption` field is not returned in the API response. 

## imagesOrderResp
+ url: `https://hare-media-cdn.tripadvisor.com/media/attractions-splice-spp-674x446/06/71/c3/b5.jpg` (string) - The content delivery network (CDN) URL for the full-size image. Note: If you do not provide this field, at the time of order creation, then the `url` field is not returned in the API response. 
+ thumbnailUrl: `https://hare-media-cdn.tripadvisor.com/media/attractions-splice-spp-154x109/06/71/c3/b5.jpg` (string) - The content delivery network (CDN) URL for the thumbnail image. Note: If you do not provide this field, at the time of order creation, then the `thumbnailUrl` field is not returned in the API response. 
+ caption: `Anaheim Resort Area Multi-Day Transportation Tickets` (string) - Description of the full-size image. The caption can be used to display text alongside the image or to display text while the image is loading. Note: If you do not provide this field, at the time of order creation, then the `caption` field is not returned in the API response. 

## locationOrderResp
+ location (locationInfoOrderResp) - Contains the location of the activity. Note: If you do not provide this field, at time of order creation, then the `location` object is not returned in the API response.  

## locationInfoOrderResp 
+ include geoCodeLocationOrderResp
+ include addressActivityOrderResp
+ include departureInfoOrderResp
+ include returnInfoOrderResp

## geoCodeLocationOrderResp
+ geoCode (geoCodeInfoOrderResp) - Contains the geographic coordinates of the activity location. Note: If you do not provide this field, at the time of order creation, then the `geoCode` object is not returned in the API response.   

## geoCodeInfoOrderResp
+ lat: 33.859013 (number, nullable) - Latitude coordinate of the activity location. Note: If you do not provide this field, at the time of order creation, then the `lat` field value is returned as `0`. 
+ long: `-117.9778750001` (number, nullable) - Longitude coordinate of the activity location. Note: If you do not provide this field, at the time of order creation, then the `long` field value is returned as `0`.

## addressActivityOrderResp
+ address (addressActivityInfoOrderResp) - Contains information about the address of the location where the activity is conducted. Note: If you do not provide this field, at the time of order creation, then the `address` object is not returned in the API response. 

## addressActivityInfoOrderResp
+ line1: `3077 ACME Street` (string) -  Street number and street name.
+ line2: `Landmark: Beside the ACME Shopping Mall` (string) - Additional information related to the address, such as landmark, apartment, suite, unit, and building information. 
+ include cityOrderResp
+ include stateOrderResp
+ include countryCodeOrderResp
+ postalCode: `94133` (string) - Postal code. In various countries, postal code is also known as postcode, post code, Eircode, PIN Code, or ZIP Code.

## departureInfoOrderResp
+ departurePoint (departureDetailsOrderResp) - Contains information about the departure location, where the customer must reach to board the transport for the activity. Note: If you do not provide this field, at the time of order creation, then the `departurePoint` object is not returned in the API response.  

## departureDetailsOrderResp
+ desc: `Multiple locations around the Anaheim Resort Area.` (string) - Description of the departure location. 
+ departureTime: `Buses operate from 1 hour prior to \n Disneyland ® Park opening to 30 mins after Park closing` (string) - Contains details about the departure time, along with the mode of transport for the duration of the activity.

## returnInfoOrderResp
+ returnPoint (returnDetailsOrderResp) - Contains information about the return location, where the customer is dropped off at the end of the activity. Note: If you do not provide this field, at the time of order creation, then the `returnPoint` object is not returned in the API response.   

## returnDetailsOrderResp
+ desc: `Multiple locations around the Anaheim Resort Area.` (string) - Description of the return location, where the customer is dropped off at the end of the activity.  
+ returnTime: `Buses operate from 1 hour after the \n Disneyland ® Park opening to 30 mins prior to Park closing` (string) - Contains details about the return time, along with the mode of transport for the duration of the activity.

## cityOrderResp
+ city (cityInfoOrderResp) - Contains information about the city.

## cityInfoOrderResp
+ code: `ANA` (string) - 3-character city code.
+ name: `Anaheim Buena Park` (string) - Name of the city. 

## stateOrderResp
+ state (stateInfoOrderResp) - Contains information about the state. 

## stateInfoOrderResp
+ name: `California` (string) - Name of the state.
+ code: `CA` (string) - 2-character state code. 

## countryCodeOrderResp
+ countryCode: `US` (string) - 2-character ISO code of the country.  

## summaryOrderResp
+ summary: `Enjoy all the theme parks, hotels, restaurants, shopping, dining and other destinations within the Anaheim Resort area with this multi-day transportation ticket. Whether you want to go to the theme parks, do some shopping or sample some local cuisine you will be able to get there quickly and efficiently by eco-friendly bus! The routes include the cities of Anaheim, Garden Grove, Buena Park, Costa Mesa, Santa Ana and Orange and the tickets can be delivered to your hotel.` (string) - Description of the activity. Note: If you do not provide this field, at the time of order creation, then the `summary` field is not returned in the API response. 

## activityDescOrderResp
+ desc: `These 1, 3 or 5-day tickets give you access to an hop-on, hop-off service with comfortable, eco-friendly buses that run on 22 scheduled routes in Anaheim and Orange County. All of the routes begin and end at the Disneyland® Resort Transportation Center, and serve over 60 hotels and dozens of popular destinations for dining, shopping, and playing!Service operates 7 days a week and typically begins one hour before the Disneyland® Resort opens, continuing through 30 minutes after close. Travelers can also plan their trips on-the-go with the mobile phone. Once in destination, it is possible to download a handy app to ensure they have all the information they need at hand.Tickets will be conveniently delivered to your hotel, so please be sure to enter the hotel info during the booking process. Then once in Anaheim, simply find the appropriate line, make your way to the closest stop to board the bus and begin your Anaheim vacation!Below is a sample of places you will be able to visit using these tickets: • Anaheim Brewery  • Anaheim Garden Walk  • Anaheim Packing District  • Angel Stadium  • Bowers Museum  • Discovery Cube  • Disneyland® Resort  • Downtown Anaheim  • Honda Center  • Knott's Berry Farm  • MainPlace Mall  • Medieval Times  • Pirates Dinner Adventure  • South Coast Plaza` (string) - Description about the activity. Note: If you do not provide this field, at the time of order creation, then the `desc` field is not returned in the API response.

## durationOrderResp 
+ duration: `5 days` (string) - Duration of the activity. Note: If you do not provide this field, at the time of order creation, then the `duration` field is not returned in the API response.

## scheduleOrderResp
+ schedule (scheduleResultsOrderResp) - Contains the schedule for the activity. The type of schedule may vary per activity and per supplier. The schedule of an activity is specified in a free text format, which includes the timing and the activity frequency. Note: If you do not provide this field, at the time of order creation, then the `schedule` object is not returned in the API response. 

## scheduleResultsOrderResp
+ freeText (array [freeTextOrderResp], fixed-type) - Contains the schedule of the activity in free text format. Note: If you do not provide this field, at the time of order creation, then the `freeText` array is not returned in the API response.  

## freeTextOrderResp
+ timing: `Valid from the time of first use, for the consecutive days selected.` (string) - Contains the activity timing. Note: If you do not provide this field, at the time of order creation, then the `timing` field is not returned in the API response. 
+ frequency: `See Availability` (string) - Contains the frequency of the activity. Note: If you do not provide this field, at the time of order creation, then the `frequency` field is not returned in the API response.   

## notesOrderResp 
+ notes: `Confirmation will be received at time of booking` (array) - Contains additional notes or important information related to the activity. Note: If you do not provide this field, at the time of order creation, then the `notes` array is returned as an empty array in the API response.

## inclusionsOrderResp 
+ inclusions: `Transportation for the number of selected days`, `All taxes, fees and handling charges` (array) - Contains a list of services that are included in the activity. Note: If you do not provide this field, at the time of order creation, then the `inclusions` array is returned as an empty array in the API response.

## exclusionsOrderResp
+ exclusions: `Hotel pickup and drop-off` (array) - Contains a list of services that are excluded from the activity. Note: If you do not provide this field, at the time of order creation, then the `exclusions` array is returned as an empty array in the API response.

## displayInfoOrderResp
+ displayInfos (array [displayOrderResp], fixed-type) - Contains the list of display information for the activity, which can be used for display or advertisement purpose on the User Interface (UI). Note: If you do not provide this field, at the time of order creation, then the `displayInfos` array is returned as an empty array in the API response.

## displayOrderResp
+ title: `Highlights` (string) - Title for the display information. 
+ desc: `Family friendly. Multiple departure times and locations available. Flexibility to customize your itinerary to your own preferences.` (string) - Display text. 

## vouchersOrderResp
+ voucher (voucherInfoOrderResp) - Contains information about the voucher that is provided for the activity. Note: If you do not provide this field, at the time of order creation, then the `voucher` object is not returned in the API response. 

## voucherInfoOrderResp
+ type: `Evoucher` (enum) - Type of voucher. Note: If you do not provide this field, at the time of order creation, then the `type` field is not returned in the API response.
    + Evoucher
    + IdOnly 
    + PaperOnly
+ desc: `You can present either a paper or an electronic voucher for this activity.` (string) - Description of the voucher. Note: If you do not provide this field, at the time of order creation, then the `desc` field is not returned in the API response.  

## policiesOrderResp
+ policies (array [policiesInfoOrderResp], fixed-type) - Contains the list of information about the applicable policies for the activity. Note: If you do not provide this field, at the time of order creation, then the `policies` array is not returned in the API response. 

## policiesInfoOrderResp
+ type: `General` - Type of policy. Note: If you do not provide this field, at the time of order creation,then the `type` field is not returned in the API response. 
+ desc: `For a full refund, cancel at least 24 hours in advance of the start date of the experience.` - Textual description of the policy. Note: If you do not provide this field, at the time of order creation, then the `desc` field is not returned in the API response.

## reviewsOrderResp
+ reviews (array[reviewInfoOrderResp], fixed-type) - Contains the list of reviews, given by other customers, for the activity. Note: If you do not provide this field, at the time of order creation, then the `reviews` array is returned as an empty array in the API response.

## reviewInfoOrderResp
+ desc: `It was an amazing experience with exceptional travel arrangements.` - Description of the review. Note: If you do not provide this field, at the time of order creation, then the `desc` field is not returned in the API response. 
+ rating: 5.0 (number) - Rating (1-5) for the activity, as provided by the reviewer. Note: If you do not provide this field, at the time of order creation, then the `rating` field value is set to `0`. Format: Decimal
+ date: `2018-12-08T10:20` - Date when the review was submitted. Note: If you do not provide this field, at the time of order creation, then the `date` field is set to `0001-01-01T00:00:00`. Format: YYYY-MM-DD or YYYY-MM-DDTHH:MM:SS
+ userInfo: `John Doe` - Name of the reviewer. Note: If you do not provide this field, at the time of order creation, then the `userInfo` field is not returned in the API response. 
+ language: `en` - Language in which the review was submitted. Note: If you do not provide this field, at the time of order creation, then the `language` field is not returned in the API response.   
+ title: `Mr` (enum) - Title before the name. Note: If you do not provide this field, at the time of order creation, then the `title` field is not returned in the API response.  
  + Mr
  + Madam
  + Master
  + Miss
  + Mrs
  + Ms
  + Mx

## reviewCountOrderResp
+ reviewCount: 25 (number) - Number of reviews provided for the activity. Note: If you do not provide this field, at the time of order creation, then the `reviewCount` field value is returned as `0`.

## ratingOrderResp
+ rating: 4.5 (number) - Overall rating (1-5) for the activity.  Note: If you do not provide this field, at the time of order creation, then the `rating` field value is returned as `0`. Format: Decimal

## maxPassengerCountOrderResp
+ maxPassengerCount: 3  (number) - Indicates the maximum number of travelers allowed to participate in this activity. Note: If you do not provide this field, at the time of order creation, then the `maxPassengerCount` field value is returned as `0`. Format: Decimal 

## offersOrderResp
+ offers (array[offerInfoOrderResp], fixed-type) - Contains details about supplier-specific promotional offers. Note: If you do not provide this field, at the time of order creation, then the `offers` array is returned as an empty array in the API response.

## offerInfoOrderResp
+ format: `Text` (enum) - Indicates the format in which the offer is provided by the supplier. Note: If you do not provide this field, at the time of order creation, then the `format` field is returned as `Structured`.
    + Structured
    + Text   
+ desc: `10% off Tours & Activities` - Description of the promotional offer. Note: If you do not provide this field, at the time of order creation, then the `desc` field is not returned in the API response.  

## voucherDetailsOrderResp 
+ voucher (voucherInfoOrderResp) - Contains information about the voucher that is provided for the activity. Note: If you do not provide this field, at the time of order creation, then the `voucher` object is not returned in the API response. 

## policiesDetailsOrderResp
+ policies (array [policiesInfoOrderResp], fixed-type) - Contains the list of information about the applicable policies for the activity. Note: If you do not provide this field, at the time of order creation, then the `policies` array is not returned in the API response. 

## bookingRequirementsOrderResp
+ bookingRequirements (ReqInfoOrderResp) - Contains information about the booking requirements, such as the booking questions that the customer must answer at the time of booking and the list of credit cards that can be used to pay for the booking. Note: If you do not provide this field, at the time of order creation, then the `bookingRequirements` object is not returned in the API response. 

## ReqInfoOrderResp
+ include bookingQuestionsOrderResp
+ include allPaxRequiredOrderResp
+ include allowedCreditCardsOrderResp

## bookingQuestionsOrderResp
+ bookingQuestions (array[questionInfoOrderResp], fixed-type) - Contains the list of questions that is displayed to the customer at the time of booking. Note: If you do not provide this field, at the time of order creation, then the `bookingQuestions` array is returned as an empty array in the API response. 

## questionInfoOrderResp
+ question: `Please pick me up at` (string) - Contains the question that is displayed to the customer on the User Interface (UI) at the time of booking. Note: If you do not provide this field, at the time of order creation, then the `question` field is not returned in the API response. 
+ sampleAnswer: `Holiday Inn Anaheim- Resort Area` (string) - Sample answer that is displayed, as a reference, on the User Interface (UI). Note: If you do not provide this field, at the time of order creation, then the `sampleAnswer` field is not returned in the API response.
+ id: `19` (number) - Unique ID that is assigned to the question. Note: If you do not provide this field, at the time of order creation, then the `id` field value is returned as `0`.
+ isMandatory: true (boolean) - Indicates whether the question is mandatory for the customer at the time of booking. Note: If you do not provide this field, at the time of order creation, then the `mandatory` field is returned as `false`. 
+ sortOrder: `1` (number) - Indicates the order index used for displaying the question. Note: If you do not provide this field, at the time of order creation, then the `sortOrder` field value is returned as `0`.
+ questionCategory: `Pickup Location` (string) -  Contains the category to which this question belongs. Note: If you do not provide this field, at the time of order creation, then the `questionCategory` field is not returned in the API response.

## allPaxRequiredOrderResp
+ allPaxRequired: true (boolean) - If the `allPaxRequired` field returns `true`, then the information for all the travelers is required at the time of booking. Note: If you do not provide this field, at the time of order creation, then the `allPaxRequired` field is returned as `false`. 

## allowedCreditCardsOrderResp
+ allowedCreditCards: `VI`, `MC`, `AX` (array) - Contains the list of credit card types that are accepted at the time of booking. Note: If you do not provide this field, at the time of order creation, then the `allowedCreditCards` array is returned as an empty array in the API response.

## activityOptionOrderResp
+ option (optionOrderResp, required) - Contains information about the selected activity option, along with the details of the option, such as the option name, description, the fare for the activity option, available purchase options, and the applicable cancellation policy. 

## optionOrderResp
+ include optionIdOrderResp
+ include optionNameOrderResp
+ include optionDescOrderResp
+ include rateOrderResp
+ include cancellationPenaltiesOrderResp
+ include cancellationPolicyOptionsOrderResp
+ include isImmediateRefundNeededOrderResp 

## optionIdOrderResp
+ id: `TG1` (string) - Unique ID for the option provided by the supplier. Note: If you do not provide this field, at the time of order creation, then the `id` field is not returned in the API response.

## optionNameOrderResp
+ name: `1-Day Ticket` (string) - Name of the option. Note: If you do not provide this field, at the time of order creation, then the `name` field is not returned in the API response.

## optionDescOrderResp
+ desc: `1-Day Ticket` (string) - Description of the option. Note: If you do not provide this field, at the time of order creation, then the `desc` field is not returned in the API response.

## rateOrderResp
+ rate (rateInfoOrderResp) -  Contains information about the rate for the activity option, such as the rate ID, the fare (including fees, taxes, markup one, and discounts), and the available reward options. 

## rateInfoOrderResp
+ include rateIdOrderResp
+ include fareTypeOrderResp
+ include isRefundableOrderResp
+ include currencyDSFareOrderResp
+ include displayFareOptionsOrderResp
+ include paxTypeFareDetailsOrderResp
+ include purchaseOptionsOrderResp

## rateIdOrderResp
+ id: `NjEwZWM2NDctYTA1Zi00M2JmLWI2MmMtNGE4ZTY4OGJhYTZlLUFDTlhUJDQ2M3w1OTUyMVAxfFRHMXxmZjkzNzhkNy0wMDNhLTQ0N2MtODJlMi1lYjMzYmU2MmJhM2Q=` (string, required) - Unique ID for the rate. Note: If you do not provide this field, at the time of order creation, then the `id` field is not returned in the API response. 

## fareTypeOrderResp
+ fareType: `Negotiated` (enum) - Indicates the type of fare.  Note: If you do not provide this field, at the time of order creation, then the `fareType` field is not returned in the API response.
  + published_type
  + negotiated_type

## isRefundableOrderResp
+ isRefundable: true (boolean) - Indicates whether the fare is refundable. Note: If you do not provide this field, then the `isRefundable` field is returned as `false`.  

## currencyDSFareOrderResp
+ currency: `USD` - 3-character ISO code that indicates the currency in which monetary amounts are returned in the response. The API calculates the amount equivalents and returns the amounts in the currency specified. For example, if the `currency` field value is returned as `USD`, then the `baseFare`, `discount`, `taxes`, and other monetary amounts are returned in their `USD` amount equivalents. We support all ISO currencies Note: If you do not provide this field, at the time of order creation, then the `currency` field is not returned in the API response.

## displayFareOptionsOrderResp
+ displayFare (displayOpsOrderResp) - Contains information about the fare, along with the various breakup components that make up the fare for the activity. This fare is displayed to the customer on the User Interface (UI). Note: If you do not provide this field, at the time of order creation, then the `displayFare` object is not returned in the API response.

## displayOpsOrderResp
+ include totalFareOrderResp
+ include breakupFareOrderResp

## totalFareOrderResp
+ totalFare: `5.59` (number) - Contains the fare for the activity after considering the `breakup/baseFare`, `breakup/taxes`, `breakup/fees`, `breakup/discounts`, and `breakup/markups` amounts. Note: If you do not provide this field, at the time of order creation, then the `totalFare` field value is returned as `0`. Format: Decimal

## breakupFareOrderResp
+ breakUp (breakupFareInfoOrderResp) - Contains information about various breakup components that make up the `displayFare/totalFare`. Note: If you do not provide this field, at the time of order creation, then the `breakUp` object is not returned in the API response.

## breakupFareInfoOrderResp
+ baseFare: `4.40` (number) - Contains the base fare for the activity. 
Notes:
  + The `baseFare` amount does not include the discount, taxes, fees, markup one, or any other additional cost.
  + If you do not provide this field, at the time of order creation, then the `baseFare` field value is returned as `0`. Format: Decimal
+ include taxesOptionsOrderResp
+ include feesOptionsOrderResp
+ include discountsOptionsOrderResp
+ include markupsOptionsOrderResp

## taxesOptionsOrderResp
+ taxes (array [taxesInfoOrderResp], fixed-type) - Contains the list of all the applicable taxes for the activity. This amount is not included in the `breakup/baseFare` field. However, this amount is already included in the `displayFare/totalFare` field. Note: If you do not provide this field, at the time of order creation, then the `taxes` array is returned as an empty array in the API response.

## taxesInfoOrderResp
+ amount: `0.0` (number) - Tax amount. Note: If you do not provide this field, at the time of order creation, then the `amount` field value is returned as `0`. Format: Decimal
+ code: `LT` (string) - Unique code for the tax that is charged. Note: If you do not provide this field, at the time of order creation, then the `code` field is not returned in the API response.
+ desc: `Luxury tax` (string) - Description or additional information for the type of tax that is charged. Note: If you do not provide this field, at the time of order creation, then the `desc` field is not returned in the API response.

## feesOptionsOrderResp
+ fees (array [feesInfoOrderResp], fixed-type) - Contains the list of all the applicable fees for the activity. This amount is not included in the `breakup/baseFare` field. However, this amount is already included in the `displayFare/totalFare` field. Note: If you do not provide this field, at the time of order creation, then the `fees` array is returned as an empty array in the API response.

## feesInfoOrderResp
+ amount: `0` (number) - Fee amount. Note: If you do not provide this field, at the time of order creation, then the `amount` field value is set to `0`. Format: Decimal
+ desc: `Early check-in fee` (string) - Description or additional information for the type of fee that is charged. Note: If you do not provide this field, at the time of order creation, then the `desc` field is not returned in the API response.
+ source: `Supplier` (string) - Indicates whether the fee is charged by the supplier or the  Online Travel Agency (OTA system). Note: If you do not provide this field, at the time of order creation, then the `source` field is not returned in the API response.

## discountsOptionsOrderResp
+ discounts (array [discountsInfoOrderResp], fixed-type) - Contains the list of all the applicable discounts for the activity. This amount is not included in the `breakup/baseFare` field. However, this amount is already included in the `displayFare/totalFare` field. Note: If you do not provide this field, at the time of order creation, then the `discounts` array is returned as an empty array in the API response.

## discountsInfoOrderResp
+ amount: `0.0` (number) - Discount amount. Note: If you do not provide this field, at the time of order creation, then the `amount` field value is returned as `0`. Format: Decimal 
+ desc: `Low season discount` (string) - Description or additional information for the discount that is offered. Note: If you do not provide this field, at the time of order creation, then the `desc` field is not returned in the API response.
+ source: `supplier` (string) - Indicates whether the discount is provided by the supplier or the  Online Travel Agency (OTA system). Note: If you do not provide this field, at the time of order creation, then the `source` field is not returned in the API response.

## markupsOptionsOrderResp
+ markups (array [markupsInfoOrderResp], fixed-type) - Contains the list of applicable markup one for the fare.  This amount is not included in the `breakup/baseFare` field. Note: If you do not provide this field, at the time of order creation, then the `markups` array is returned as an empty array in the API response.

## markupsInfoOrderResp
+ amount: `1.19` (number) - markup two (MUP) amount.  If you do not provide this field, at the time of order creation, then the `amount` field value is returned as `0`. Format: Decimal
+ desc: `agency` - Description or additional information for the markup three. Note: If you do not provide this field, at the time of order creation, then the `desc` field is not returned in the API response. 
+ source: `Agency` - Indicates the source that has applied the markup three. Note: If you do not provide this field, at the time of order creation, then the `source` field is not returned in the API response.

## paxTypeFareDetailsOrderResp
+ paxTypeFareDetails (array [paxTypeFareInfoOrderResp], fixed-type) - Contains the fare details and fare breakup of each traveler for whom this activity is booked. 

## paxTypeFareInfoOrderResp
+ type: `Adult` (enum) - Type of traveler. 
  + Adult
  + Child 
  + Infant 
  + Senior 
  + Youth
+ minQty: 1 (number) - Minimum number of travelers allowed to book the activity.  
+ maxQty: 9 (number) - Maximum number of travelers allowed to book the activity. 
+ pricingType: `Individual` (enum) - Indicates the type of pricing offered to the traveler for this activity. If the `pricingType` is `Indiviual`, it means that the fare for this activity is a per individual fare. If the `pricingType` is `Group`, it means that the fare for this activity is a group fare. 
  + Individual 
  + Group 
+ fare (paxTypeFareOrderResp) - Contains information about the fare, along with the various breakup components that make up the fare for the activity. 

## paxTypeFareOrderResp
+ currency: `USD` - 3-character ISO code that indicates the currency in which monetary amounts are returned in the response. The API calculates the amount equivalents and returns the amounts in the currency specified. For example, if the `currency` field value is set to `USD`, then the `baseFare`, `discount`, `taxes`, and other monetary amounts are returned in their `USD` amount equivalents. We support all ISO currencies 
+ totalFare: 2.72 (number) - Contains the fare for the activity after considering the `breakup/baseFare`, `breakup/taxes`, `breakup/fees`, `breakup/discounts`, and `breakup/markups` amounts. Format: Decimal
+ breakup (breakupPaxTypeFareOrderResp) - Contains information about various breakup components that make up the `fare/totalFare`.

## breakupPaxTypeFareOrderResp
+ baseFare: `4.40` (number)- Contains the base fare for the activity. Note: The `baseFare` amount does not include the discount, taxes, fees, markup one, or any other additional cost. Format: Decimal
+ taxes (array [taxesInfoOrderResp], fixed-type) - Contains the list of all the applicable taxes for the activity. This amount is not included in the `breakup/baseFare` field. However, this amount is already included in the `fare/totalFare` field.
+ fees (array [feesInfoOrderResp], fixed-type) - Contains the list of all the applicable fees for the activity. This amount is not included in the `breakup/baseFare` field. However, this amount is already included in the `fare/totalFare` field.
+ discounts (array [discountsInfoOrderResp], fixed-type) - Contains the list of all the applicable discounts for the activity. This amount is not included in the `breakup/baseFare` field. However, this amount is already included in the `fare/totalFare` field.
+ markups (array [markupsInfoOrderResp], fixed-type) - Contains the list of applicable markup one for the fare.  This amount is not included in the `breakup/baseFare` field.

## purchaseOptionsOrderResp
+ purchaseOption (purchaseOptionInfoOrderResp) - Contains information about the different reward options that the customer can avail to pay for the activity booking. Note: If you do not provide this field, at the time of order creation, then the `purchaseOption` object is not returned in the API response.   

## purchaseOptionInfoOrderResp 
+ include totalPurchaseUnitsOrderResp 
+ include cashCurrencyOrderResp
+ include pointsCurrencyOrderResp
+ include rewardsOrderResp 

## totalPurchaseUnitsOrderResp
+ totalPurchaseUnits: `1` (number) - Total number of rewards that the customer can avail to pay for the activity booking. Note: If you do not provide this field, at the time of order creation, then the `totalPurchaseUnits` field value is returned as `0`.   

## cashCurrencyOrderResp
+  cashCurrency: `USD` - 3-character ISO code that indicates the currency in which the cash amount is returned in the `cash` field.   Note: If you do not provide this field, at the time of order creation, then the `cashCurrency` field is not returned in the API response.

## pointsCurrencyOrderResp
+ pointsCurrency: `Points` - Indicates the currency that is associated with the loyalty program. For example, points and miles. Note that the `points` field value is represented by this currency. Note: If you do not provide this field, then the `pointsCurrency` field is not returned in the API response. 

## rewardsOrderResp 
+ rewards (array[rewardInfoOrderResp], fixed-type) - Contains the list of reward options that the customer can avail to make the activity booking. Note: If you do not provide this field, at the time of order creation, then the `rewards` array is returned as an empty array in the API response. 

## rewardInfoOrderResp
+ id: `1482|1` - Unique ID for the reward. Note: If you do not provide this field, at the time of order creation, then the `id` field is not returned in the API response. 
+ name: `Activity Reward` - Name of the reward. Note: If you do not provide this field, at the time of order creation, then the `name` field is not returned in the API response. 
+ rank: `10` - Rank assigned to the reward. This can be used to display the reward options on the User Interface (UI), based on the reward ranking. Note: If you do not provide this field, at the time of order creation, then the `rank` field is not returned in the API response.
+ type: `Variable_TieredVariable_LAPF_HybridFTP` (enum) - Type of reward.   Note: If you do not provide this field, at the time of order creation, then the `type` field is not returned in the API response.
  + Dollars_Off_Incremental
  + Dollars_Off
  + FixedTicketPrice_TieredFTP
  + Purchase
  + Variable_TieredVariable_LAPF_HybridFTP
+ recommendation (recommendationInfoOrderResp) - Contains information about the recommended combination of cash and points that can used to pay for the booking. The recommendation is calculated based on the type of reward, customer's point balance, and the customer's eligibility information. Note: If you do not provide this field, at the time of order creation, then the `recommendation` object is not returned in the API response.
+ isEligible: true (boolean) - Indicates whether the customer is eligible to use this reward based on the customer's point balance. If the `isEligible` field returns `false`, this means that the customer is not eligible to use the reward. Note: If you do not provide this field, at the time of order creation, then the `isEligible` field is set to `false`. 
+ ruleSet (ruleSetInfoOrderResp) - Contains information about the rules based on which the `minimum` and `maximum` points that the customer can redeem is calculated. Note: If you do not provide this field, at the time of order creation, then the `ruleSet` object is not returned in the API response.
+ strikeoutValue (strikeoutValueInfoOrderResp) - Contains the pre-discounted fare for the activity in cash, points, or a combination of cash and points based on the type of reward. Note that this is a pre-discounted fare that appears striked-out to the customer on the User Interface (UI). Note: If you do not provide this field, at the time of order creation, then the `strikeoutValue` object is not returned in the API response.
+ actualValue (actualValueInfoOrderResp) - Contains the actual fare for the activity in cash, points, or a combination of cash and points based on the type of reward. Note: If you do not provide this field, at the time of order creation, then the `actualValue` object is not returned in the API response. 
+ stateBag (array [stateBagInfoOrderResp], fixed-type) - For internal use only. 

## recommendationInfoOrderResp
+ cash: `0.0` (number) - Recommended cash component of the actual fare that can be paid to book the activity. Note: If you do not provide this field, at the time of order creation, then the `cash` field value is returned as `0`. Format: Decimal   
+ points: `1000.0` (number) - Recommended number of points that can be redeemed by the customer in the `pointsCurrency`. Note: If you do not provide this field, at the time of order creation, then the `points` field value is returned as `0`. Format: Decimal
+ fee (feeRecommendationOrderResp) - Contains information about the applicable fee that the customer must pay when this reward option (rewards[]/id field) is used. Note: If you do not provide this field, at the time of order creation, then the `fee` object is not returned in the API response.
+ maxQuantity: `1` (number) - Maximum number of times that this reward can be used to make payment for the booking, based on the customer's point balance. Note: If you do not provide this field, at the time of order creation, then the `maxQuantity` field value is set to `0`.

## feeRecommendationOrderResp
+ cash: `0.0` (number) - Cash component of the fee amount. Note: If you do not provide this field, at the time of order creation, then the `cash` field value is returned as `0`.  Format: Decimal   
+ points: `0.0` (number) - Points component of the fee amount in the `pointsCurrency`. Note: If you do not provide this field, at the time of order creation, then the `points` field value is returned as `0`. Format: Decimal 
+ description: `fees` - Description of the fee. Note: If you do not provide this field, at the time of order creation, then the `description` field is not returned in the API response.

## ruleSetInfoOrderResp
+ minimumPoints: `1000.0` (number) - Minimum points that the customer must redeem to use this reward option. Note: If you do not provide this field, at the time of order creation, then the `minimumPoints` field value is returned as `0`. Format: Decimal
+ maximumPoints: `1000.0` (number) - Maximum points that the customer can redeem to use this reward option. Note: If you do not provide this field, at the time of order creation, then the `maximumPoints` field value is returned as `0`. Format: Decimal
+ pointToCashFactor (pointToCashFactorInfoOrderResp) - Contains information about the conversion factor that is used to convert points to cash in case of a variable reward. Note: If you do not provide this field, at the time of order creation, then the `pointToCashFactor` object is not returned in the API response. 
+ cashRoundingOff: `0.0` (number) - Amount of cash that is deducted from the `displayFare/totalFare` and redeemed against the equivalent number of points from the customer’s point balance in case of dollar off reward and dollar off increemental reward. Note: If you do not provide this field, at the time of order creation, then the `cashRoundingOff` field value is returned as `0`. Format: Decimal
+ pointStepSize: `1.0` (number) - Minimum quantity by which the customer can increase or decrease the number of points in case of a variable reward. Note: If you do not provide this field, at the time of order creation, then the `pointStepSize` field value is returned as `0`. Format: Decimal
+ roundingType: `None` (enum) - Indicates the rounding type that is used for rounding the points value. Note: If you do not provide this field, at the time of order creation, then the `roundingType` field is not returned in the API response.
  + Up
  + Down
  + Natural
  + None
             
## pointToCashFactorInfoOrderResp
+ value: `0.0100000` (number) - Indicates the conversion factor value that is used to calculate the cash equivalent in the `cashCurrency` for specific number of points. Consider a scenario where the `cashCurrency` is `USD` and you want to calculate the cash equivalent for `10000` points. If the conversion factor value is `0.01` and the `operator` is `Multiply`, then the cash equivalent for `10000` points will be `$100`. Note: If you do not provide this field, at the time of order creation, then the `value` field value is returned as `0`. Format: Decimal
+ conversionOperator: `Multiply` (enum) - Arithmetic operator applied to calculate the points to cash conversion. Note: If you do not provide this field, at the time of order creation, then the `conversionOperator` field is not returned in the API response. 
  + Multiply
  + Divide
  + Subtract
  + Add

## strikeoutValueInfoOrderResp
+ cash: `0.0` (number) - Cash component of the pre-discounted fare amount. Note: If you do not provide this field, at the time of order creation, then the `cash` field value is returned as `0`.  Format: Decimal
+ points: `0.0` (number) - Points component of the pre-discounted fare amount in the `pointsCurrency`. Note: If you do not provide this field, at the time of order creation, then the `points` field value is returned as `0`. Format: Decimal

## actualValueInfoOrderResp
+ cash: `0.0` (number) - Cash component of the actual fare amount. Note: If you do not provide this field, at the time of order creation, then the `cash` field value is returned as `0`. Format: Decimal
+ points: `1000.0` (number) - Points component of the actual fare amount in the `pointsCurrency`. Note: If you do not provide this field, at the time of order creation, then the `points` field value is returned as `0`. Format: Decimal

## stateBagInfoOrderResp
+ key: `Discount` (string) - For internal use only.
+ value: 20.00 (number) - For internal use only. 

## cancellationPenaltiesOrderResp
+ cancellationPenalties (array [cancellationPenaltiesInfoOrderResp], fixed-type) -  Contains the information about the list of applicable cancellation penalties, including information such as the window determining the penalty period and the penalties incurred for the cancellation. Note: If you do not provide this field, at the time of order creation, then the `cancellationPenalties` array is not returned in the API response. 

## cancellationPenaltiesInfoOrderResp
+ text: `Cancellations received within three (3) days of activity date will be subject to a supplier cancellation fee equal to the total activity cost. Theater tickets, theme-park passes, and select sightseeing tours are completely non-refundable once booked.  No shows are non-refundable.Please refer to the Terms and Conditions for more information.` - Textual description of the cancellation policy. Note: If you do not provide this field, at the time of order creation, then the `text` field is not returned in the API response. 
+ penalty (penaltyDetailsOrderResp) - Contains information related to the penalty, such as the start and end window and the penalty value. Note: If you do not provide this field, at the time of order creation, then the `penalty` object is not returned in the API response. 
+ window (windowInfoOrderResp) - Window during which the penalty is applicable. Note: If you do not provide this field, at the time of order creation, then the `window` object is not returned in the API response. 

## penaltyDetailsOrderResp
+ value: 100.0 (number) - If the cancellation is made within the given cancellation window, this field indicates the value of the penalty for the cancellation. For example, if this field returns `100` and the `valueType` field returns `Percent`, this means that a `100%` cancellation fee is applicable. Consider another scenario where the penalty of $100 is levied for the cancellation. In this case, the `value` field returns `100` and the `valueType` field returns `Fixed`. Note: If you do not provide this field, at the time of order creation, then the `value` field value is returned as `0`. Format: Decimal
+ valueType: `Percent` (enum) - Indicates the type of penalty value. The penalty can either be a fixed amount or a percentage of the total fare of the activity. For example, if the `value` field returns `100` and the `valueType` field returns `Percent`, this means that the cancellation penalty calculated is `100%` of the total fare. Consider another scenario where a penalty of $100 is levied for the cancellation. In this case, the `value` field returns `100` and the `valueType` field returns `Fixed`. This means that the cancellation penalty of `$100` is deducted from the total fare. Note: If you do not provide this field, at the time of order creation, then the `valueType` field is not returned in the API response.  
    + Fixed 
    + Percent
+ estimatedValue: `2.79` (number) - Approximate cancellation penalty amount calculated based on the value returned in the `value` and the `valueType` fields. For example, if the `valueType` field returns `Percent` and the `value` field returns `50`, then the estimateValue for cancellation penalty is calculated to be 50% of the total fare. Consider another scenario where the `value` field returns `100` and the `valueType` field returns `Fixed`, then the `estimatedValue` for cancellation penalty is `$100`. Note: If you do not provide this field, at the time of order creation, then the `estimatedValue` field value is returned as `0`. Format: Decimal

## cancellationPolicyOptionsOrderResp
+ cancellationPolicy (penaltiesOrderResp) - Contains the information about the cancellation policy and the list of applicable cancellation penalties, including information such as the window determining the penalty period and the penalties incurred for the cancellation. Note: If you do not provide this field, at the time of order creation, then the `cancellationPolicy` object is not returned in the API response. 

## penaltiesOrderResp 
+ text: `Cancellations received within three (3) days of activity date will be subject to a supplier cancellation fee equal to the total activity cost. Theater tickets, theme-park passes, and select sightseeing tours are completely non-refundable once booked.  No shows are non-refundable.Please refer to the Terms and Conditions for more information.` - Textual description of the cancellation penalty. Note: If you do not provide this field, at the time of order creation, then the `text` field is not returned in the API response.
+ penaltyRules (array [penaltyRulesOrderResp], fixed-type) - Contains the list of information related to the penalty, such as the start and end window and the penalty value. Note: If you do not provide this field, at the time of order creation, then the `penaltyRules` array is not returned in the API response. 

## penaltyRulesOrderResp
+ include penaltyDetailsOrderResp
+ window (windowInfoOrderResp) - Window during which the penalty is applicable. Note: If you do not provide this field, at the time of order creation, then the `window` object is not returned in the API response. 

## windowInfoOrderResp
+ start: `2019-06-13T00:00:00` - Start date and time for the window. Note: If you do not provide this field, at the time of order creation, then the `date` field is returned as `0001-01-01T00:00:00`. Format: YYYY-MM-DD or YYYY-MM-DDTHH:MM:SS  
+ end: `2019-06-15T00:00:00` - End date and time for the window. Note: If you do not provide this field, at the time of order creation, then the `date` field is returned as `0001-01-01T00:00:00`. Format: YYYY-MM-DD or YYYY-MM-DDTHH:MM:SS  

## isImmediateRefundNeededOrderResp
+ isImmediateRefundNeeded: true (boolean) - Indicates whether refund must be processed immediately on cancellation or not. If `isImmediateRefundNeeded` returns as `true`, this means that refund must be processed immediately on cancellation. Note: If you do not provide this field, at the time of order creation, then the `isImmediateRefundNeeded` field is returned as `false`.  

## bookingInfoOrderResp
+ bookingInfo (bookingInfoSummaryOrderResp) - Contains information about the booking details which includes the selected payment options, the traveler or passenger information, and the contact information of the person who is making the booking. Note: If you do not provide this field, at the time of order creation, then the `bookingInfo` object is not returned in the API response.     

## bookingInfoSummaryOrderResp
+ include passengersOrderResp
+ include bookingContactOrderResp
+ include selectedPaymentOptionsOrderResp
+ include specialRequestOrderResp
+ include questionAnswersOrderResp
+ include reportingFieldsBookingInfoOrderResp

## passengersOrderResp
+ passengers (array [passengerInfoOrderResp], fixed-type) - Contains the list of information of travelers for whom the customer wants to book the activity option.

## passengerInfoOrderResp
+ include passengerTypeOrderResp
+ include passengerNameOrderResp
+ include agePassengerOrderResp

## passengerTypeOrderResp
+ type: `Adult` (enum, required) - Type of traveler.
    + Adult
    + Child
    + Infant
    + Senior
    + Youth
    + Unknown

## passengerNameOrderResp
+ name (namePassengerOrderResp) - Contains information about the name of the traveler.

## namePassengerOrderResp
+ first: `John` (string, required) - First name.
+ last: `Doe` (string, required) - Last name.
+ middle: `Jerry` - Middle name.
+ title: `Mr` (enum) - Title before the name.
  + Mr
  + Madam
  + Master
  + Miss
  + Mrs
  + Ms
  + Mx
+ suffix: `Jr` - Suffix that follows the name.

## agePassengerOrderResp
+ age: 35 (number) - Age of traveler. The age must be provided for a child traveler. Note: If you do not provide this field, at the time of order creation, then the `age` field value is returned as `0`.

## bookingContactOrderResp
+ bookingContact (bookingContactInfoOrderResp, required) - Contains information about the name of the person who is making the booking.

## bookingContactInfoOrderResp
+ include nameBookContactOrderResp 
+ include ageBookingContactOrderResp 
+ include contactInfoBookContactOrderResp

## nameBookContactOrderResp  
+ name (nameBookingContactOrderResp, required) - Contains information about the name of the person who is making the booking.

## nameBookingContactOrderResp
+ first: `John` (string, required) - First name.
+ last: `Doe` (string, required) - Last name.
+ middle: `Jerry` - Middle name.
+ title: `Mr` (enum, required) - Title before the name.
  + Mr
  + Madam
  + Master
  + Miss
  + Mrs
  + Ms
  + Mx
+ suffix: `Jr` - Suffix that follows the name.

## ageBookingContactOrderResp 
+ age: 35 (number) - Age of the person who is making the booking. 

## contactInfoBookContactOrderResp 
+ contactInfo (contactDetailsOrderResp, required) - Contains the contact information of the person who is making the booking. Note: If you do not provide this field, at the time of order creation, then the `contactInfo` object is not returned in the API response.

## contactDetailsOrderResp 
+ phone (phoneBookContactOrderResp, required) - Contains the contact number of the person who is making the booking. Note: If you do not provide this field, at the time of order creation, then the `phone` object is not returned in the API response.
+ address (addressBookContactOrderResp ) -  Contains information about the address of the person who is making the booking. Note: If you do not provide this field, at the time of order creation, then the `address` object is not returned in the API response.
+ email: `abc@xyz.com` (string, required) - Email address (recipient ID) that must be used when any email communication needs to be made with the person who is making the booking. Note: If you do not provide this field, at the time of order creation, then the `email` field is not returned in the API response.  

## phoneBookContactOrderResp 
+ type: `Work` (enum) - Type of phone number or contact number.
  + Fax
  + Home
  + Mobile
  + Work
  + Unknown
+ number: `555-0173` (string)  - Phone number.
+ countryCode: `1` - Country code for the phone number.
+ ext: `123` - Extension number where the contact can be reached.
+ areaCode: 200 - Area code for the phone number.

## addressBookContactOrderResp 
+ line1: `3077 ACME Street` (string) - Street number and street name.
+ line2: `Landmark: Beside the ACME Shopping Mall` (string) - Additional information related to the address, such as landmark, apartment, suite, unit, and building information.
+ cityName: `San Francisco` (string) - Name of the city.
+ state (stateBookContactOrderResp) - Contains information about the state.  
+ countryCode: `US` (string) - 2-character ISO code of the country.  
+ postalCode: `94133` (string)- Postal code. In various countries, postal code is also known as postcode, post code, Eircode, PIN Code, or ZIP Code.

## stateBookContactOrderResp
+ code: `CA` (string) - 2-character state code.
+ name: `California` (string) - Name of the state.

## selectedPaymentOptionsOrderResp
+ selectedPaymentOptions (array[selectedPaymentOptionInfoOrderResp], fixed-type) - Contains the list of selected payment options that the customer wants to avail to pay for the activity. 
Note: Either the amount in cash, points, or a combination of both the amount in cash and points is returned within the `/selectedPaymentOptions` array.   

## selectedPaymentOptionInfoOrderResp
+ rewardId: `5256|5` (string) - Unique ID for the reward that is availed to pay for the activity.
+ cash (cashBookInfoOrderResp) - Contains information about the amount in cash that the customer must pay to book the activity. Note: If you do not provide this field, at the time of order creation, then the `cash` object is not returned in the API response.
+ points (pointsBookInfoOrderResp) - Contains information about the number of points that the customer must redeem to book the activity. Note: If you do not provide this field, at the time of order creation, then the `points` object is not returned in the API response.

## cashBookInfoOrderResp
+ amount: 100.00 (number) - Cash component of the actual fare that the customer must pay to book the activity. Note: If you do not provide this field, at the time of order creation, then the `amount` field value is returned as `0`. Format: Decimal
+ paymentMode: `Card` (enum) - Indicates the mode of payment for the `cash/amount`.
  + Cash
  + Card

## pointsBookInfoOrderResp
+ value: 2000 (number) - Number of points that the customer must redeem to book the activity. Note: If you do not provide this field, at the time of order creation, then the `value` field value is returned as `0`. Format: Decimal
+ unit: `points` (string) - Indicates the currency that is associated with the loyalty program. For example, points and miles.

## specialRequestOrderResp
+ specialRequest: `Wheelchair assistance is needed at the time of drop-off.` (string) - Description of the special request. Note: If you do not provide this field, at the time of order creation, then the `specialRequest` field is not returned in the API response.  

## questionAnswersOrderResp
+ questionAnswers (array [questionAnsInfoOrderResp], fixed-type) - Contains the list of questions that are answered at the time of booking. 

## questionAnsInfoOrderResp 
+ questionId: 19 (string) - Unique ID for the question. 
+ answer: `Yes` (string) - Response to the question.

## reportingFieldsBookingInfoOrderResp
+ reportingFields (reportingFieldsBookingInfo) - Contains the fields that can be used for any business-related purposes, such as to pass the booking token for reporting purpose. 
Notes:
  + You can only pass up to ten custom fields.
  + If you do not provide this field, at the time of order creation, then the `reportingFields` field is not returned in the API response.

## paymentMethodsOrderResp
+ paymentMethods (array [paymentMethodDetailsOrderResp], fixed-type) - Contains the list of payment methods used to pay for the booking. We support payments made by cash and credit card.  
Note: If you do not provide this field, at the time of order creation, then the `paymentMethods` array is not returned in the API response. To update a new payment method, you must call the `Set Payment Methods` API.

## paymentMethodDetailsOrderResp
+ type: `Card` (enum, required)- Indicates the mode of payment. Notes: If the `/paymentMethods[]/type` returns as `Card`, then the card details are returned within the `/paymentMethods[]/card` object.  If the `/paymentMethods[]/type` returns as `Cash`, then the `/paymentMethods[]/card` object is optional.  
  + Card 
  + Cash
+ source: `Customer` (enum) - Indicates the source of payment. Note: If you do not provide this field, at the time of order creation, then the `source` field is not returned in the API response.  
  + Customer 
  + Supplier
+ currency: `USD` (string) - 3-character ISO code that indicates the currency in which the payment is made for the activity booking. Note: If you do not provide this field, at the time of order creation, then the `currency` field is not returned in the API response. 
+ card (cardInfoSupplierOrderResp) - Contains information about the credit card that is used make the payment for the booking to the supplier. This credit card information is used to pay the `cash/amount` specified within the `selectedPaymentOptions` array. Note: If you do not provide this field, at the time of order creation, then the `card` object is not returned in the API response. 

## cardInfoSupplierOrderResp 
+ token: `skfwefh$@fkew0fwy32ryr$#8ffjn3` (string) - For internal use only. 
+ number: `444433******1111` (string) - Credit card number used for the payment. Note that the credit card number must be at least 12 digits.
+ holderName: `John Doe` (string) - Name on the credit card that is used for the payment.
+ cvv: `***` (string) - Three or four-digit card verification value (CVV) or card security code (CSC). Note: The `cvv` value is returned as `***` as the API does not store the value. 
+ issuedBy: `AX` (enum) - Card issuer. 
  + VI
  + CA
  + AX
  + DS
  + TO 
  + DC
  + S
  + JC
  + BC
  + T
  + R 
  + E
+ expiry (expiryInfoOrderResp) - Contains the credit card expiration details.
+ contactInfo (cardcontactSupplierInfoOrderResp) - Contains the contact information for the cardholder. Note: If you do not provide this field, at the time of order creation, then the `contactInfo` object is not returned in the API response.  

## expiryInfoOrderResp
+ month: 12 (number, required) - Expiration month of the credit card. Note that the value of `month` must be between `1` and `12`.
+ year: 2023 (number, required) - Expiration year of the credit card.

## cardcontactSupplierInfoOrderResp
+ email: `abc@xyz.com` (string) - Email address (recipient ID) that must be used when any email communication needs to be made with the cardholder. Note: If you do not provide this field, at the time of order creation, then the `email` field is not returned in the API response.
+ billingAddress (addressBookContactOrderResp) - Contains information about the billing address of the cardholder. Note: If you do not provide this field, at the time of order creation, then the `billingAddress` object is not returned in the API response. 
+ phone (phoneBookInfoOrderResp) - Contains the contact number of the cardholder. Note: If you do not provide this field, at the time of order creation, then the `phone` object is not returned in the API response. 

## addressOrderResp
+ line1: `3077 ACME Street` (string) - Add text
+ line2: `Landmark: Beside the ACME Shopping Mall` (string) - Add text
+ cityName: `San Francisco` (string, required) - Add text
+ state (stateBookContactOrderResp) - Add text 
+ countryCode: `US` (string, required) - Add text
+ postalCode: `94133` (string)- Add text

## phoneBookInfoOrderResp
+ type: `Work` (enum) - Type of phone number or contact number.
  + Fax
  + Home
  + Mobile
  + Work
  + Unknown
+ number: `555-0173` (string)  - Phone number.
+ countryCode: `1` - Country code for the phone number.

## confirmationDetailsOrderResp 
+ confirmationDetails (confirmationInfoOrderResp) - Contains the confirmation details of the activity booking. Note: If you do not provide this field, then the `confirmationDetails` object is not returned in the API response.

## confirmationInfoOrderResp 
+ bookingTimestamp: `{dateTime|YYYY-MM-DDTHH:mm:ssZ|0 0}` (string) - Date and time when the activity booking is completed. Note: If you do not provide this field, at the time of order creation, then the `bookingTimestamp` field value is returned as `0001-01-01T00:00:00Z`. Format: YYYY-MM-DDTHH:MM:SSZ  
+ include supplierConfirmationNumberOrderResp
+ include cancellationTokenOrderResp
+ alternateConfirmationDetails (array [alternateConfirmationInfo], fixed-type) - Contains the confirmation details of the activity booking from the supplier. Note: If you do not provide this field, at the time of order creation, then the `alternateConfirmationDetails` array is not returned in the API response.
+ errors (array [errorsOrderResp], fixed-type) - Contains the list of errors that occur during the booking process. For example, if the  booking fails, the `errors` array lists the appropriate error messages. Note: If you do not provide this field, at the time of order creation, then the `errors` object is not returned in the API response.
+ warnings (array [warningsOrderResp], fixed-type) - Contains the list of warnings that appear during the booking process. Note: If you do not provide this field, at the time of order creation, then the `warnings` object is not returned in the API response.

## supplierConfirmationNumberOrderResp
+ supplierConfirmationNumber: `309755104` (string, nullable) - Supplier confirmation number for the booking. Note: If you do not provide this field, at the time of order creation, then the `supplierConfirmationNumber` field is not returned in the API response.

## cancellationTokenOrderResp
+ cancellationToken: null (string, nullable) - Cancellation token received from the supplier that is required to cancel the activity booking. Note: If you do not provide this field, at the time of order creation, then the `cancellationToken` field is not returned in the API response.

## errorsOrderResp
+ code: `3434` (string)- Code for the error.  
+ message: `Error: Could not process the request due to network connectivity issues. Please try again.` (string) - Error message text.  

## warningsOrderResp
+ code: `4313` (string) - Code for the warning.
+ message: `Warning: Due to heavy traffic, the processing might take longer than expected.` (string) - Warning message text.

## cancellationDetailsOrderResp
+ cancellationDetails (cancellationInfoOrderResp) - Contains the cancellation details of the activity booking. Note: If you do not provide this field, at the time of order creation, then the `cancellationDetails` object is not returned in the API response.

## cancellationInfoOrderResp 
+ cancellationTimestamp: `{dateTime|YYYY-MM-DDTHH:mm:ssZ|0 0}` (string) - Date and time when the activity booking is canceled. Note: If you do not provide this field, at the time of order creation, then the `cancellationTimestamp` field value is returned as `0001-01-01T00:00:00Z`. Format: YYYY-MM-DDTHH:MM:SSZ    
+ include supplierCancellationNumberOrderResp
+ errors (array [errorsOrderResp], fixed-type) - Contains the list of errors that occur during the cancellation process. For example, if the  cancellation fails, the `errors` array lists the appropriate error messages. Note: If you do not provide this field, at the time of order creation, then the `errors` object is not returned in the API response.
+ warnings (array [warningsOrderResp], fixed-type) - Contains the list of warnings that appear during the cancellation process. Note: If you do not provide this field, at the time of order creation, then the `warnings` object is not returned in the API response.

## supplierCancellationNumberOrderResp
+ supplierCancellationNumber: `309755104` (string, nullable) - Supplier cancellation number for the booking. Note: If you do not provide this field, at the time of order creation, then the `supplierCancellationNumber` field is not returned in the API response.

## reportingFieldOrderResp
+ reportingFields (reportingFieldsInfoOrderResp) - Contains the reporting fields that can be used for any business-related purposes, such as to pass the booking token for reporting purpose. Note: If you do not provide this field, at the time of order creation, then the `reportingFields` object is not returned in the API response. 

## reportingFieldsInfoOrderResp
+ field1: `fpkfm2212` - Indicates the value for field 1.  
+ field2: `Value2` - Indicates the value for field 2.
+ field3: `Value3` - Indicates the value for field 3.
+ field4: `Value4` - Indicates the value for field 4.
+ field5: `Value5` - Indicates the value for field 5.
+ field6: `Value6` - Indicates the value for field 6.
+ field7: `Value7` - Indicates the value for field 7.
+ field8: `Value8` - Indicates the value for field 8
+ field9: `Value9` - Indicates the value for field 9
+ field10: `Value10` - Indicates the value for field 10. 

## customerOrderResp
+ customer (customerAdditionalInfoOrderResp) - Contains information about the customer and the eligibility information of the customer for the loyalty program that the customer is associated with.

## customerAdditionalInfoOrderResp
+ id: `autoUser` (string, required) -  Unique ID for the customer.
+ name (customerAdditionalInfoName) - Contains information about the name of the customer.
+ phone (phoneBookInfoOrderResp) - Contains the contact number of the customer.
+ alternatePhone (phoneBookInfoOrderResp) - Contains the alternate contact number of the customer. Note: If you do not provide this field, at the time of order creation, then the `alternatePhone` object is not returned in the API response.
+ address (addressBookContactOrderResp) - Contains information about the address of the customer.
+ include reportingFieldOrderResp
+ extensionData (customerAdditonalInfoExtensionDataOrderResp) - Contains custom fields that you can use to pass data that is required to call external services. For example, API consumers can use `extensionData` object to pass data that is required to call external services. This helps to extend the API functionality without the need to create new API versions. Notes:  You can only pass data in up to ten custom fields – field1 to field10.  The data specified in the custom fields must be a JSON.  The data specified in the `extensionData` object is not stored in our database and is passed as is to the external services.  If you do not provide this field, at the time of order creation, then the `extensionData` object is not returned in the API response.     
 
## customerAdditonalInfoExtensionDataOrderResp
+ field1: `value1` - Indicates the value for field1. 
+ field2: `value2` - Indicates the value for field2.
+ field3: `value3` - Indicates the value for field3. 
+ field4: `value4` - Indicates the value for field4. 
+ field5: `value5` - Indicates the value for field5.
+ field6: `value6` - Indicates the value for field6.
+ field7: `value7` - Indicates the value for field7.
+ field8: `value8` - Indicates the value for field8.
+ field9: `value9` - Indicates the value for field9.
+ field10: `value10` - Indicates the value for field10.

## getOrderResponse
+ include orderStatusOrderResp
+ include createdOnDateOrderResp 
+ include lastUpdatedOnDateOrderResp
+ include sessionIdOrderResp
+ include orderIdOrderResp
+ include cartIdOrderResp 
+ include itemIdOrderResp 
+ include purchaseIdOrderResp
+ include searchTypeOrderResp
+ include searchRequestOrderResp 
+ include activityOrderResp 
+ include bookingInfoOrderResp
+ include paymentMethodsOrderResp
+ include confirmationDetailsOrderResp 
+ include cancellationDetailsOrderResp
+ include reportingFieldOrderResp 
+ include customerOrderResp

## confirmOrderReq
+ confirmationDetails (confirmationInfoReq, required) - Contains the confirmation details of the activity booking. 
+ include customerOrderReq

## confirmationInfoReq 
+ bookingTimestamp: `{dateTime|YYYY-MM-DDTHH:mm:ssZ|0 0}` (string) - Date and time when the activity booking is completed. Note: The `bookingTimestamp` field is optional only when the supplier returns error at the time of booking. In this case, you must specify the list of errors in the `errors` array. Format: YYYY-MM-DDTHH:MM:SSZ  
+ include supplierConfirmationNumberReq
+ include cancellationTokenReq
+ include alternateConfirmationDetails  
+ errors (array [errorsCancelOrderReq], fixed-type) - Contains the list of errors that occur during the booking process. For example, if the  booking fails, the `errors` array lists the appropriate error messages.
+ warnings (array [warningsCancelOrderReq], fixed-type) - Contains the list of warnings that appear during the booking process.

## alternateConfirmationDetails 
+ alternateConfirmationDetails (array [alternateConfirmationInfo], required, fixed-type) - Contains the confirmation details of the activity booking from the supplier. Note: The `id`, `name`, `type`, and `value` fields are optional only when the supplier returns error at the time of booking. In this case, you must specify the list of errors in the errors array.

## alternateConfirmationInfo
+ id: `SupplierVoucher` (string) - Unique ID for the confirmation details of the activity shared by the supplier.
+ name: `VoucherUrl` (string) - Name for the confirmation details. For example, if supplier shares the voucher URL for the activity booking, the name for the confirmation details can be `VoucherUrl`.  
+ type: `Supplier` - Indicates the provider of the confirmation details for the activity booking. 
+ value:`https://viatorapi.live.rc.viator.com/service/merchant/voucher.jspa?code=1008580324:a35f4fd9442a4f50fa37d97888ec1d9bc7fa9d4e2fc21b977676880d721084bb&embedResources=false` - Contains the voucher details for the activity booking shared by the supplier. For example, the voucher URL for the activity booking provided by the supplier. 

## supplierConfirmationNumberReq
+ supplierConfirmationNumber: `309755104` (string, nullable) - Supplier confirmation number for the booking. For every successful booking, the supplier confirmation number must be provided either in the `supplierConfirmationNumber` field in the `/confirmationDetails` object. Note: The `supplierConfirmationNumber` field is optional only when the supplier returns errors at the time of booking. In this case, you must specify the list of errors in the `errors` array.

## cancellationTokenReq
+ cancellationToken: null (string, nullable) - Cancellation token received from the supplier to cancel the activity booking. If returned by the supplier, you must provide the `cancellationToken` in the `/confirmationDetails` object.

## errorsCancelOrderReq
+ code: `3434` (string) - Code for the error.  
+ message: `Error: Could not process the request due to network connectivity issues. Please try again.` (string) - Error message text.  

## warningsCancelOrderReq
+ code: `4313` (string) - Code for the warning.
+ message: `Warning: Due to heavy traffic, the processing might take longer than expected.` (string) - Warning message text.

## cancelOrderReq
+ cancellationDetails (cancellationInfoReq, required) - Contains the cancellation details of the activity booking. 

## cancellationInfoReq 
+ cancellationTimestamp: `{dateTime|YYYY-MM-DDTHH:mm:ssZ|0 0}` (string) - Date and time when the activity booking is canceled. Note: The `cancellationTimestamp` field is optional only when the supplier returns error at the time of cancellation. In this case, you must specify the list of errors in the `errors` array. Format: YYYY-MM-DDTHH:MM:SSZ  
+ include supplierCancellationNumberReq
+ errors (array [errorsCancelOrderReq], fixed-type) - Contains the list of errors that occur during the cancellation process. For example, if the  booking fails, the `errors` array lists the appropriate error messages.
+ warnings (array [warningsCancelOrderReq], fixed-type) - Contains the list of warnings that appear during the cancellation process.

## supplierCancellationNumberReq
+ supplierCancellationNumber: `309755104` (string, nullable) - Supplier cancellation number for the booking. For every successful cancellation, the supplier cancellation number must be provided either in the `supplierCancellationNumber` field in the `/cancellationDetails` object. Note: The `supplierCancellationNumber` field is optional only when the supplier returns errors at the time of cancellation. In this case, you must specify the list of errors in the `errors` array.

## paymentMethodReq
+ paymentMethods (array [paymentMethodDetailsReq], fixed-type) - Contains the list of payment methods used to pay for the booking. We support payments made by cash and credit card. 
Notes: If the `/paymentMethods[]/type` field is set to `Card`, then you must provide the card details within the `/paymentMethods[]/card` object.  If the `/paymentMethods[]/type` field is set to `Cash`, then you must not provide the `/paymentMethods[]/card` object.  

## paymentMethodDetailsReq
+ type: `Card` (enum, required)- Indicates the mode of payment. Notes: If you set the `/paymentMethods[]/type` to `Card`, then you must provide the card details within the `/paymentMethods[]/card` object.  If you set the `/paymentMethods[]/type` to `Cash`, then the `/paymentMethods[]/card` object is optional.  
  + Card 
  + Cash
+ source: `Customer` (enum) - Indicates the source of payment.
  + Customer 
  + Supplier
+ currency: `USD` (string) - 3-character ISO code that indicates the currency in which the payment is made for the activity booking. We support all ISO currencies
+ card (cardInfoSupplierOrderReq) - Contains information about the credit card that is used make the payment for the booking to the supplier. Note: You must provide the `card` object, when the `/paymentMethods[]/type` field is set to `Card`.
